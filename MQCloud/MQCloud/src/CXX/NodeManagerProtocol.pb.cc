// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeManagerProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NodeManagerProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NodesManager {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* AdvertizeTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvertizeTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Disconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllPublishersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllPublishersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllPublishersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllPublishersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllSubscribersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllSubscribersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllSubscribersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllSubscribersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPublisherRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPublisherRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPublishersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPublishersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnAdvertisedTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnAdvertisedTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnNodeRejectedTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnNodeRejectedTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnNodeUnavaliable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnNodeUnavaliable_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejectTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnSubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnSubscribe_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NodeManagerProtocol_2eproto() {
  protobuf_AddDesc_NodeManagerProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NodeManagerProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  AdvertizeTopic_descriptor_ = file->message_type(0);
  static const int AdvertizeTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertizeTopic, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertizeTopic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertizeTopic, backendname_),
  };
  AdvertizeTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvertizeTopic_descriptor_,
      AdvertizeTopic::default_instance_,
      AdvertizeTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertizeTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvertizeTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvertizeTopic));
  ConnectRequest_descriptor_ = file->message_type(1);
  static const int ConnectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, nodename_),
  };
  ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRequest));
  ConnectResponse_descriptor_ = file->message_type(2);
  static const int ConnectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, realnodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, heartbeatratems_),
  };
  ConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectResponse_descriptor_,
      ConnectResponse::default_instance_,
      ConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectResponse));
  Disconnect_descriptor_ = file->message_type(3);
  static const int Disconnect_offsets_[1] = {
  };
  Disconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Disconnect_descriptor_,
      Disconnect::default_instance_,
      Disconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Disconnect));
  GetAllPublishersRequest_descriptor_ = file->message_type(4);
  static const int GetAllPublishersRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersRequest, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersRequest, backendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersRequest, topic_),
  };
  GetAllPublishersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllPublishersRequest_descriptor_,
      GetAllPublishersRequest::default_instance_,
      GetAllPublishersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllPublishersRequest));
  GetAllPublishersResponse_descriptor_ = file->message_type(5);
  static const int GetAllPublishersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersResponse, nodes_),
  };
  GetAllPublishersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllPublishersResponse_descriptor_,
      GetAllPublishersResponse::default_instance_,
      GetAllPublishersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPublishersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllPublishersResponse));
  GetAllSubscribersRequest_descriptor_ = file->message_type(6);
  static const int GetAllSubscribersRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersRequest, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersRequest, backendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersRequest, topic_),
  };
  GetAllSubscribersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllSubscribersRequest_descriptor_,
      GetAllSubscribersRequest::default_instance_,
      GetAllSubscribersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllSubscribersRequest));
  GetAllSubscribersResponse_descriptor_ = file->message_type(7);
  static const int GetAllSubscribersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersResponse, nodes_),
  };
  GetAllSubscribersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllSubscribersResponse_descriptor_,
      GetAllSubscribersResponse::default_instance_,
      GetAllSubscribersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSubscribersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllSubscribersResponse));
  GetPublisherRequest_descriptor_ = file->message_type(8);
  static const int GetPublisherRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublisherRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublisherRequest, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublisherRequest, backendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublisherRequest, topic_),
  };
  GetPublisherRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPublisherRequest_descriptor_,
      GetPublisherRequest::default_instance_,
      GetPublisherRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublisherRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublisherRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPublisherRequest));
  GetPublishersResponse_descriptor_ = file->message_type(9);
  static const int GetPublishersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublishersResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublishersResponse, nodes_),
  };
  GetPublishersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPublishersResponse_descriptor_,
      GetPublishersResponse::default_instance_,
      GetPublishersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublishersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPublishersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPublishersResponse));
  GetSubscriberRequest_descriptor_ = file->message_type(10);
  static const int GetSubscriberRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberRequest, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberRequest, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberRequest, backendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberRequest, topic_),
  };
  GetSubscriberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscriberRequest_descriptor_,
      GetSubscriberRequest::default_instance_,
      GetSubscriberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriberRequest));
  GetSubscriberResponse_descriptor_ = file->message_type(11);
  static const int GetSubscriberResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberResponse, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberResponse, node_),
  };
  GetSubscriberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscriberResponse_descriptor_,
      GetSubscriberResponse::default_instance_,
      GetSubscriberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriberResponse));
  HeartBeat_descriptor_ = file->message_type(12);
  static const int HeartBeat_offsets_[1] = {
  };
  HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeat));
  OnAdvertisedTopic_descriptor_ = file->message_type(13);
  static const int OnAdvertisedTopic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnAdvertisedTopic, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnAdvertisedTopic, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnAdvertisedTopic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnAdvertisedTopic, backendname_),
  };
  OnAdvertisedTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnAdvertisedTopic_descriptor_,
      OnAdvertisedTopic::default_instance_,
      OnAdvertisedTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnAdvertisedTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnAdvertisedTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnAdvertisedTopic));
  OnNodeRejectedTopic_descriptor_ = file->message_type(14);
  static const int OnNodeRejectedTopic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeRejectedTopic, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeRejectedTopic, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeRejectedTopic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeRejectedTopic, backendname_),
  };
  OnNodeRejectedTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnNodeRejectedTopic_descriptor_,
      OnNodeRejectedTopic::default_instance_,
      OnNodeRejectedTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeRejectedTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeRejectedTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnNodeRejectedTopic));
  OnNodeUnavaliable_descriptor_ = file->message_type(15);
  static const int OnNodeUnavaliable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeUnavaliable, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeUnavaliable, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeUnavaliable, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeUnavaliable, backendname_),
  };
  OnNodeUnavaliable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnNodeUnavaliable_descriptor_,
      OnNodeUnavaliable::default_instance_,
      OnNodeUnavaliable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeUnavaliable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnNodeUnavaliable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnNodeUnavaliable));
  RejectTopic_descriptor_ = file->message_type(16);
  static const int RejectTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectTopic, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectTopic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectTopic, backendname_),
  };
  RejectTopic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectTopic_descriptor_,
      RejectTopic::default_instance_,
      RejectTopic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectTopic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectTopic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectTopic));
  Subscribe_descriptor_ = file->message_type(17);
  static const int Subscribe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, backendname_),
  };
  Subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subscribe_descriptor_,
      Subscribe::default_instance_,
      Subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subscribe));
  UnSubscribe_descriptor_ = file->message_type(18);
  static const int UnSubscribe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribe, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribe, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribe, backendname_),
  };
  UnSubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnSubscribe_descriptor_,
      UnSubscribe::default_instance_,
      UnSubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnSubscribe));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NodeManagerProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvertizeTopic_descriptor_, &AdvertizeTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectResponse_descriptor_, &ConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Disconnect_descriptor_, &Disconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllPublishersRequest_descriptor_, &GetAllPublishersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllPublishersResponse_descriptor_, &GetAllPublishersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllSubscribersRequest_descriptor_, &GetAllSubscribersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllSubscribersResponse_descriptor_, &GetAllSubscribersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPublisherRequest_descriptor_, &GetPublisherRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPublishersResponse_descriptor_, &GetPublishersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriberRequest_descriptor_, &GetSubscriberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriberResponse_descriptor_, &GetSubscriberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnAdvertisedTopic_descriptor_, &OnAdvertisedTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnNodeRejectedTopic_descriptor_, &OnNodeRejectedTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnNodeUnavaliable_descriptor_, &OnNodeUnavaliable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectTopic_descriptor_, &RejectTopic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subscribe_descriptor_, &Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnSubscribe_descriptor_, &UnSubscribe::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NodeManagerProtocol_2eproto() {
  delete AdvertizeTopic::default_instance_;
  delete AdvertizeTopic_reflection_;
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectResponse::default_instance_;
  delete ConnectResponse_reflection_;
  delete Disconnect::default_instance_;
  delete Disconnect_reflection_;
  delete GetAllPublishersRequest::default_instance_;
  delete GetAllPublishersRequest_reflection_;
  delete GetAllPublishersResponse::default_instance_;
  delete GetAllPublishersResponse_reflection_;
  delete GetAllSubscribersRequest::default_instance_;
  delete GetAllSubscribersRequest_reflection_;
  delete GetAllSubscribersResponse::default_instance_;
  delete GetAllSubscribersResponse_reflection_;
  delete GetPublisherRequest::default_instance_;
  delete GetPublisherRequest_reflection_;
  delete GetPublishersResponse::default_instance_;
  delete GetPublishersResponse_reflection_;
  delete GetSubscriberRequest::default_instance_;
  delete GetSubscriberRequest_reflection_;
  delete GetSubscriberResponse::default_instance_;
  delete GetSubscriberResponse_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete OnAdvertisedTopic::default_instance_;
  delete OnAdvertisedTopic_reflection_;
  delete OnNodeRejectedTopic::default_instance_;
  delete OnNodeRejectedTopic_reflection_;
  delete OnNodeUnavaliable::default_instance_;
  delete OnNodeUnavaliable_reflection_;
  delete RejectTopic::default_instance_;
  delete RejectTopic_reflection_;
  delete Subscribe::default_instance_;
  delete Subscribe_reflection_;
  delete UnSubscribe::default_instance_;
  delete UnSubscribe_reflection_;
}

void protobuf_AddDesc_NodeManagerProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031NodeManagerProtocol.proto\022\025NodesManage"
    "r.Protocol\"E\n\016AdvertizeTopic\022\017\n\007Pattern\030"
    "\001 \001(\t\022\r\n\005Topic\030\002 \001(\t\022\023\n\013BackEndName\030\004 \001("
    "\t\"\"\n\016ConnectRequest\022\020\n\010NodeName\030\001 \001(\t\"C\n"
    "\017ConnectResponse\022\024\n\014RealNodeName\030\001 \001(\t\022\032"
    "\n\017HeartBeatRateMs\030\002 \001(\005:\0010\"\014\n\nDisconnect"
    "\"d\n\027GetAllPublishersRequest\022\024\n\tRequestId"
    "\030\001 \001(\005:\0010\022\017\n\007Pattern\030\002 \001(\t\022\023\n\013BackEndNam"
    "e\030\003 \001(\t\022\r\n\005Topic\030\004 \001(\t\"\?\n\030GetAllPublishe"
    "rsResponse\022\024\n\tRequestId\030\001 \001(\005:\0010\022\r\n\005Node"
    "s\030\002 \003(\t\"e\n\030GetAllSubscribersRequest\022\024\n\tR"
    "equestId\030\001 \001(\005:\0010\022\017\n\007Pattern\030\002 \001(\t\022\023\n\013Ba"
    "ckEndName\030\003 \001(\t\022\r\n\005Topic\030\004 \001(\t\"@\n\031GetAll"
    "SubscribersResponse\022\024\n\tRequestId\030\001 \001(\005:\001"
    "0\022\r\n\005Nodes\030\002 \003(\t\"`\n\023GetPublisherRequest\022"
    "\024\n\tRequestId\030\001 \001(\005:\0010\022\017\n\007Pattern\030\002 \001(\t\022\023"
    "\n\013BackEndName\030\003 \001(\t\022\r\n\005Topic\030\004 \001(\t\"<\n\025Ge"
    "tPublishersResponse\022\024\n\tRequestId\030\001 \001(\005:\001"
    "0\022\r\n\005Nodes\030\002 \003(\t\"a\n\024GetSubscriberRequest"
    "\022\024\n\tRequestId\030\001 \001(\005:\0010\022\017\n\007Pattern\030\002 \001(\t\022"
    "\023\n\013BackEndName\030\003 \001(\t\022\r\n\005Topic\030\004 \001(\t\";\n\025G"
    "etSubscriberResponse\022\024\n\tRequestId\030\001 \001(\005:"
    "\0010\022\014\n\004Node\030\002 \001(\t\"\013\n\tHeartBeat\"V\n\021OnAdver"
    "tisedTopic\022\014\n\004Node\030\001 \001(\t\022\017\n\007Pattern\030\002 \001("
    "\t\022\r\n\005Topic\030\003 \001(\t\022\023\n\013BackEndName\030\004 \001(\t\"X\n"
    "\023OnNodeRejectedTopic\022\014\n\004Node\030\001 \001(\t\022\017\n\007Pa"
    "ttern\030\002 \001(\t\022\r\n\005Topic\030\003 \001(\t\022\023\n\013BackEndNam"
    "e\030\004 \001(\t\"V\n\021OnNodeUnavaliable\022\014\n\004Node\030\001 \001"
    "(\t\022\017\n\007Pattern\030\002 \001(\t\022\r\n\005Topic\030\003 \001(\t\022\023\n\013Ba"
    "ckEndName\030\004 \001(\t\"B\n\013RejectTopic\022\017\n\007Patter"
    "n\030\001 \001(\t\022\r\n\005Topic\030\002 \001(\t\022\023\n\013BackEndName\030\003 "
    "\001(\t\"@\n\tSubscribe\022\017\n\007Pattern\030\001 \001(\t\022\r\n\005Top"
    "ic\030\002 \001(\t\022\023\n\013BackEndName\030\003 \001(\t\"B\n\013UnSubsc"
    "ribe\022\017\n\007Pattern\030\001 \001(\t\022\r\n\005Topic\030\002 \001(\t\022\023\n\013"
    "BackEndName\030\003 \001(\t", 1377);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NodeManagerProtocol.proto", &protobuf_RegisterTypes);
  AdvertizeTopic::default_instance_ = new AdvertizeTopic();
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectResponse::default_instance_ = new ConnectResponse();
  Disconnect::default_instance_ = new Disconnect();
  GetAllPublishersRequest::default_instance_ = new GetAllPublishersRequest();
  GetAllPublishersResponse::default_instance_ = new GetAllPublishersResponse();
  GetAllSubscribersRequest::default_instance_ = new GetAllSubscribersRequest();
  GetAllSubscribersResponse::default_instance_ = new GetAllSubscribersResponse();
  GetPublisherRequest::default_instance_ = new GetPublisherRequest();
  GetPublishersResponse::default_instance_ = new GetPublishersResponse();
  GetSubscriberRequest::default_instance_ = new GetSubscriberRequest();
  GetSubscriberResponse::default_instance_ = new GetSubscriberResponse();
  HeartBeat::default_instance_ = new HeartBeat();
  OnAdvertisedTopic::default_instance_ = new OnAdvertisedTopic();
  OnNodeRejectedTopic::default_instance_ = new OnNodeRejectedTopic();
  OnNodeUnavaliable::default_instance_ = new OnNodeUnavaliable();
  RejectTopic::default_instance_ = new RejectTopic();
  Subscribe::default_instance_ = new Subscribe();
  UnSubscribe::default_instance_ = new UnSubscribe();
  AdvertizeTopic::default_instance_->InitAsDefaultInstance();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  Disconnect::default_instance_->InitAsDefaultInstance();
  GetAllPublishersRequest::default_instance_->InitAsDefaultInstance();
  GetAllPublishersResponse::default_instance_->InitAsDefaultInstance();
  GetAllSubscribersRequest::default_instance_->InitAsDefaultInstance();
  GetAllSubscribersResponse::default_instance_->InitAsDefaultInstance();
  GetPublisherRequest::default_instance_->InitAsDefaultInstance();
  GetPublishersResponse::default_instance_->InitAsDefaultInstance();
  GetSubscriberRequest::default_instance_->InitAsDefaultInstance();
  GetSubscriberResponse::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  OnAdvertisedTopic::default_instance_->InitAsDefaultInstance();
  OnNodeRejectedTopic::default_instance_->InitAsDefaultInstance();
  OnNodeUnavaliable::default_instance_->InitAsDefaultInstance();
  RejectTopic::default_instance_->InitAsDefaultInstance();
  Subscribe::default_instance_->InitAsDefaultInstance();
  UnSubscribe::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NodeManagerProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NodeManagerProtocol_2eproto {
  StaticDescriptorInitializer_NodeManagerProtocol_2eproto() {
    protobuf_AddDesc_NodeManagerProtocol_2eproto();
  }
} static_descriptor_initializer_NodeManagerProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AdvertizeTopic::kPatternFieldNumber;
const int AdvertizeTopic::kTopicFieldNumber;
const int AdvertizeTopic::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

AdvertizeTopic::AdvertizeTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.AdvertizeTopic)
}

void AdvertizeTopic::InitAsDefaultInstance() {
}

AdvertizeTopic::AdvertizeTopic(const AdvertizeTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.AdvertizeTopic)
}

void AdvertizeTopic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvertizeTopic::~AdvertizeTopic() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.AdvertizeTopic)
  SharedDtor();
}

void AdvertizeTopic::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void AdvertizeTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvertizeTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvertizeTopic_descriptor_;
}

const AdvertizeTopic& AdvertizeTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

AdvertizeTopic* AdvertizeTopic::default_instance_ = NULL;

AdvertizeTopic* AdvertizeTopic::New() const {
  return new AdvertizeTopic;
}

void AdvertizeTopic::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvertizeTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.AdvertizeTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Pattern = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Topic;
        break;
      }

      // optional string Topic = 2;
      case 2: {
        if (tag == 18) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 4;
      case 4: {
        if (tag == 34) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.AdvertizeTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.AdvertizeTopic)
  return false;
#undef DO_
}

void AdvertizeTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.AdvertizeTopic)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.AdvertizeTopic)
}

::google::protobuf::uint8* AdvertizeTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.AdvertizeTopic)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.AdvertizeTopic)
  return target;
}

int AdvertizeTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 4;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvertizeTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvertizeTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvertizeTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvertizeTopic::MergeFrom(const AdvertizeTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvertizeTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvertizeTopic::CopyFrom(const AdvertizeTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvertizeTopic::IsInitialized() const {

  return true;
}

void AdvertizeTopic::Swap(AdvertizeTopic* other) {
  if (other != this) {
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvertizeTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvertizeTopic_descriptor_;
  metadata.reflection = AdvertizeTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kNodeNameFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.ConnectRequest)
}

void ConnectRequest::InitAsDefaultInstance() {
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nodename_;
  }
  if (this != default_instance_) {
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Clear() {
  if (has_nodename()) {
    if (nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nodename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.ConnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string NodeName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nodename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.ConnectRequest)
  return false;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.ConnectRequest)
  // optional string NodeName = 1;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.ConnectRequest)
}

::google::protobuf::uint8* ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.ConnectRequest)
  // optional string NodeName = 1;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.ConnectRequest)
  return target;
}

int ConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string NodeName = 1;
    if (has_nodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodename()) {
      set_nodename(from.nodename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {

  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    std::swap(nodename_, other->nodename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kRealNodeNameFieldNumber;
const int ConnectResponse::kHeartBeatRateMsFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.ConnectResponse)
}

void ConnectResponse::InitAsDefaultInstance() {
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.ConnectResponse)
}

void ConnectResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  realnodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heartbeatratems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.ConnectResponse)
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (realnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete realnodename_;
  }
  if (this != default_instance_) {
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectResponse_descriptor_;
}

const ConnectResponse& ConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_realnodename()) {
      if (realnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        realnodename_->clear();
      }
    }
    heartbeatratems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.ConnectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RealNodeName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realnodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realnodename().data(), this->realnodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "realnodename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HeartBeatRateMs;
        break;
      }

      // optional int32 HeartBeatRateMs = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_HeartBeatRateMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeatratems_)));
          set_has_heartbeatratems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.ConnectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.ConnectResponse)
  return false;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.ConnectResponse)
  // optional string RealNodeName = 1;
  if (has_realnodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realnodename().data(), this->realnodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realnodename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->realnodename(), output);
  }

  // optional int32 HeartBeatRateMs = 2 [default = 0];
  if (has_heartbeatratems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heartbeatratems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.ConnectResponse)
}

::google::protobuf::uint8* ConnectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.ConnectResponse)
  // optional string RealNodeName = 1;
  if (has_realnodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realnodename().data(), this->realnodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "realnodename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->realnodename(), target);
  }

  // optional int32 HeartBeatRateMs = 2 [default = 0];
  if (has_heartbeatratems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heartbeatratems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.ConnectResponse)
  return target;
}

int ConnectResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RealNodeName = 1;
    if (has_realnodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realnodename());
    }

    // optional int32 HeartBeatRateMs = 2 [default = 0];
    if (has_heartbeatratems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeatratems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_realnodename()) {
      set_realnodename(from.realnodename());
    }
    if (from.has_heartbeatratems()) {
      set_heartbeatratems(from.heartbeatratems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {

  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    std::swap(realnodename_, other->realnodename_);
    std::swap(heartbeatratems_, other->heartbeatratems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectResponse_descriptor_;
  metadata.reflection = ConnectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Disconnect::Disconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.Disconnect)
}

void Disconnect::InitAsDefaultInstance() {
}

Disconnect::Disconnect(const Disconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.Disconnect)
}

void Disconnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Disconnect::~Disconnect() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.Disconnect)
  SharedDtor();
}

void Disconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disconnect_descriptor_;
}

const Disconnect& Disconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

Disconnect* Disconnect::default_instance_ = NULL;

Disconnect* Disconnect::New() const {
  return new Disconnect;
}

void Disconnect::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.Disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.Disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.Disconnect)
  return false;
#undef DO_
}

void Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.Disconnect)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.Disconnect)
}

::google::protobuf::uint8* Disconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.Disconnect)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.Disconnect)
  return target;
}

int Disconnect::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Disconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Disconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Disconnect::MergeFrom(const Disconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disconnect::CopyFrom(const Disconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disconnect::IsInitialized() const {

  return true;
}

void Disconnect::Swap(Disconnect* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Disconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disconnect_descriptor_;
  metadata.reflection = Disconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllPublishersRequest::kRequestIdFieldNumber;
const int GetAllPublishersRequest::kPatternFieldNumber;
const int GetAllPublishersRequest::kBackEndNameFieldNumber;
const int GetAllPublishersRequest::kTopicFieldNumber;
#endif  // !_MSC_VER

GetAllPublishersRequest::GetAllPublishersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetAllPublishersRequest)
}

void GetAllPublishersRequest::InitAsDefaultInstance() {
}

GetAllPublishersRequest::GetAllPublishersRequest(const GetAllPublishersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetAllPublishersRequest)
}

void GetAllPublishersRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPublishersRequest::~GetAllPublishersRequest() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetAllPublishersRequest)
  SharedDtor();
}

void GetAllPublishersRequest::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void GetAllPublishersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllPublishersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllPublishersRequest_descriptor_;
}

const GetAllPublishersRequest& GetAllPublishersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetAllPublishersRequest* GetAllPublishersRequest::default_instance_ = NULL;

GetAllPublishersRequest* GetAllPublishersRequest::New() const {
  return new GetAllPublishersRequest;
}

void GetAllPublishersRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    requestid_ = 0;
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllPublishersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetAllPublishersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Topic;
        break;
      }

      // optional string Topic = 4;
      case 4: {
        if (tag == 34) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetAllPublishersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetAllPublishersRequest)
  return false;
#undef DO_
}

void GetAllPublishersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetAllPublishersRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetAllPublishersRequest)
}

::google::protobuf::uint8* GetAllPublishersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetAllPublishersRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetAllPublishersRequest)
  return target;
}

int GetAllPublishersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

    // optional string Topic = 4;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPublishersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllPublishersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllPublishersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllPublishersRequest::MergeFrom(const GetAllPublishersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllPublishersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllPublishersRequest::CopyFrom(const GetAllPublishersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublishersRequest::IsInitialized() const {

  return true;
}

void GetAllPublishersRequest::Swap(GetAllPublishersRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(pattern_, other->pattern_);
    std::swap(backendname_, other->backendname_);
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllPublishersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllPublishersRequest_descriptor_;
  metadata.reflection = GetAllPublishersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllPublishersResponse::kRequestIdFieldNumber;
const int GetAllPublishersResponse::kNodesFieldNumber;
#endif  // !_MSC_VER

GetAllPublishersResponse::GetAllPublishersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetAllPublishersResponse)
}

void GetAllPublishersResponse::InitAsDefaultInstance() {
}

GetAllPublishersResponse::GetAllPublishersResponse(const GetAllPublishersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetAllPublishersResponse)
}

void GetAllPublishersResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPublishersResponse::~GetAllPublishersResponse() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetAllPublishersResponse)
  SharedDtor();
}

void GetAllPublishersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllPublishersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllPublishersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllPublishersResponse_descriptor_;
}

const GetAllPublishersResponse& GetAllPublishersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetAllPublishersResponse* GetAllPublishersResponse::default_instance_ = NULL;

GetAllPublishersResponse* GetAllPublishersResponse::New() const {
  return new GetAllPublishersResponse;
}

void GetAllPublishersResponse::Clear() {
  requestid_ = 0;
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllPublishersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetAllPublishersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Nodes;
        break;
      }

      // repeated string Nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_Nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodes(this->nodes_size() - 1).data(),
            this->nodes(this->nodes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nodes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetAllPublishersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetAllPublishersResponse)
  return false;
#undef DO_
}

void GetAllPublishersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetAllPublishersResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string Nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->nodes(i).data(), this->nodes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetAllPublishersResponse)
}

::google::protobuf::uint8* GetAllPublishersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetAllPublishersResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string Nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), this->nodes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetAllPublishersResponse)
  return target;
}

int GetAllPublishersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  // repeated string Nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPublishersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllPublishersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllPublishersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllPublishersResponse::MergeFrom(const GetAllPublishersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllPublishersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllPublishersResponse::CopyFrom(const GetAllPublishersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublishersResponse::IsInitialized() const {

  return true;
}

void GetAllPublishersResponse::Swap(GetAllPublishersResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllPublishersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllPublishersResponse_descriptor_;
  metadata.reflection = GetAllPublishersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllSubscribersRequest::kRequestIdFieldNumber;
const int GetAllSubscribersRequest::kPatternFieldNumber;
const int GetAllSubscribersRequest::kBackEndNameFieldNumber;
const int GetAllSubscribersRequest::kTopicFieldNumber;
#endif  // !_MSC_VER

GetAllSubscribersRequest::GetAllSubscribersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetAllSubscribersRequest)
}

void GetAllSubscribersRequest::InitAsDefaultInstance() {
}

GetAllSubscribersRequest::GetAllSubscribersRequest(const GetAllSubscribersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetAllSubscribersRequest)
}

void GetAllSubscribersRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllSubscribersRequest::~GetAllSubscribersRequest() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetAllSubscribersRequest)
  SharedDtor();
}

void GetAllSubscribersRequest::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void GetAllSubscribersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllSubscribersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllSubscribersRequest_descriptor_;
}

const GetAllSubscribersRequest& GetAllSubscribersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetAllSubscribersRequest* GetAllSubscribersRequest::default_instance_ = NULL;

GetAllSubscribersRequest* GetAllSubscribersRequest::New() const {
  return new GetAllSubscribersRequest;
}

void GetAllSubscribersRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    requestid_ = 0;
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllSubscribersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetAllSubscribersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Topic;
        break;
      }

      // optional string Topic = 4;
      case 4: {
        if (tag == 34) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetAllSubscribersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetAllSubscribersRequest)
  return false;
#undef DO_
}

void GetAllSubscribersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetAllSubscribersRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetAllSubscribersRequest)
}

::google::protobuf::uint8* GetAllSubscribersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetAllSubscribersRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetAllSubscribersRequest)
  return target;
}

int GetAllSubscribersRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

    // optional string Topic = 4;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllSubscribersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllSubscribersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllSubscribersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllSubscribersRequest::MergeFrom(const GetAllSubscribersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllSubscribersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSubscribersRequest::CopyFrom(const GetAllSubscribersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSubscribersRequest::IsInitialized() const {

  return true;
}

void GetAllSubscribersRequest::Swap(GetAllSubscribersRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(pattern_, other->pattern_);
    std::swap(backendname_, other->backendname_);
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllSubscribersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllSubscribersRequest_descriptor_;
  metadata.reflection = GetAllSubscribersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllSubscribersResponse::kRequestIdFieldNumber;
const int GetAllSubscribersResponse::kNodesFieldNumber;
#endif  // !_MSC_VER

GetAllSubscribersResponse::GetAllSubscribersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetAllSubscribersResponse)
}

void GetAllSubscribersResponse::InitAsDefaultInstance() {
}

GetAllSubscribersResponse::GetAllSubscribersResponse(const GetAllSubscribersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetAllSubscribersResponse)
}

void GetAllSubscribersResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllSubscribersResponse::~GetAllSubscribersResponse() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetAllSubscribersResponse)
  SharedDtor();
}

void GetAllSubscribersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllSubscribersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllSubscribersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllSubscribersResponse_descriptor_;
}

const GetAllSubscribersResponse& GetAllSubscribersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetAllSubscribersResponse* GetAllSubscribersResponse::default_instance_ = NULL;

GetAllSubscribersResponse* GetAllSubscribersResponse::New() const {
  return new GetAllSubscribersResponse;
}

void GetAllSubscribersResponse::Clear() {
  requestid_ = 0;
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllSubscribersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetAllSubscribersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Nodes;
        break;
      }

      // repeated string Nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_Nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodes(this->nodes_size() - 1).data(),
            this->nodes(this->nodes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nodes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetAllSubscribersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetAllSubscribersResponse)
  return false;
#undef DO_
}

void GetAllSubscribersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetAllSubscribersResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string Nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->nodes(i).data(), this->nodes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetAllSubscribersResponse)
}

::google::protobuf::uint8* GetAllSubscribersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetAllSubscribersResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string Nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), this->nodes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetAllSubscribersResponse)
  return target;
}

int GetAllSubscribersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  // repeated string Nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllSubscribersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllSubscribersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllSubscribersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllSubscribersResponse::MergeFrom(const GetAllSubscribersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllSubscribersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSubscribersResponse::CopyFrom(const GetAllSubscribersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSubscribersResponse::IsInitialized() const {

  return true;
}

void GetAllSubscribersResponse::Swap(GetAllSubscribersResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllSubscribersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllSubscribersResponse_descriptor_;
  metadata.reflection = GetAllSubscribersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPublisherRequest::kRequestIdFieldNumber;
const int GetPublisherRequest::kPatternFieldNumber;
const int GetPublisherRequest::kBackEndNameFieldNumber;
const int GetPublisherRequest::kTopicFieldNumber;
#endif  // !_MSC_VER

GetPublisherRequest::GetPublisherRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetPublisherRequest)
}

void GetPublisherRequest::InitAsDefaultInstance() {
}

GetPublisherRequest::GetPublisherRequest(const GetPublisherRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetPublisherRequest)
}

void GetPublisherRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPublisherRequest::~GetPublisherRequest() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetPublisherRequest)
  SharedDtor();
}

void GetPublisherRequest::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void GetPublisherRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPublisherRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPublisherRequest_descriptor_;
}

const GetPublisherRequest& GetPublisherRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetPublisherRequest* GetPublisherRequest::default_instance_ = NULL;

GetPublisherRequest* GetPublisherRequest::New() const {
  return new GetPublisherRequest;
}

void GetPublisherRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    requestid_ = 0;
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPublisherRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetPublisherRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Topic;
        break;
      }

      // optional string Topic = 4;
      case 4: {
        if (tag == 34) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetPublisherRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetPublisherRequest)
  return false;
#undef DO_
}

void GetPublisherRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetPublisherRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetPublisherRequest)
}

::google::protobuf::uint8* GetPublisherRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetPublisherRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetPublisherRequest)
  return target;
}

int GetPublisherRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

    // optional string Topic = 4;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPublisherRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPublisherRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPublisherRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPublisherRequest::MergeFrom(const GetPublisherRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPublisherRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPublisherRequest::CopyFrom(const GetPublisherRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublisherRequest::IsInitialized() const {

  return true;
}

void GetPublisherRequest::Swap(GetPublisherRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(pattern_, other->pattern_);
    std::swap(backendname_, other->backendname_);
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPublisherRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPublisherRequest_descriptor_;
  metadata.reflection = GetPublisherRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPublishersResponse::kRequestIdFieldNumber;
const int GetPublishersResponse::kNodesFieldNumber;
#endif  // !_MSC_VER

GetPublishersResponse::GetPublishersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetPublishersResponse)
}

void GetPublishersResponse::InitAsDefaultInstance() {
}

GetPublishersResponse::GetPublishersResponse(const GetPublishersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetPublishersResponse)
}

void GetPublishersResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPublishersResponse::~GetPublishersResponse() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetPublishersResponse)
  SharedDtor();
}

void GetPublishersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPublishersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPublishersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPublishersResponse_descriptor_;
}

const GetPublishersResponse& GetPublishersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetPublishersResponse* GetPublishersResponse::default_instance_ = NULL;

GetPublishersResponse* GetPublishersResponse::New() const {
  return new GetPublishersResponse;
}

void GetPublishersResponse::Clear() {
  requestid_ = 0;
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPublishersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetPublishersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Nodes;
        break;
      }

      // repeated string Nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_Nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodes(this->nodes_size() - 1).data(),
            this->nodes(this->nodes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nodes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetPublishersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetPublishersResponse)
  return false;
#undef DO_
}

void GetPublishersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetPublishersResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // repeated string Nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->nodes(i).data(), this->nodes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetPublishersResponse)
}

::google::protobuf::uint8* GetPublishersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetPublishersResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // repeated string Nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), this->nodes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetPublishersResponse)
  return target;
}

int GetPublishersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  // repeated string Nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPublishersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPublishersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPublishersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPublishersResponse::MergeFrom(const GetPublishersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPublishersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPublishersResponse::CopyFrom(const GetPublishersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublishersResponse::IsInitialized() const {

  return true;
}

void GetPublishersResponse::Swap(GetPublishersResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPublishersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPublishersResponse_descriptor_;
  metadata.reflection = GetPublishersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriberRequest::kRequestIdFieldNumber;
const int GetSubscriberRequest::kPatternFieldNumber;
const int GetSubscriberRequest::kBackEndNameFieldNumber;
const int GetSubscriberRequest::kTopicFieldNumber;
#endif  // !_MSC_VER

GetSubscriberRequest::GetSubscriberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetSubscriberRequest)
}

void GetSubscriberRequest::InitAsDefaultInstance() {
}

GetSubscriberRequest::GetSubscriberRequest(const GetSubscriberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetSubscriberRequest)
}

void GetSubscriberRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriberRequest::~GetSubscriberRequest() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetSubscriberRequest)
  SharedDtor();
}

void GetSubscriberRequest::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void GetSubscriberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriberRequest_descriptor_;
}

const GetSubscriberRequest& GetSubscriberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetSubscriberRequest* GetSubscriberRequest::default_instance_ = NULL;

GetSubscriberRequest* GetSubscriberRequest::New() const {
  return new GetSubscriberRequest;
}

void GetSubscriberRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    requestid_ = 0;
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetSubscriberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Topic;
        break;
      }

      // optional string Topic = 4;
      case 4: {
        if (tag == 34) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetSubscriberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetSubscriberRequest)
  return false;
#undef DO_
}

void GetSubscriberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetSubscriberRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetSubscriberRequest)
}

::google::protobuf::uint8* GetSubscriberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetSubscriberRequest)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  // optional string Topic = 4;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetSubscriberRequest)
  return target;
}

int GetSubscriberRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

    // optional string Topic = 4;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscriberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriberRequest::MergeFrom(const GetSubscriberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriberRequest::CopyFrom(const GetSubscriberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriberRequest::IsInitialized() const {

  return true;
}

void GetSubscriberRequest::Swap(GetSubscriberRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(pattern_, other->pattern_);
    std::swap(backendname_, other->backendname_);
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscriberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriberRequest_descriptor_;
  metadata.reflection = GetSubscriberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriberResponse::kRequestIdFieldNumber;
const int GetSubscriberResponse::kNodeFieldNumber;
#endif  // !_MSC_VER

GetSubscriberResponse::GetSubscriberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.GetSubscriberResponse)
}

void GetSubscriberResponse::InitAsDefaultInstance() {
}

GetSubscriberResponse::GetSubscriberResponse(const GetSubscriberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.GetSubscriberResponse)
}

void GetSubscriberResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requestid_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriberResponse::~GetSubscriberResponse() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.GetSubscriberResponse)
  SharedDtor();
}

void GetSubscriberResponse::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (this != default_instance_) {
  }
}

void GetSubscriberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriberResponse_descriptor_;
}

const GetSubscriberResponse& GetSubscriberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

GetSubscriberResponse* GetSubscriberResponse::default_instance_ = NULL;

GetSubscriberResponse* GetSubscriberResponse::New() const {
  return new GetSubscriberResponse;
}

void GetSubscriberResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    requestid_ = 0;
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.GetSubscriberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Node;
        break;
      }

      // optional string Node = 2;
      case 2: {
        if (tag == 18) {
         parse_Node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.GetSubscriberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.GetSubscriberResponse)
  return false;
#undef DO_
}

void GetSubscriberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.GetSubscriberResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.GetSubscriberResponse)
}

::google::protobuf::uint8* GetSubscriberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.GetSubscriberResponse)
  // optional int32 RequestId = 1 [default = 0];
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.GetSubscriberResponse)
  return target;
}

int GetSubscriberResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RequestId = 1 [default = 0];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional string Node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscriberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriberResponse::MergeFrom(const GetSubscriberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriberResponse::CopyFrom(const GetSubscriberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriberResponse::IsInitialized() const {

  return true;
}

void GetSubscriberResponse::Swap(GetSubscriberResponse* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscriberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriberResponse_descriptor_;
  metadata.reflection = GetSubscriberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.HeartBeat)
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New() const {
  return new HeartBeat;
}

void HeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.HeartBeat)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.HeartBeat)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnAdvertisedTopic::kNodeFieldNumber;
const int OnAdvertisedTopic::kPatternFieldNumber;
const int OnAdvertisedTopic::kTopicFieldNumber;
const int OnAdvertisedTopic::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

OnAdvertisedTopic::OnAdvertisedTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.OnAdvertisedTopic)
}

void OnAdvertisedTopic::InitAsDefaultInstance() {
}

OnAdvertisedTopic::OnAdvertisedTopic(const OnAdvertisedTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.OnAdvertisedTopic)
}

void OnAdvertisedTopic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnAdvertisedTopic::~OnAdvertisedTopic() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.OnAdvertisedTopic)
  SharedDtor();
}

void OnAdvertisedTopic::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void OnAdvertisedTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnAdvertisedTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnAdvertisedTopic_descriptor_;
}

const OnAdvertisedTopic& OnAdvertisedTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

OnAdvertisedTopic* OnAdvertisedTopic::default_instance_ = NULL;

OnAdvertisedTopic* OnAdvertisedTopic::New() const {
  return new OnAdvertisedTopic;
}

void OnAdvertisedTopic::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnAdvertisedTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.OnAdvertisedTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Topic;
        break;
      }

      // optional string Topic = 3;
      case 3: {
        if (tag == 26) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 4;
      case 4: {
        if (tag == 34) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.OnAdvertisedTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.OnAdvertisedTopic)
  return false;
#undef DO_
}

void OnAdvertisedTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.OnAdvertisedTopic)
  // optional string Node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string Topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.OnAdvertisedTopic)
}

::google::protobuf::uint8* OnAdvertisedTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.OnAdvertisedTopic)
  // optional string Node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string Topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.OnAdvertisedTopic)
  return target;
}

int OnAdvertisedTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 4;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnAdvertisedTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnAdvertisedTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnAdvertisedTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnAdvertisedTopic::MergeFrom(const OnAdvertisedTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnAdvertisedTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnAdvertisedTopic::CopyFrom(const OnAdvertisedTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnAdvertisedTopic::IsInitialized() const {

  return true;
}

void OnAdvertisedTopic::Swap(OnAdvertisedTopic* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnAdvertisedTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnAdvertisedTopic_descriptor_;
  metadata.reflection = OnAdvertisedTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnNodeRejectedTopic::kNodeFieldNumber;
const int OnNodeRejectedTopic::kPatternFieldNumber;
const int OnNodeRejectedTopic::kTopicFieldNumber;
const int OnNodeRejectedTopic::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

OnNodeRejectedTopic::OnNodeRejectedTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.OnNodeRejectedTopic)
}

void OnNodeRejectedTopic::InitAsDefaultInstance() {
}

OnNodeRejectedTopic::OnNodeRejectedTopic(const OnNodeRejectedTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.OnNodeRejectedTopic)
}

void OnNodeRejectedTopic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnNodeRejectedTopic::~OnNodeRejectedTopic() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.OnNodeRejectedTopic)
  SharedDtor();
}

void OnNodeRejectedTopic::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void OnNodeRejectedTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnNodeRejectedTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnNodeRejectedTopic_descriptor_;
}

const OnNodeRejectedTopic& OnNodeRejectedTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

OnNodeRejectedTopic* OnNodeRejectedTopic::default_instance_ = NULL;

OnNodeRejectedTopic* OnNodeRejectedTopic::New() const {
  return new OnNodeRejectedTopic;
}

void OnNodeRejectedTopic::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnNodeRejectedTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.OnNodeRejectedTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Topic;
        break;
      }

      // optional string Topic = 3;
      case 3: {
        if (tag == 26) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 4;
      case 4: {
        if (tag == 34) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.OnNodeRejectedTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.OnNodeRejectedTopic)
  return false;
#undef DO_
}

void OnNodeRejectedTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.OnNodeRejectedTopic)
  // optional string Node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string Topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.OnNodeRejectedTopic)
}

::google::protobuf::uint8* OnNodeRejectedTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.OnNodeRejectedTopic)
  // optional string Node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string Topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.OnNodeRejectedTopic)
  return target;
}

int OnNodeRejectedTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 4;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnNodeRejectedTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnNodeRejectedTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnNodeRejectedTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnNodeRejectedTopic::MergeFrom(const OnNodeRejectedTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnNodeRejectedTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnNodeRejectedTopic::CopyFrom(const OnNodeRejectedTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnNodeRejectedTopic::IsInitialized() const {

  return true;
}

void OnNodeRejectedTopic::Swap(OnNodeRejectedTopic* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnNodeRejectedTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnNodeRejectedTopic_descriptor_;
  metadata.reflection = OnNodeRejectedTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnNodeUnavaliable::kNodeFieldNumber;
const int OnNodeUnavaliable::kPatternFieldNumber;
const int OnNodeUnavaliable::kTopicFieldNumber;
const int OnNodeUnavaliable::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

OnNodeUnavaliable::OnNodeUnavaliable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.OnNodeUnavaliable)
}

void OnNodeUnavaliable::InitAsDefaultInstance() {
}

OnNodeUnavaliable::OnNodeUnavaliable(const OnNodeUnavaliable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.OnNodeUnavaliable)
}

void OnNodeUnavaliable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnNodeUnavaliable::~OnNodeUnavaliable() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.OnNodeUnavaliable)
  SharedDtor();
}

void OnNodeUnavaliable::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void OnNodeUnavaliable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnNodeUnavaliable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnNodeUnavaliable_descriptor_;
}

const OnNodeUnavaliable& OnNodeUnavaliable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

OnNodeUnavaliable* OnNodeUnavaliable::default_instance_ = NULL;

OnNodeUnavaliable* OnNodeUnavaliable::New() const {
  return new OnNodeUnavaliable;
}

void OnNodeUnavaliable::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnNodeUnavaliable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.OnNodeUnavaliable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pattern;
        break;
      }

      // optional string Pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_Pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Topic;
        break;
      }

      // optional string Topic = 3;
      case 3: {
        if (tag == 26) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 4;
      case 4: {
        if (tag == 34) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.OnNodeUnavaliable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.OnNodeUnavaliable)
  return false;
#undef DO_
}

void OnNodeUnavaliable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.OnNodeUnavaliable)
  // optional string Node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node(), output);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // optional string Topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.OnNodeUnavaliable)
}

::google::protobuf::uint8* OnNodeUnavaliable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.OnNodeUnavaliable)
  // optional string Node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node(), target);
  }

  // optional string Pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional string Topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  // optional string BackEndName = 4;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.OnNodeUnavaliable)
  return target;
}

int OnNodeUnavaliable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
    }

    // optional string Pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 4;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnNodeUnavaliable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnNodeUnavaliable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnNodeUnavaliable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnNodeUnavaliable::MergeFrom(const OnNodeUnavaliable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnNodeUnavaliable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnNodeUnavaliable::CopyFrom(const OnNodeUnavaliable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnNodeUnavaliable::IsInitialized() const {

  return true;
}

void OnNodeUnavaliable::Swap(OnNodeUnavaliable* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnNodeUnavaliable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnNodeUnavaliable_descriptor_;
  metadata.reflection = OnNodeUnavaliable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RejectTopic::kPatternFieldNumber;
const int RejectTopic::kTopicFieldNumber;
const int RejectTopic::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

RejectTopic::RejectTopic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.RejectTopic)
}

void RejectTopic::InitAsDefaultInstance() {
}

RejectTopic::RejectTopic(const RejectTopic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.RejectTopic)
}

void RejectTopic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectTopic::~RejectTopic() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.RejectTopic)
  SharedDtor();
}

void RejectTopic::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void RejectTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectTopic_descriptor_;
}

const RejectTopic& RejectTopic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

RejectTopic* RejectTopic::default_instance_ = NULL;

RejectTopic* RejectTopic::New() const {
  return new RejectTopic;
}

void RejectTopic::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.RejectTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Pattern = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Topic;
        break;
      }

      // optional string Topic = 2;
      case 2: {
        if (tag == 18) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.RejectTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.RejectTopic)
  return false;
#undef DO_
}

void RejectTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.RejectTopic)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.RejectTopic)
}

::google::protobuf::uint8* RejectTopic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.RejectTopic)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.RejectTopic)
  return target;
}

int RejectTopic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectTopic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectTopic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectTopic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectTopic::MergeFrom(const RejectTopic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectTopic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectTopic::CopyFrom(const RejectTopic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectTopic::IsInitialized() const {

  return true;
}

void RejectTopic::Swap(RejectTopic* other) {
  if (other != this) {
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectTopic_descriptor_;
  metadata.reflection = RejectTopic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subscribe::kPatternFieldNumber;
const int Subscribe::kTopicFieldNumber;
const int Subscribe::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

Subscribe::Subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.Subscribe)
}

void Subscribe::InitAsDefaultInstance() {
}

Subscribe::Subscribe(const Subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.Subscribe)
}

void Subscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subscribe::~Subscribe() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.Subscribe)
  SharedDtor();
}

void Subscribe::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscribe_descriptor_;
}

const Subscribe& Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

Subscribe* Subscribe::default_instance_ = NULL;

Subscribe* Subscribe::New() const {
  return new Subscribe;
}

void Subscribe::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.Subscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Pattern = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Topic;
        break;
      }

      // optional string Topic = 2;
      case 2: {
        if (tag == 18) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.Subscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.Subscribe)
  return false;
#undef DO_
}

void Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.Subscribe)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.Subscribe)
}

::google::protobuf::uint8* Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.Subscribe)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.Subscribe)
  return target;
}

int Subscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subscribe::MergeFrom(const Subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscribe::CopyFrom(const Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {

  return true;
}

void Subscribe::Swap(Subscribe* other) {
  if (other != this) {
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscribe_descriptor_;
  metadata.reflection = Subscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnSubscribe::kPatternFieldNumber;
const int UnSubscribe::kTopicFieldNumber;
const int UnSubscribe::kBackEndNameFieldNumber;
#endif  // !_MSC_VER

UnSubscribe::UnSubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodesManager.Protocol.UnSubscribe)
}

void UnSubscribe::InitAsDefaultInstance() {
}

UnSubscribe::UnSubscribe(const UnSubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodesManager.Protocol.UnSubscribe)
}

void UnSubscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnSubscribe::~UnSubscribe() {
  // @@protoc_insertion_point(destructor:NodesManager.Protocol.UnSubscribe)
  SharedDtor();
}

void UnSubscribe::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendname_;
  }
  if (this != default_instance_) {
  }
}

void UnSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnSubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnSubscribe_descriptor_;
}

const UnSubscribe& UnSubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NodeManagerProtocol_2eproto();
  return *default_instance_;
}

UnSubscribe* UnSubscribe::default_instance_ = NULL;

UnSubscribe* UnSubscribe::New() const {
  return new UnSubscribe;
}

void UnSubscribe::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_backendname()) {
      if (backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodesManager.Protocol.UnSubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Pattern = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Topic;
        break;
      }

      // optional string Topic = 2;
      case 2: {
        if (tag == 18) {
         parse_Topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BackEndName;
        break;
      }

      // optional string BackEndName = 3;
      case 3: {
        if (tag == 26) {
         parse_BackEndName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendname().data(), this->backendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodesManager.Protocol.UnSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodesManager.Protocol.UnSubscribe)
  return false;
#undef DO_
}

void UnSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodesManager.Protocol.UnSubscribe)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodesManager.Protocol.UnSubscribe)
}

::google::protobuf::uint8* UnSubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodesManager.Protocol.UnSubscribe)
  // optional string Pattern = 1;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // optional string Topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // optional string BackEndName = 3;
  if (has_backendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendname().data(), this->backendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodesManager.Protocol.UnSubscribe)
  return target;
}

int UnSubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Pattern = 1;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional string Topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // optional string BackEndName = 3;
    if (has_backendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnSubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnSubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnSubscribe::MergeFrom(const UnSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_backendname()) {
      set_backendname(from.backendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnSubscribe::CopyFrom(const UnSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribe::IsInitialized() const {

  return true;
}

void UnSubscribe::Swap(UnSubscribe* other) {
  if (other != this) {
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(backendname_, other->backendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnSubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnSubscribe_descriptor_;
  metadata.reflection = UnSubscribe_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace NodesManager

// @@protoc_insertion_point(global_scope)
