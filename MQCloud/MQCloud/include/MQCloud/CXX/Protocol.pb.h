// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MQCloud.Internal.Protocol.proto

#ifndef PROTOBUF_MQCloud_2eInternal_2eProtocol_2eproto__INCLUDED
#define PROTOBUF_MQCloud_2eInternal_2eProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>

// @@protoc_insertion_point(includes)

namespace MQCloud {
	namespace Internal {
		namespace Protocol {
			// Internal implementation detail -- do not call these.
			void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
			void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
			void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

			class AdvertizeTopic;
			class ConnectRequest;
			class ConnectResponse;
			class Disconnect;
			class GetAllPublishersRequest;
			class GetAllPublishersResponse;
			class GetAllSubscribersRequest;
			class GetAllSubscribersResponse;
			class GetPublisherRequest;
			class GetPublisherResponse;
			class GetSubscriberRequest;
			class GetSubscriberResponse;
			class HeartBeat;
			class IncomingEvent;
			class IncomingOperation;
			class OnConnectionClosed;
			class OnConnectionEstablished;
			class OnNodeAdvertisedTopic;
			class OnNodeRejectedTopic;
			class OnNodeSubscribedToTopic;
			class OnNodeUnavaliable;
			class OnNodeUnsubscribedFromTopic;
			class OutgoingEvent;
			class OutgoingOperation;
			class RejectTopic;
			class ReportNodeUnavaliable;
			class Subscribe;
			class UnSubscribe;

			enum IncomingEventType {
				IncomingEventTypeOnConnectionClosed = 0,
				IncomingEventTypeOnConnectionEstablished = 1,
				IncomingEventTypeOnNodeAdvertisedTopic = 2,
				IncomingEventTypeOnNodeRejectedTopic = 3,
				IncomingEventTypeOnNodeSubscribedToTopic = 4,
				IncomingEventTypeOnNodeUnavaliable = 5,
				IncomingEventTypeOnNodeUnsubscribedFromTopic = 6
			};

			bool IncomingEventType_IsValid(int value);
			const IncomingEventType IncomingEventType_MIN = IncomingEventTypeOnConnectionClosed;
			const IncomingEventType IncomingEventType_MAX = IncomingEventTypeOnNodeUnsubscribedFromTopic;
			const int IncomingEventType_ARRAYSIZE = IncomingEventType_MAX + 1;

			const ::google::protobuf::EnumDescriptor* IncomingEventType_descriptor();

			inline const ::std::string& IncomingEventType_Name(IncomingEventType value) {
				return ::google::protobuf::internal::NameOfEnum(
				                                                IncomingEventType_descriptor(), value);
			}

			inline bool IncomingEventType_Parse(
				const ::std::string& name, IncomingEventType* value) {
				return ::google::protobuf::internal::ParseNamedEnum<IncomingEventType>(
				                                                                       IncomingEventType_descriptor(), name, value);
			}

			enum IncomingOperationType {
				IncomingOperationTypeConnectRequest = 0,
				IncomingOperationTypeGetPublisherRequest = 1,
				IncomingOperationTypeGetAllPublishersRequest = 2,
				IncomingOperationTypeGetSubscriberRequest = 3,
				IncomingOperationTypeGetAllSubscribersRequest = 4
			};

			bool IncomingOperationType_IsValid(int value);
			const IncomingOperationType IncomingOperationType_MIN = IncomingOperationTypeConnectRequest;
			const IncomingOperationType IncomingOperationType_MAX = IncomingOperationTypeGetAllSubscribersRequest;
			const int IncomingOperationType_ARRAYSIZE = IncomingOperationType_MAX + 1;

			const ::google::protobuf::EnumDescriptor* IncomingOperationType_descriptor();

			inline const ::std::string& IncomingOperationType_Name(IncomingOperationType value) {
				return ::google::protobuf::internal::NameOfEnum(
				                                                IncomingOperationType_descriptor(), value);
			}

			inline bool IncomingOperationType_Parse(
				const ::std::string& name, IncomingOperationType* value) {
				return ::google::protobuf::internal::ParseNamedEnum<IncomingOperationType>(
				                                                                           IncomingOperationType_descriptor(), name, value);
			}

			enum OutgoingEventType {
				OutgoingEventTypeAdvertizeTopic = 0,
				OutgoingEventTypeDisconnect = 1,
				OutgoingEventTypeHeartBeat = 2,
				OutgoingEventTypeRejectTopic = 3,
				OutgoingEventTypeReportNodeUnavaliable = 4,
				OutgoingEventTypeSubscribe = 5,
				OutgoingEventTypeUnSubscribe = 6
			};

			bool OutgoingEventType_IsValid(int value);
			const OutgoingEventType OutgoingEventType_MIN = OutgoingEventTypeAdvertizeTopic;
			const OutgoingEventType OutgoingEventType_MAX = OutgoingEventTypeUnSubscribe;
			const int OutgoingEventType_ARRAYSIZE = OutgoingEventType_MAX + 1;

			const ::google::protobuf::EnumDescriptor* OutgoingEventType_descriptor();

			inline const ::std::string& OutgoingEventType_Name(OutgoingEventType value) {
				return ::google::protobuf::internal::NameOfEnum(
				                                                OutgoingEventType_descriptor(), value);
			}

			inline bool OutgoingEventType_Parse(
				const ::std::string& name, OutgoingEventType* value) {
				return ::google::protobuf::internal::ParseNamedEnum<OutgoingEventType>(
				                                                                       OutgoingEventType_descriptor(), name, value);
			}

			enum OutgoingOperationType {
				OutgoingOperationTypeConnectRequest = 0,
				OutgoingOperationTypeGetPublisherRequest = 1,
				OutgoingOperationTypeGetAllPublishersRequest = 2,
				OutgoingOperationTypeGetSubscriberRequest = 3,
				OutgoingOperationTypeGetAllSubscribersRequest = 4
			};

			bool OutgoingOperationType_IsValid(int value);
			const OutgoingOperationType OutgoingOperationType_MIN = OutgoingOperationTypeConnectRequest;
			const OutgoingOperationType OutgoingOperationType_MAX = OutgoingOperationTypeGetAllSubscribersRequest;
			const int OutgoingOperationType_ARRAYSIZE = OutgoingOperationType_MAX + 1;

			const ::google::protobuf::EnumDescriptor* OutgoingOperationType_descriptor();

			inline const ::std::string& OutgoingOperationType_Name(OutgoingOperationType value) {
				return ::google::protobuf::internal::NameOfEnum(
				                                                OutgoingOperationType_descriptor(), value);
			}

			inline bool OutgoingOperationType_Parse(
				const ::std::string& name, OutgoingOperationType* value) {
				return ::google::protobuf::internal::ParseNamedEnum<OutgoingOperationType>(
				                                                                           OutgoingOperationType_descriptor(), name, value);
			}

			// ===================================================================

			class AdvertizeTopic : public ::google::protobuf::Message {
			public:
				AdvertizeTopic();
				virtual ~AdvertizeTopic();

				AdvertizeTopic(const AdvertizeTopic& from);

				inline AdvertizeTopic& operator=(const AdvertizeTopic& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const AdvertizeTopic& default_instance();

				void Swap(AdvertizeTopic* other);

				// implements Message ----------------------------------------------

				AdvertizeTopic* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const AdvertizeTopic& from);
				void MergeFrom(const AdvertizeTopic& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Pattern = 1;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 1;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 2;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 2;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.AdvertizeTopic)
			private:
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static AdvertizeTopic* default_instance_;
			};

			// -------------------------------------------------------------------

			class ConnectRequest : public ::google::protobuf::Message {
			public:
				ConnectRequest();
				virtual ~ConnectRequest();

				ConnectRequest(const ConnectRequest& from);

				inline ConnectRequest& operator=(const ConnectRequest& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const ConnectRequest& default_instance();

				void Swap(ConnectRequest* other);

				// implements Message ----------------------------------------------

				ConnectRequest* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const ConnectRequest& from);
				void MergeFrom(const ConnectRequest& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string NodeName = 1;
				inline bool has_nodename() const;
				inline void clear_nodename();
				static const int kNodeNameFieldNumber = 1;
				inline const ::std::string& nodename() const;
				inline void set_nodename(const ::std::string& value);
				inline void set_nodename(const char* value);
				inline void set_nodename(const char* value, size_t size);
				inline ::std::string* mutable_nodename();
				inline ::std::string* release_nodename();
				inline void set_allocated_nodename(::std::string* nodename);

				// optional string BackEndName = 2;
				inline bool has_backendname() const;
				inline void clear_backendname();
				static const int kBackEndNameFieldNumber = 2;
				inline const ::std::string& backendname() const;
				inline void set_backendname(const ::std::string& value);
				inline void set_backendname(const char* value);
				inline void set_backendname(const char* value, size_t size);
				inline ::std::string* mutable_backendname();
				inline ::std::string* release_backendname();
				inline void set_allocated_backendname(::std::string* backendname);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.ConnectRequest)
			private:
				inline void set_has_nodename();
				inline void clear_has_nodename();
				inline void set_has_backendname();
				inline void clear_has_backendname();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* nodename_;
				::std::string* backendname_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static ConnectRequest* default_instance_;
			};

			// -------------------------------------------------------------------

			class ConnectResponse : public ::google::protobuf::Message {
			public:
				ConnectResponse();
				virtual ~ConnectResponse();

				ConnectResponse(const ConnectResponse& from);

				inline ConnectResponse& operator=(const ConnectResponse& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const ConnectResponse& default_instance();

				void Swap(ConnectResponse* other);

				// implements Message ----------------------------------------------

				ConnectResponse* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const ConnectResponse& from);
				void MergeFrom(const ConnectResponse& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string RealNodeName = 1;
				inline bool has_realnodename() const;
				inline void clear_realnodename();
				static const int kRealNodeNameFieldNumber = 1;
				inline const ::std::string& realnodename() const;
				inline void set_realnodename(const ::std::string& value);
				inline void set_realnodename(const char* value);
				inline void set_realnodename(const char* value, size_t size);
				inline ::std::string* mutable_realnodename();
				inline ::std::string* release_realnodename();
				inline void set_allocated_realnodename(::std::string* realnodename);

				// optional int32 HeartBeatRateMs = 2 [default = 0];
				inline bool has_heartbeatratems() const;
				inline void clear_heartbeatratems();
				static const int kHeartBeatRateMsFieldNumber = 2;
				inline ::google::protobuf::int32 heartbeatratems() const;
				inline void set_heartbeatratems(::google::protobuf::int32 value);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.ConnectResponse)
			private:
				inline void set_has_realnodename();
				inline void clear_has_realnodename();
				inline void set_has_heartbeatratems();
				inline void clear_has_heartbeatratems();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* realnodename_;
				::google::protobuf::int32 heartbeatratems_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static ConnectResponse* default_instance_;
			};

			// -------------------------------------------------------------------

			class Disconnect : public ::google::protobuf::Message {
			public:
				Disconnect();
				virtual ~Disconnect();

				Disconnect(const Disconnect& from);

				inline Disconnect& operator=(const Disconnect& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const Disconnect& default_instance();

				void Swap(Disconnect* other);

				// implements Message ----------------------------------------------

				Disconnect* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const Disconnect& from);
				void MergeFrom(const Disconnect& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.Disconnect)
			private:

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static Disconnect* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetAllPublishersRequest : public ::google::protobuf::Message {
			public:
				GetAllPublishersRequest();
				virtual ~GetAllPublishersRequest();

				GetAllPublishersRequest(const GetAllPublishersRequest& from);

				inline GetAllPublishersRequest& operator=(const GetAllPublishersRequest& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetAllPublishersRequest& default_instance();

				void Swap(GetAllPublishersRequest* other);

				// implements Message ----------------------------------------------

				GetAllPublishersRequest* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetAllPublishersRequest& from);
				void MergeFrom(const GetAllPublishersRequest& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetAllPublishersRequest)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetAllPublishersRequest* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetAllPublishersResponse : public ::google::protobuf::Message {
			public:
				GetAllPublishersResponse();
				virtual ~GetAllPublishersResponse();

				GetAllPublishersResponse(const GetAllPublishersResponse& from);

				inline GetAllPublishersResponse& operator=(const GetAllPublishersResponse& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetAllPublishersResponse& default_instance();

				void Swap(GetAllPublishersResponse* other);

				// implements Message ----------------------------------------------

				GetAllPublishersResponse* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetAllPublishersResponse& from);
				void MergeFrom(const GetAllPublishersResponse& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// repeated string Nodes = 2;
				inline int nodes_size() const;
				inline void clear_nodes();
				static const int kNodesFieldNumber = 2;
				inline const ::std::string& nodes(int index) const;
				inline ::std::string* mutable_nodes(int index);
				inline void set_nodes(int index, const ::std::string& value);
				inline void set_nodes(int index, const char* value);
				inline void set_nodes(int index, const char* value, size_t size);
				inline ::std::string* add_nodes();
				inline void add_nodes(const ::std::string& value);
				inline void add_nodes(const char* value);
				inline void add_nodes(const char* value, size_t size);
				inline const ::google::protobuf::RepeatedPtrField<::std::string>& nodes() const;
				inline ::google::protobuf::RepeatedPtrField<::std::string>* mutable_nodes();

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetAllPublishersResponse)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::google::protobuf::RepeatedPtrField<::std::string> nodes_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetAllPublishersResponse* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetAllSubscribersRequest : public ::google::protobuf::Message {
			public:
				GetAllSubscribersRequest();
				virtual ~GetAllSubscribersRequest();

				GetAllSubscribersRequest(const GetAllSubscribersRequest& from);

				inline GetAllSubscribersRequest& operator=(const GetAllSubscribersRequest& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetAllSubscribersRequest& default_instance();

				void Swap(GetAllSubscribersRequest* other);

				// implements Message ----------------------------------------------

				GetAllSubscribersRequest* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetAllSubscribersRequest& from);
				void MergeFrom(const GetAllSubscribersRequest& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetAllSubscribersRequest)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetAllSubscribersRequest* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetAllSubscribersResponse : public ::google::protobuf::Message {
			public:
				GetAllSubscribersResponse();
				virtual ~GetAllSubscribersResponse();

				GetAllSubscribersResponse(const GetAllSubscribersResponse& from);

				inline GetAllSubscribersResponse& operator=(const GetAllSubscribersResponse& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetAllSubscribersResponse& default_instance();

				void Swap(GetAllSubscribersResponse* other);

				// implements Message ----------------------------------------------

				GetAllSubscribersResponse* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetAllSubscribersResponse& from);
				void MergeFrom(const GetAllSubscribersResponse& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// repeated string Nodes = 2;
				inline int nodes_size() const;
				inline void clear_nodes();
				static const int kNodesFieldNumber = 2;
				inline const ::std::string& nodes(int index) const;
				inline ::std::string* mutable_nodes(int index);
				inline void set_nodes(int index, const ::std::string& value);
				inline void set_nodes(int index, const char* value);
				inline void set_nodes(int index, const char* value, size_t size);
				inline ::std::string* add_nodes();
				inline void add_nodes(const ::std::string& value);
				inline void add_nodes(const char* value);
				inline void add_nodes(const char* value, size_t size);
				inline const ::google::protobuf::RepeatedPtrField<::std::string>& nodes() const;
				inline ::google::protobuf::RepeatedPtrField<::std::string>* mutable_nodes();

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetAllSubscribersResponse)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::google::protobuf::RepeatedPtrField<::std::string> nodes_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetAllSubscribersResponse* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetPublisherRequest : public ::google::protobuf::Message {
			public:
				GetPublisherRequest();
				virtual ~GetPublisherRequest();

				GetPublisherRequest(const GetPublisherRequest& from);

				inline GetPublisherRequest& operator=(const GetPublisherRequest& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetPublisherRequest& default_instance();

				void Swap(GetPublisherRequest* other);

				// implements Message ----------------------------------------------

				GetPublisherRequest* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetPublisherRequest& from);
				void MergeFrom(const GetPublisherRequest& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetPublisherRequest)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetPublisherRequest* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetPublisherResponse : public ::google::protobuf::Message {
			public:
				GetPublisherResponse();
				virtual ~GetPublisherResponse();

				GetPublisherResponse(const GetPublisherResponse& from);

				inline GetPublisherResponse& operator=(const GetPublisherResponse& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetPublisherResponse& default_instance();

				void Swap(GetPublisherResponse* other);

				// implements Message ----------------------------------------------

				GetPublisherResponse* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetPublisherResponse& from);
				void MergeFrom(const GetPublisherResponse& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// optional string Node = 2;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 2;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetPublisherResponse)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();
				inline void set_has_node();
				inline void clear_has_node();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetPublisherResponse* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetSubscriberRequest : public ::google::protobuf::Message {
			public:
				GetSubscriberRequest();
				virtual ~GetSubscriberRequest();

				GetSubscriberRequest(const GetSubscriberRequest& from);

				inline GetSubscriberRequest& operator=(const GetSubscriberRequest& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetSubscriberRequest& default_instance();

				void Swap(GetSubscriberRequest* other);

				// implements Message ----------------------------------------------

				GetSubscriberRequest* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetSubscriberRequest& from);
				void MergeFrom(const GetSubscriberRequest& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetSubscriberRequest)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetSubscriberRequest* default_instance_;
			};

			// -------------------------------------------------------------------

			class GetSubscriberResponse : public ::google::protobuf::Message {
			public:
				GetSubscriberResponse();
				virtual ~GetSubscriberResponse();

				GetSubscriberResponse(const GetSubscriberResponse& from);

				inline GetSubscriberResponse& operator=(const GetSubscriberResponse& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const GetSubscriberResponse& default_instance();

				void Swap(GetSubscriberResponse* other);

				// implements Message ----------------------------------------------

				GetSubscriberResponse* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const GetSubscriberResponse& from);
				void MergeFrom(const GetSubscriberResponse& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional int32 RequestId = 1 [default = 0];
				inline bool has_requestid() const;
				inline void clear_requestid();
				static const int kRequestIdFieldNumber = 1;
				inline ::google::protobuf::int32 requestid() const;
				inline void set_requestid(::google::protobuf::int32 value);

				// optional string Node = 2;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 2;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.GetSubscriberResponse)
			private:
				inline void set_has_requestid();
				inline void clear_has_requestid();
				inline void set_has_node();
				inline void clear_has_node();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::google::protobuf::int32 requestid_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static GetSubscriberResponse* default_instance_;
			};

			// -------------------------------------------------------------------

			class HeartBeat : public ::google::protobuf::Message {
			public:
				HeartBeat();
				virtual ~HeartBeat();

				HeartBeat(const HeartBeat& from);

				inline HeartBeat& operator=(const HeartBeat& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const HeartBeat& default_instance();

				void Swap(HeartBeat* other);

				// implements Message ----------------------------------------------

				HeartBeat* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const HeartBeat& from);
				void MergeFrom(const HeartBeat& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.HeartBeat)
			private:

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static HeartBeat* default_instance_;
			};

			// -------------------------------------------------------------------

			class IncomingEvent : public ::google::protobuf::Message {
			public:
				IncomingEvent();
				virtual ~IncomingEvent();

				IncomingEvent(const IncomingEvent& from);

				inline IncomingEvent& operator=(const IncomingEvent& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const IncomingEvent& default_instance();

				void Swap(IncomingEvent* other);

				// implements Message ----------------------------------------------

				IncomingEvent* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const IncomingEvent& from);
				void MergeFrom(const IncomingEvent& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional .MQCloud.Internal.Protocol.IncomingEventType TypeCode = 1 [default = IncomingEventTypeOnConnectionClosed];
				inline bool has_typecode() const;
				inline void clear_typecode();
				static const int kTypeCodeFieldNumber = 1;
				inline ::MQCloud::Internal::Protocol::IncomingEventType typecode() const;
				inline void set_typecode(::MQCloud::Internal::Protocol::IncomingEventType value);

				// optional .MQCloud.Internal.Protocol.OnConnectionClosed OnConnectionClosed = 2;
				inline bool has_onconnectionclosed() const;
				inline void clear_onconnectionclosed();
				static const int kOnConnectionClosedFieldNumber = 2;
				inline const ::MQCloud::Internal::Protocol::OnConnectionClosed& onconnectionclosed() const;
				inline ::MQCloud::Internal::Protocol::OnConnectionClosed* mutable_onconnectionclosed();
				inline ::MQCloud::Internal::Protocol::OnConnectionClosed* release_onconnectionclosed();
				inline void set_allocated_onconnectionclosed(::MQCloud::Internal::Protocol::OnConnectionClosed* onconnectionclosed);

				// optional .MQCloud.Internal.Protocol.OnConnectionEstablished OnConnectionEstablished = 3;
				inline bool has_onconnectionestablished() const;
				inline void clear_onconnectionestablished();
				static const int kOnConnectionEstablishedFieldNumber = 3;
				inline const ::MQCloud::Internal::Protocol::OnConnectionEstablished& onconnectionestablished() const;
				inline ::MQCloud::Internal::Protocol::OnConnectionEstablished* mutable_onconnectionestablished();
				inline ::MQCloud::Internal::Protocol::OnConnectionEstablished* release_onconnectionestablished();
				inline void set_allocated_onconnectionestablished(::MQCloud::Internal::Protocol::OnConnectionEstablished* onconnectionestablished);

				// optional .MQCloud.Internal.Protocol.OnNodeAdvertisedTopic OnNodeAdvertisedTopic = 4;
				inline bool has_onnodeadvertisedtopic() const;
				inline void clear_onnodeadvertisedtopic();
				static const int kOnNodeAdvertisedTopicFieldNumber = 4;
				inline const ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic& onnodeadvertisedtopic() const;
				inline ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* mutable_onnodeadvertisedtopic();
				inline ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* release_onnodeadvertisedtopic();
				inline void set_allocated_onnodeadvertisedtopic(::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* onnodeadvertisedtopic);

				// optional .MQCloud.Internal.Protocol.OnNodeRejectedTopic OnNodeRejectedTopic = 5;
				inline bool has_onnoderejectedtopic() const;
				inline void clear_onnoderejectedtopic();
				static const int kOnNodeRejectedTopicFieldNumber = 5;
				inline const ::MQCloud::Internal::Protocol::OnNodeRejectedTopic& onnoderejectedtopic() const;
				inline ::MQCloud::Internal::Protocol::OnNodeRejectedTopic* mutable_onnoderejectedtopic();
				inline ::MQCloud::Internal::Protocol::OnNodeRejectedTopic* release_onnoderejectedtopic();
				inline void set_allocated_onnoderejectedtopic(::MQCloud::Internal::Protocol::OnNodeRejectedTopic* onnoderejectedtopic);

				// optional .MQCloud.Internal.Protocol.OnNodeSubscribedToTopic OnNodeSubscribedToTopic = 6;
				inline bool has_onnodesubscribedtotopic() const;
				inline void clear_onnodesubscribedtotopic();
				static const int kOnNodeSubscribedToTopicFieldNumber = 6;
				inline const ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic& onnodesubscribedtotopic() const;
				inline ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* mutable_onnodesubscribedtotopic();
				inline ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* release_onnodesubscribedtotopic();
				inline void set_allocated_onnodesubscribedtotopic(::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* onnodesubscribedtotopic);

				// optional .MQCloud.Internal.Protocol.OnNodeUnavaliable OnNodeUnavaliable = 7;
				inline bool has_onnodeunavaliable() const;
				inline void clear_onnodeunavaliable();
				static const int kOnNodeUnavaliableFieldNumber = 7;
				inline const ::MQCloud::Internal::Protocol::OnNodeUnavaliable& onnodeunavaliable() const;
				inline ::MQCloud::Internal::Protocol::OnNodeUnavaliable* mutable_onnodeunavaliable();
				inline ::MQCloud::Internal::Protocol::OnNodeUnavaliable* release_onnodeunavaliable();
				inline void set_allocated_onnodeunavaliable(::MQCloud::Internal::Protocol::OnNodeUnavaliable* onnodeunavaliable);

				// optional .MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic OnNodeUnsubscribedFromTopic = 8;
				inline bool has_onnodeunsubscribedfromtopic() const;
				inline void clear_onnodeunsubscribedfromtopic();
				static const int kOnNodeUnsubscribedFromTopicFieldNumber = 8;
				inline const ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic& onnodeunsubscribedfromtopic() const;
				inline ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* mutable_onnodeunsubscribedfromtopic();
				inline ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* release_onnodeunsubscribedfromtopic();
				inline void set_allocated_onnodeunsubscribedfromtopic(::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* onnodeunsubscribedfromtopic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.IncomingEvent)
			private:
				inline void set_has_typecode();
				inline void clear_has_typecode();
				inline void set_has_onconnectionclosed();
				inline void clear_has_onconnectionclosed();
				inline void set_has_onconnectionestablished();
				inline void clear_has_onconnectionestablished();
				inline void set_has_onnodeadvertisedtopic();
				inline void clear_has_onnodeadvertisedtopic();
				inline void set_has_onnoderejectedtopic();
				inline void clear_has_onnoderejectedtopic();
				inline void set_has_onnodesubscribedtotopic();
				inline void clear_has_onnodesubscribedtotopic();
				inline void set_has_onnodeunavaliable();
				inline void clear_has_onnodeunavaliable();
				inline void set_has_onnodeunsubscribedfromtopic();
				inline void clear_has_onnodeunsubscribedfromtopic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::MQCloud::Internal::Protocol::OnConnectionClosed* onconnectionclosed_;
				::MQCloud::Internal::Protocol::OnConnectionEstablished* onconnectionestablished_;
				::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* onnodeadvertisedtopic_;
				::MQCloud::Internal::Protocol::OnNodeRejectedTopic* onnoderejectedtopic_;
				::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* onnodesubscribedtotopic_;
				::MQCloud::Internal::Protocol::OnNodeUnavaliable* onnodeunavaliable_;
				::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* onnodeunsubscribedfromtopic_;
				int typecode_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static IncomingEvent* default_instance_;
			};

			// -------------------------------------------------------------------

			class IncomingOperation : public ::google::protobuf::Message {
			public:
				IncomingOperation();
				virtual ~IncomingOperation();

				IncomingOperation(const IncomingOperation& from);

				inline IncomingOperation& operator=(const IncomingOperation& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const IncomingOperation& default_instance();

				void Swap(IncomingOperation* other);

				// implements Message ----------------------------------------------

				IncomingOperation* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const IncomingOperation& from);
				void MergeFrom(const IncomingOperation& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional .MQCloud.Internal.Protocol.IncomingOperationType TypeCode = 1 [default = IncomingOperationTypeConnectRequest];
				inline bool has_typecode() const;
				inline void clear_typecode();
				static const int kTypeCodeFieldNumber = 1;
				inline ::MQCloud::Internal::Protocol::IncomingOperationType typecode() const;
				inline void set_typecode(::MQCloud::Internal::Protocol::IncomingOperationType value);

				// optional .MQCloud.Internal.Protocol.ConnectResponse ConnectResponse = 2;
				inline bool has_connectresponse() const;
				inline void clear_connectresponse();
				static const int kConnectResponseFieldNumber = 2;
				inline const ::MQCloud::Internal::Protocol::ConnectResponse& connectresponse() const;
				inline ::MQCloud::Internal::Protocol::ConnectResponse* mutable_connectresponse();
				inline ::MQCloud::Internal::Protocol::ConnectResponse* release_connectresponse();
				inline void set_allocated_connectresponse(::MQCloud::Internal::Protocol::ConnectResponse* connectresponse);

				// optional .MQCloud.Internal.Protocol.GetPublisherResponse GetPublisherResponse = 3;
				inline bool has_getpublisherresponse() const;
				inline void clear_getpublisherresponse();
				static const int kGetPublisherResponseFieldNumber = 3;
				inline const ::MQCloud::Internal::Protocol::GetPublisherResponse& getpublisherresponse() const;
				inline ::MQCloud::Internal::Protocol::GetPublisherResponse* mutable_getpublisherresponse();
				inline ::MQCloud::Internal::Protocol::GetPublisherResponse* release_getpublisherresponse();
				inline void set_allocated_getpublisherresponse(::MQCloud::Internal::Protocol::GetPublisherResponse* getpublisherresponse);

				// optional .MQCloud.Internal.Protocol.GetAllPublishersResponse GetAllPublishersResponse = 4;
				inline bool has_getallpublishersresponse() const;
				inline void clear_getallpublishersresponse();
				static const int kGetAllPublishersResponseFieldNumber = 4;
				inline const ::MQCloud::Internal::Protocol::GetAllPublishersResponse& getallpublishersresponse() const;
				inline ::MQCloud::Internal::Protocol::GetAllPublishersResponse* mutable_getallpublishersresponse();
				inline ::MQCloud::Internal::Protocol::GetAllPublishersResponse* release_getallpublishersresponse();
				inline void set_allocated_getallpublishersresponse(::MQCloud::Internal::Protocol::GetAllPublishersResponse* getallpublishersresponse);

				// optional .MQCloud.Internal.Protocol.GetSubscriberResponse GetSubscriberResponse = 5;
				inline bool has_getsubscriberresponse() const;
				inline void clear_getsubscriberresponse();
				static const int kGetSubscriberResponseFieldNumber = 5;
				inline const ::MQCloud::Internal::Protocol::GetSubscriberResponse& getsubscriberresponse() const;
				inline ::MQCloud::Internal::Protocol::GetSubscriberResponse* mutable_getsubscriberresponse();
				inline ::MQCloud::Internal::Protocol::GetSubscriberResponse* release_getsubscriberresponse();
				inline void set_allocated_getsubscriberresponse(::MQCloud::Internal::Protocol::GetSubscriberResponse* getsubscriberresponse);

				// optional .MQCloud.Internal.Protocol.GetAllSubscribersResponse GetAllSubscribersResponse = 6;
				inline bool has_getallsubscribersresponse() const;
				inline void clear_getallsubscribersresponse();
				static const int kGetAllSubscribersResponseFieldNumber = 6;
				inline const ::MQCloud::Internal::Protocol::GetAllSubscribersResponse& getallsubscribersresponse() const;
				inline ::MQCloud::Internal::Protocol::GetAllSubscribersResponse* mutable_getallsubscribersresponse();
				inline ::MQCloud::Internal::Protocol::GetAllSubscribersResponse* release_getallsubscribersresponse();
				inline void set_allocated_getallsubscribersresponse(::MQCloud::Internal::Protocol::GetAllSubscribersResponse* getallsubscribersresponse);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.IncomingOperation)
			private:
				inline void set_has_typecode();
				inline void clear_has_typecode();
				inline void set_has_connectresponse();
				inline void clear_has_connectresponse();
				inline void set_has_getpublisherresponse();
				inline void clear_has_getpublisherresponse();
				inline void set_has_getallpublishersresponse();
				inline void clear_has_getallpublishersresponse();
				inline void set_has_getsubscriberresponse();
				inline void clear_has_getsubscriberresponse();
				inline void set_has_getallsubscribersresponse();
				inline void clear_has_getallsubscribersresponse();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::MQCloud::Internal::Protocol::ConnectResponse* connectresponse_;
				::MQCloud::Internal::Protocol::GetPublisherResponse* getpublisherresponse_;
				::MQCloud::Internal::Protocol::GetAllPublishersResponse* getallpublishersresponse_;
				::MQCloud::Internal::Protocol::GetSubscriberResponse* getsubscriberresponse_;
				::MQCloud::Internal::Protocol::GetAllSubscribersResponse* getallsubscribersresponse_;
				int typecode_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static IncomingOperation* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnConnectionClosed : public ::google::protobuf::Message {
			public:
				OnConnectionClosed();
				virtual ~OnConnectionClosed();

				OnConnectionClosed(const OnConnectionClosed& from);

				inline OnConnectionClosed& operator=(const OnConnectionClosed& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnConnectionClosed& default_instance();

				void Swap(OnConnectionClosed* other);

				// implements Message ----------------------------------------------

				OnConnectionClosed* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnConnectionClosed& from);
				void MergeFrom(const OnConnectionClosed& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string FromNode = 1;
				inline bool has_fromnode() const;
				inline void clear_fromnode();
				static const int kFromNodeFieldNumber = 1;
				inline const ::std::string& fromnode() const;
				inline void set_fromnode(const ::std::string& value);
				inline void set_fromnode(const char* value);
				inline void set_fromnode(const char* value, size_t size);
				inline ::std::string* mutable_fromnode();
				inline ::std::string* release_fromnode();
				inline void set_allocated_fromnode(::std::string* fromnode);

				// optional string ToNode = 2;
				inline bool has_tonode() const;
				inline void clear_tonode();
				static const int kToNodeFieldNumber = 2;
				inline const ::std::string& tonode() const;
				inline void set_tonode(const ::std::string& value);
				inline void set_tonode(const char* value);
				inline void set_tonode(const char* value, size_t size);
				inline ::std::string* mutable_tonode();
				inline ::std::string* release_tonode();
				inline void set_allocated_tonode(::std::string* tonode);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnConnectionClosed)
			private:
				inline void set_has_fromnode();
				inline void clear_has_fromnode();
				inline void set_has_tonode();
				inline void clear_has_tonode();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* fromnode_;
				::std::string* tonode_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnConnectionClosed* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnConnectionEstablished : public ::google::protobuf::Message {
			public:
				OnConnectionEstablished();
				virtual ~OnConnectionEstablished();

				OnConnectionEstablished(const OnConnectionEstablished& from);

				inline OnConnectionEstablished& operator=(const OnConnectionEstablished& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnConnectionEstablished& default_instance();

				void Swap(OnConnectionEstablished* other);

				// implements Message ----------------------------------------------

				OnConnectionEstablished* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnConnectionEstablished& from);
				void MergeFrom(const OnConnectionEstablished& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string FromNode = 1;
				inline bool has_fromnode() const;
				inline void clear_fromnode();
				static const int kFromNodeFieldNumber = 1;
				inline const ::std::string& fromnode() const;
				inline void set_fromnode(const ::std::string& value);
				inline void set_fromnode(const char* value);
				inline void set_fromnode(const char* value, size_t size);
				inline ::std::string* mutable_fromnode();
				inline ::std::string* release_fromnode();
				inline void set_allocated_fromnode(::std::string* fromnode);

				// optional string ToNode = 2;
				inline bool has_tonode() const;
				inline void clear_tonode();
				static const int kToNodeFieldNumber = 2;
				inline const ::std::string& tonode() const;
				inline void set_tonode(const ::std::string& value);
				inline void set_tonode(const char* value);
				inline void set_tonode(const char* value, size_t size);
				inline ::std::string* mutable_tonode();
				inline ::std::string* release_tonode();
				inline void set_allocated_tonode(::std::string* tonode);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnConnectionEstablished)
			private:
				inline void set_has_fromnode();
				inline void clear_has_fromnode();
				inline void set_has_tonode();
				inline void clear_has_tonode();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* fromnode_;
				::std::string* tonode_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnConnectionEstablished* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnNodeAdvertisedTopic : public ::google::protobuf::Message {
			public:
				OnNodeAdvertisedTopic();
				virtual ~OnNodeAdvertisedTopic();

				OnNodeAdvertisedTopic(const OnNodeAdvertisedTopic& from);

				inline OnNodeAdvertisedTopic& operator=(const OnNodeAdvertisedTopic& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnNodeAdvertisedTopic& default_instance();

				void Swap(OnNodeAdvertisedTopic* other);

				// implements Message ----------------------------------------------

				OnNodeAdvertisedTopic* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnNodeAdvertisedTopic& from);
				void MergeFrom(const OnNodeAdvertisedTopic& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Node = 1;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 1;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic)
			private:
				inline void set_has_node();
				inline void clear_has_node();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnNodeAdvertisedTopic* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnNodeRejectedTopic : public ::google::protobuf::Message {
			public:
				OnNodeRejectedTopic();
				virtual ~OnNodeRejectedTopic();

				OnNodeRejectedTopic(const OnNodeRejectedTopic& from);

				inline OnNodeRejectedTopic& operator=(const OnNodeRejectedTopic& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnNodeRejectedTopic& default_instance();

				void Swap(OnNodeRejectedTopic* other);

				// implements Message ----------------------------------------------

				OnNodeRejectedTopic* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnNodeRejectedTopic& from);
				void MergeFrom(const OnNodeRejectedTopic& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Node = 1;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 1;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnNodeRejectedTopic)
			private:
				inline void set_has_node();
				inline void clear_has_node();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnNodeRejectedTopic* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnNodeSubscribedToTopic : public ::google::protobuf::Message {
			public:
				OnNodeSubscribedToTopic();
				virtual ~OnNodeSubscribedToTopic();

				OnNodeSubscribedToTopic(const OnNodeSubscribedToTopic& from);

				inline OnNodeSubscribedToTopic& operator=(const OnNodeSubscribedToTopic& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnNodeSubscribedToTopic& default_instance();

				void Swap(OnNodeSubscribedToTopic* other);

				// implements Message ----------------------------------------------

				OnNodeSubscribedToTopic* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnNodeSubscribedToTopic& from);
				void MergeFrom(const OnNodeSubscribedToTopic& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Node = 1;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 1;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic)
			private:
				inline void set_has_node();
				inline void clear_has_node();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnNodeSubscribedToTopic* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnNodeUnavaliable : public ::google::protobuf::Message {
			public:
				OnNodeUnavaliable();
				virtual ~OnNodeUnavaliable();

				OnNodeUnavaliable(const OnNodeUnavaliable& from);

				inline OnNodeUnavaliable& operator=(const OnNodeUnavaliable& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnNodeUnavaliable& default_instance();

				void Swap(OnNodeUnavaliable* other);

				// implements Message ----------------------------------------------

				OnNodeUnavaliable* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnNodeUnavaliable& from);
				void MergeFrom(const OnNodeUnavaliable& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Node = 1;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 1;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnNodeUnavaliable)
			private:
				inline void set_has_node();
				inline void clear_has_node();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnNodeUnavaliable* default_instance_;
			};

			// -------------------------------------------------------------------

			class OnNodeUnsubscribedFromTopic : public ::google::protobuf::Message {
			public:
				OnNodeUnsubscribedFromTopic();
				virtual ~OnNodeUnsubscribedFromTopic();

				OnNodeUnsubscribedFromTopic(const OnNodeUnsubscribedFromTopic& from);

				inline OnNodeUnsubscribedFromTopic& operator=(const OnNodeUnsubscribedFromTopic& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OnNodeUnsubscribedFromTopic& default_instance();

				void Swap(OnNodeUnsubscribedFromTopic* other);

				// implements Message ----------------------------------------------

				OnNodeUnsubscribedFromTopic* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OnNodeUnsubscribedFromTopic& from);
				void MergeFrom(const OnNodeUnsubscribedFromTopic& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Node = 1;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 1;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic)
			private:
				inline void set_has_node();
				inline void clear_has_node();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OnNodeUnsubscribedFromTopic* default_instance_;
			};

			// -------------------------------------------------------------------

			class OutgoingEvent : public ::google::protobuf::Message {
			public:
				OutgoingEvent();
				virtual ~OutgoingEvent();

				OutgoingEvent(const OutgoingEvent& from);

				inline OutgoingEvent& operator=(const OutgoingEvent& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OutgoingEvent& default_instance();

				void Swap(OutgoingEvent* other);

				// implements Message ----------------------------------------------

				OutgoingEvent* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OutgoingEvent& from);
				void MergeFrom(const OutgoingEvent& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional .MQCloud.Internal.Protocol.OutgoingEventType TypeCode = 1 [default = OutgoingEventTypeAdvertizeTopic];
				inline bool has_typecode() const;
				inline void clear_typecode();
				static const int kTypeCodeFieldNumber = 1;
				inline ::MQCloud::Internal::Protocol::OutgoingEventType typecode() const;
				inline void set_typecode(::MQCloud::Internal::Protocol::OutgoingEventType value);

				// optional .MQCloud.Internal.Protocol.AdvertizeTopic AdvertizeTopic = 2;
				inline bool has_advertizetopic() const;
				inline void clear_advertizetopic();
				static const int kAdvertizeTopicFieldNumber = 2;
				inline const ::MQCloud::Internal::Protocol::AdvertizeTopic& advertizetopic() const;
				inline ::MQCloud::Internal::Protocol::AdvertizeTopic* mutable_advertizetopic();
				inline ::MQCloud::Internal::Protocol::AdvertizeTopic* release_advertizetopic();
				inline void set_allocated_advertizetopic(::MQCloud::Internal::Protocol::AdvertizeTopic* advertizetopic);

				// optional .MQCloud.Internal.Protocol.Disconnect Disconnect = 3;
				inline bool has_disconnect() const;
				inline void clear_disconnect();
				static const int kDisconnectFieldNumber = 3;
				inline const ::MQCloud::Internal::Protocol::Disconnect& disconnect() const;
				inline ::MQCloud::Internal::Protocol::Disconnect* mutable_disconnect();
				inline ::MQCloud::Internal::Protocol::Disconnect* release_disconnect();
				inline void set_allocated_disconnect(::MQCloud::Internal::Protocol::Disconnect* disconnect);

				// optional .MQCloud.Internal.Protocol.RejectTopic RejectTopic = 4;
				inline bool has_rejecttopic() const;
				inline void clear_rejecttopic();
				static const int kRejectTopicFieldNumber = 4;
				inline const ::MQCloud::Internal::Protocol::RejectTopic& rejecttopic() const;
				inline ::MQCloud::Internal::Protocol::RejectTopic* mutable_rejecttopic();
				inline ::MQCloud::Internal::Protocol::RejectTopic* release_rejecttopic();
				inline void set_allocated_rejecttopic(::MQCloud::Internal::Protocol::RejectTopic* rejecttopic);

				// optional .MQCloud.Internal.Protocol.ReportNodeUnavaliable ReportNodeUnavaliable = 5;
				inline bool has_reportnodeunavaliable() const;
				inline void clear_reportnodeunavaliable();
				static const int kReportNodeUnavaliableFieldNumber = 5;
				inline const ::MQCloud::Internal::Protocol::ReportNodeUnavaliable& reportnodeunavaliable() const;
				inline ::MQCloud::Internal::Protocol::ReportNodeUnavaliable* mutable_reportnodeunavaliable();
				inline ::MQCloud::Internal::Protocol::ReportNodeUnavaliable* release_reportnodeunavaliable();
				inline void set_allocated_reportnodeunavaliable(::MQCloud::Internal::Protocol::ReportNodeUnavaliable* reportnodeunavaliable);

				// optional .MQCloud.Internal.Protocol.Subscribe Subscribe = 6;
				inline bool has_subscribe() const;
				inline void clear_subscribe();
				static const int kSubscribeFieldNumber = 6;
				inline const ::MQCloud::Internal::Protocol::Subscribe& subscribe() const;
				inline ::MQCloud::Internal::Protocol::Subscribe* mutable_subscribe();
				inline ::MQCloud::Internal::Protocol::Subscribe* release_subscribe();
				inline void set_allocated_subscribe(::MQCloud::Internal::Protocol::Subscribe* subscribe);

				// optional .MQCloud.Internal.Protocol.UnSubscribe UnSubscribe = 7;
				inline bool has_unsubscribe() const;
				inline void clear_unsubscribe();
				static const int kUnSubscribeFieldNumber = 7;
				inline const ::MQCloud::Internal::Protocol::UnSubscribe& unsubscribe() const;
				inline ::MQCloud::Internal::Protocol::UnSubscribe* mutable_unsubscribe();
				inline ::MQCloud::Internal::Protocol::UnSubscribe* release_unsubscribe();
				inline void set_allocated_unsubscribe(::MQCloud::Internal::Protocol::UnSubscribe* unsubscribe);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OutgoingEvent)
			private:
				inline void set_has_typecode();
				inline void clear_has_typecode();
				inline void set_has_advertizetopic();
				inline void clear_has_advertizetopic();
				inline void set_has_disconnect();
				inline void clear_has_disconnect();
				inline void set_has_rejecttopic();
				inline void clear_has_rejecttopic();
				inline void set_has_reportnodeunavaliable();
				inline void clear_has_reportnodeunavaliable();
				inline void set_has_subscribe();
				inline void clear_has_subscribe();
				inline void set_has_unsubscribe();
				inline void clear_has_unsubscribe();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::MQCloud::Internal::Protocol::AdvertizeTopic* advertizetopic_;
				::MQCloud::Internal::Protocol::Disconnect* disconnect_;
				::MQCloud::Internal::Protocol::RejectTopic* rejecttopic_;
				::MQCloud::Internal::Protocol::ReportNodeUnavaliable* reportnodeunavaliable_;
				::MQCloud::Internal::Protocol::Subscribe* subscribe_;
				::MQCloud::Internal::Protocol::UnSubscribe* unsubscribe_;
				int typecode_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OutgoingEvent* default_instance_;
			};

			// -------------------------------------------------------------------

			class OutgoingOperation : public ::google::protobuf::Message {
			public:
				OutgoingOperation();
				virtual ~OutgoingOperation();

				OutgoingOperation(const OutgoingOperation& from);

				inline OutgoingOperation& operator=(const OutgoingOperation& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const OutgoingOperation& default_instance();

				void Swap(OutgoingOperation* other);

				// implements Message ----------------------------------------------

				OutgoingOperation* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const OutgoingOperation& from);
				void MergeFrom(const OutgoingOperation& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional .MQCloud.Internal.Protocol.OutgoingOperationType TypeCode = 1 [default = OutgoingOperationTypeConnectRequest];
				inline bool has_typecode() const;
				inline void clear_typecode();
				static const int kTypeCodeFieldNumber = 1;
				inline ::MQCloud::Internal::Protocol::OutgoingOperationType typecode() const;
				inline void set_typecode(::MQCloud::Internal::Protocol::OutgoingOperationType value);

				// optional .MQCloud.Internal.Protocol.ConnectRequest ConnectRequest = 2;
				inline bool has_connectrequest() const;
				inline void clear_connectrequest();
				static const int kConnectRequestFieldNumber = 2;
				inline const ::MQCloud::Internal::Protocol::ConnectRequest& connectrequest() const;
				inline ::MQCloud::Internal::Protocol::ConnectRequest* mutable_connectrequest();
				inline ::MQCloud::Internal::Protocol::ConnectRequest* release_connectrequest();
				inline void set_allocated_connectrequest(::MQCloud::Internal::Protocol::ConnectRequest* connectrequest);

				// optional .MQCloud.Internal.Protocol.GetPublisherRequest GetPublisherRequest = 3;
				inline bool has_getpublisherrequest() const;
				inline void clear_getpublisherrequest();
				static const int kGetPublisherRequestFieldNumber = 3;
				inline const ::MQCloud::Internal::Protocol::GetPublisherRequest& getpublisherrequest() const;
				inline ::MQCloud::Internal::Protocol::GetPublisherRequest* mutable_getpublisherrequest();
				inline ::MQCloud::Internal::Protocol::GetPublisherRequest* release_getpublisherrequest();
				inline void set_allocated_getpublisherrequest(::MQCloud::Internal::Protocol::GetPublisherRequest* getpublisherrequest);

				// optional .MQCloud.Internal.Protocol.GetAllPublishersRequest GetAllPublishersRequest = 4;
				inline bool has_getallpublishersrequest() const;
				inline void clear_getallpublishersrequest();
				static const int kGetAllPublishersRequestFieldNumber = 4;
				inline const ::MQCloud::Internal::Protocol::GetAllPublishersRequest& getallpublishersrequest() const;
				inline ::MQCloud::Internal::Protocol::GetAllPublishersRequest* mutable_getallpublishersrequest();
				inline ::MQCloud::Internal::Protocol::GetAllPublishersRequest* release_getallpublishersrequest();
				inline void set_allocated_getallpublishersrequest(::MQCloud::Internal::Protocol::GetAllPublishersRequest* getallpublishersrequest);

				// optional .MQCloud.Internal.Protocol.GetSubscriberRequest GetSubscriberRequest = 5;
				inline bool has_getsubscriberrequest() const;
				inline void clear_getsubscriberrequest();
				static const int kGetSubscriberRequestFieldNumber = 5;
				inline const ::MQCloud::Internal::Protocol::GetSubscriberRequest& getsubscriberrequest() const;
				inline ::MQCloud::Internal::Protocol::GetSubscriberRequest* mutable_getsubscriberrequest();
				inline ::MQCloud::Internal::Protocol::GetSubscriberRequest* release_getsubscriberrequest();
				inline void set_allocated_getsubscriberrequest(::MQCloud::Internal::Protocol::GetSubscriberRequest* getsubscriberrequest);

				// optional .MQCloud.Internal.Protocol.GetAllSubscribersRequest GetAllSubscribersRequest = 6;
				inline bool has_getallsubscribersrequest() const;
				inline void clear_getallsubscribersrequest();
				static const int kGetAllSubscribersRequestFieldNumber = 6;
				inline const ::MQCloud::Internal::Protocol::GetAllSubscribersRequest& getallsubscribersrequest() const;
				inline ::MQCloud::Internal::Protocol::GetAllSubscribersRequest* mutable_getallsubscribersrequest();
				inline ::MQCloud::Internal::Protocol::GetAllSubscribersRequest* release_getallsubscribersrequest();
				inline void set_allocated_getallsubscribersrequest(::MQCloud::Internal::Protocol::GetAllSubscribersRequest* getallsubscribersrequest);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.OutgoingOperation)
			private:
				inline void set_has_typecode();
				inline void clear_has_typecode();
				inline void set_has_connectrequest();
				inline void clear_has_connectrequest();
				inline void set_has_getpublisherrequest();
				inline void clear_has_getpublisherrequest();
				inline void set_has_getallpublishersrequest();
				inline void clear_has_getallpublishersrequest();
				inline void set_has_getsubscriberrequest();
				inline void clear_has_getsubscriberrequest();
				inline void set_has_getallsubscribersrequest();
				inline void clear_has_getallsubscribersrequest();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::MQCloud::Internal::Protocol::ConnectRequest* connectrequest_;
				::MQCloud::Internal::Protocol::GetPublisherRequest* getpublisherrequest_;
				::MQCloud::Internal::Protocol::GetAllPublishersRequest* getallpublishersrequest_;
				::MQCloud::Internal::Protocol::GetSubscriberRequest* getsubscriberrequest_;
				::MQCloud::Internal::Protocol::GetAllSubscribersRequest* getallsubscribersrequest_;
				int typecode_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static OutgoingOperation* default_instance_;
			};

			// -------------------------------------------------------------------

			class RejectTopic : public ::google::protobuf::Message {
			public:
				RejectTopic();
				virtual ~RejectTopic();

				RejectTopic(const RejectTopic& from);

				inline RejectTopic& operator=(const RejectTopic& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const RejectTopic& default_instance();

				void Swap(RejectTopic* other);

				// implements Message ----------------------------------------------

				RejectTopic* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const RejectTopic& from);
				void MergeFrom(const RejectTopic& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Pattern = 1;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 1;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 2;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 2;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.RejectTopic)
			private:
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static RejectTopic* default_instance_;
			};

			// -------------------------------------------------------------------

			class ReportNodeUnavaliable : public ::google::protobuf::Message {
			public:
				ReportNodeUnavaliable();
				virtual ~ReportNodeUnavaliable();

				ReportNodeUnavaliable(const ReportNodeUnavaliable& from);

				inline ReportNodeUnavaliable& operator=(const ReportNodeUnavaliable& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const ReportNodeUnavaliable& default_instance();

				void Swap(ReportNodeUnavaliable* other);

				// implements Message ----------------------------------------------

				ReportNodeUnavaliable* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const ReportNodeUnavaliable& from);
				void MergeFrom(const ReportNodeUnavaliable& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Node = 1;
				inline bool has_node() const;
				inline void clear_node();
				static const int kNodeFieldNumber = 1;
				inline const ::std::string& node() const;
				inline void set_node(const ::std::string& value);
				inline void set_node(const char* value);
				inline void set_node(const char* value, size_t size);
				inline ::std::string* mutable_node();
				inline ::std::string* release_node();
				inline void set_allocated_node(::std::string* node);

				// optional string Pattern = 2;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 2;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 3;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 3;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.ReportNodeUnavaliable)
			private:
				inline void set_has_node();
				inline void clear_has_node();
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* node_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static ReportNodeUnavaliable* default_instance_;
			};

			// -------------------------------------------------------------------

			class Subscribe : public ::google::protobuf::Message {
			public:
				Subscribe();
				virtual ~Subscribe();

				Subscribe(const Subscribe& from);

				inline Subscribe& operator=(const Subscribe& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const Subscribe& default_instance();

				void Swap(Subscribe* other);

				// implements Message ----------------------------------------------

				Subscribe* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const Subscribe& from);
				void MergeFrom(const Subscribe& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Pattern = 1;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 1;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 2;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 2;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.Subscribe)
			private:
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static Subscribe* default_instance_;
			};

			// -------------------------------------------------------------------

			class UnSubscribe : public ::google::protobuf::Message {
			public:
				UnSubscribe();
				virtual ~UnSubscribe();

				UnSubscribe(const UnSubscribe& from);

				inline UnSubscribe& operator=(const UnSubscribe& from) {
					CopyFrom(from);
					return *this;
				}

				inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
					return _unknown_fields_;
				}

				inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
					return &_unknown_fields_;
				}

				static const ::google::protobuf::Descriptor* descriptor();
				static const UnSubscribe& default_instance();

				void Swap(UnSubscribe* other);

				// implements Message ----------------------------------------------

				UnSubscribe* New() const;
				void CopyFrom(const ::google::protobuf::Message& from);
				void MergeFrom(const ::google::protobuf::Message& from);
				void CopyFrom(const UnSubscribe& from);
				void MergeFrom(const UnSubscribe& from);
				void Clear();
				bool IsInitialized() const;

				int ByteSize() const;
				bool MergePartialFromCodedStream(
					::google::protobuf::io::CodedInputStream* input);
				void SerializeWithCachedSizes(
					::google::protobuf::io::CodedOutputStream* output) const;
				::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;

				int GetCachedSize() const {
					return _cached_size_;
				}

			private:
				void SharedCtor();
				void SharedDtor();
				void SetCachedSize(int size) const;
			public:
				::google::protobuf::Metadata GetMetadata() const;

				// nested types ----------------------------------------------------

				// accessors -------------------------------------------------------

				// optional string Pattern = 1;
				inline bool has_pattern() const;
				inline void clear_pattern();
				static const int kPatternFieldNumber = 1;
				inline const ::std::string& pattern() const;
				inline void set_pattern(const ::std::string& value);
				inline void set_pattern(const char* value);
				inline void set_pattern(const char* value, size_t size);
				inline ::std::string* mutable_pattern();
				inline ::std::string* release_pattern();
				inline void set_allocated_pattern(::std::string* pattern);

				// optional string Topic = 2;
				inline bool has_topic() const;
				inline void clear_topic();
				static const int kTopicFieldNumber = 2;
				inline const ::std::string& topic() const;
				inline void set_topic(const ::std::string& value);
				inline void set_topic(const char* value);
				inline void set_topic(const char* value, size_t size);
				inline ::std::string* mutable_topic();
				inline ::std::string* release_topic();
				inline void set_allocated_topic(::std::string* topic);

				// @@protoc_insertion_point(class_scope:MQCloud.Internal.Protocol.UnSubscribe)
			private:
				inline void set_has_pattern();
				inline void clear_has_pattern();
				inline void set_has_topic();
				inline void clear_has_topic();

				::google::protobuf::UnknownFieldSet _unknown_fields_;

				::google::protobuf::uint32 _has_bits_[1];
				mutable int _cached_size_;
				::std::string* pattern_;
				::std::string* topic_;
				friend void protobuf_AddDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_AssignDesc_MQCloud_2eInternal_2eProtocol_2eproto();
				friend void protobuf_ShutdownFile_MQCloud_2eInternal_2eProtocol_2eproto();

				void InitAsDefaultInstance();
				static UnSubscribe* default_instance_;
			};

			// ===================================================================


			// ===================================================================

			// AdvertizeTopic

			// optional string Pattern = 1;
			inline bool AdvertizeTopic::has_pattern() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void AdvertizeTopic::set_has_pattern() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void AdvertizeTopic::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void AdvertizeTopic::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& AdvertizeTopic::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.AdvertizeTopic.Pattern)
				return *pattern_;
			}

			inline void AdvertizeTopic::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.AdvertizeTopic.Pattern)
			}

			inline void AdvertizeTopic::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.AdvertizeTopic.Pattern)
			}

			inline void AdvertizeTopic::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.AdvertizeTopic.Pattern)
			}

			inline ::std::string* AdvertizeTopic::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.AdvertizeTopic.Pattern)
				return pattern_;
			}

			inline ::std::string* AdvertizeTopic::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void AdvertizeTopic::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.AdvertizeTopic.Pattern)
			}

			// optional string Topic = 2;
			inline bool AdvertizeTopic::has_topic() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void AdvertizeTopic::set_has_topic() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void AdvertizeTopic::clear_has_topic() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void AdvertizeTopic::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& AdvertizeTopic::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.AdvertizeTopic.Topic)
				return *topic_;
			}

			inline void AdvertizeTopic::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.AdvertizeTopic.Topic)
			}

			inline void AdvertizeTopic::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.AdvertizeTopic.Topic)
			}

			inline void AdvertizeTopic::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.AdvertizeTopic.Topic)
			}

			inline ::std::string* AdvertizeTopic::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.AdvertizeTopic.Topic)
				return topic_;
			}

			inline ::std::string* AdvertizeTopic::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void AdvertizeTopic::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.AdvertizeTopic.Topic)
			}

			// -------------------------------------------------------------------

			// ConnectRequest

			// optional string NodeName = 1;
			inline bool ConnectRequest::has_nodename() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void ConnectRequest::set_has_nodename() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void ConnectRequest::clear_has_nodename() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void ConnectRequest::clear_nodename() {
				if(nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					nodename_->clear();
				}
				clear_has_nodename();
			}

			inline const ::std::string& ConnectRequest::nodename() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ConnectRequest.NodeName)
				return *nodename_;
			}

			inline void ConnectRequest::set_nodename(const ::std::string& value) {
				set_has_nodename();
				if(nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					nodename_ = new ::std::string;
				}
				nodename_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ConnectRequest.NodeName)
			}

			inline void ConnectRequest::set_nodename(const char* value) {
				set_has_nodename();
				if(nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					nodename_ = new ::std::string;
				}
				nodename_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.ConnectRequest.NodeName)
			}

			inline void ConnectRequest::set_nodename(const char* value, size_t size) {
				set_has_nodename();
				if(nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					nodename_ = new ::std::string;
				}
				nodename_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.ConnectRequest.NodeName)
			}

			inline ::std::string* ConnectRequest::mutable_nodename() {
				set_has_nodename();
				if(nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					nodename_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.ConnectRequest.NodeName)
				return nodename_;
			}

			inline ::std::string* ConnectRequest::release_nodename() {
				clear_has_nodename();
				if(nodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = nodename_;
					nodename_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void ConnectRequest::set_allocated_nodename(::std::string* nodename) {
				if(nodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete nodename_;
				}
				if(nodename) {
					set_has_nodename();
					nodename_ = nodename;
				} else {
					clear_has_nodename();
					nodename_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.ConnectRequest.NodeName)
			}

			// optional string BackEndName = 2;
			inline bool ConnectRequest::has_backendname() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void ConnectRequest::set_has_backendname() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void ConnectRequest::clear_has_backendname() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void ConnectRequest::clear_backendname() {
				if(backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					backendname_->clear();
				}
				clear_has_backendname();
			}

			inline const ::std::string& ConnectRequest::backendname() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ConnectRequest.BackEndName)
				return *backendname_;
			}

			inline void ConnectRequest::set_backendname(const ::std::string& value) {
				set_has_backendname();
				if(backendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					backendname_ = new ::std::string;
				}
				backendname_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ConnectRequest.BackEndName)
			}

			inline void ConnectRequest::set_backendname(const char* value) {
				set_has_backendname();
				if(backendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					backendname_ = new ::std::string;
				}
				backendname_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.ConnectRequest.BackEndName)
			}

			inline void ConnectRequest::set_backendname(const char* value, size_t size) {
				set_has_backendname();
				if(backendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					backendname_ = new ::std::string;
				}
				backendname_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.ConnectRequest.BackEndName)
			}

			inline ::std::string* ConnectRequest::mutable_backendname() {
				set_has_backendname();
				if(backendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					backendname_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.ConnectRequest.BackEndName)
				return backendname_;
			}

			inline ::std::string* ConnectRequest::release_backendname() {
				clear_has_backendname();
				if(backendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = backendname_;
					backendname_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void ConnectRequest::set_allocated_backendname(::std::string* backendname) {
				if(backendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete backendname_;
				}
				if(backendname) {
					set_has_backendname();
					backendname_ = backendname;
				} else {
					clear_has_backendname();
					backendname_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.ConnectRequest.BackEndName)
			}

			// -------------------------------------------------------------------

			// ConnectResponse

			// optional string RealNodeName = 1;
			inline bool ConnectResponse::has_realnodename() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void ConnectResponse::set_has_realnodename() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void ConnectResponse::clear_has_realnodename() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void ConnectResponse::clear_realnodename() {
				if(realnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					realnodename_->clear();
				}
				clear_has_realnodename();
			}

			inline const ::std::string& ConnectResponse::realnodename() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ConnectResponse.RealNodeName)
				return *realnodename_;
			}

			inline void ConnectResponse::set_realnodename(const ::std::string& value) {
				set_has_realnodename();
				if(realnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					realnodename_ = new ::std::string;
				}
				realnodename_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ConnectResponse.RealNodeName)
			}

			inline void ConnectResponse::set_realnodename(const char* value) {
				set_has_realnodename();
				if(realnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					realnodename_ = new ::std::string;
				}
				realnodename_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.ConnectResponse.RealNodeName)
			}

			inline void ConnectResponse::set_realnodename(const char* value, size_t size) {
				set_has_realnodename();
				if(realnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					realnodename_ = new ::std::string;
				}
				realnodename_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.ConnectResponse.RealNodeName)
			}

			inline ::std::string* ConnectResponse::mutable_realnodename() {
				set_has_realnodename();
				if(realnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					realnodename_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.ConnectResponse.RealNodeName)
				return realnodename_;
			}

			inline ::std::string* ConnectResponse::release_realnodename() {
				clear_has_realnodename();
				if(realnodename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = realnodename_;
					realnodename_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void ConnectResponse::set_allocated_realnodename(::std::string* realnodename) {
				if(realnodename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete realnodename_;
				}
				if(realnodename) {
					set_has_realnodename();
					realnodename_ = realnodename;
				} else {
					clear_has_realnodename();
					realnodename_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.ConnectResponse.RealNodeName)
			}

			// optional int32 HeartBeatRateMs = 2 [default = 0];
			inline bool ConnectResponse::has_heartbeatratems() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void ConnectResponse::set_has_heartbeatratems() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void ConnectResponse::clear_has_heartbeatratems() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void ConnectResponse::clear_heartbeatratems() {
				heartbeatratems_ = 0;
				clear_has_heartbeatratems();
			}

			inline ::google::protobuf::int32 ConnectResponse::heartbeatratems() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ConnectResponse.HeartBeatRateMs)
				return heartbeatratems_;
			}

			inline void ConnectResponse::set_heartbeatratems(::google::protobuf::int32 value) {
				set_has_heartbeatratems();
				heartbeatratems_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ConnectResponse.HeartBeatRateMs)
			}

			// -------------------------------------------------------------------

			// Disconnect

			// -------------------------------------------------------------------

			// GetAllPublishersRequest

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetAllPublishersRequest::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetAllPublishersRequest::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetAllPublishersRequest::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetAllPublishersRequest::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetAllPublishersRequest::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllPublishersRequest.RequestId)
				return requestid_;
			}

			inline void GetAllPublishersRequest::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllPublishersRequest.RequestId)
			}

			// optional string Pattern = 2;
			inline bool GetAllPublishersRequest::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void GetAllPublishersRequest::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void GetAllPublishersRequest::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void GetAllPublishersRequest::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& GetAllPublishersRequest::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllPublishersRequest.Pattern)
				return *pattern_;
			}

			inline void GetAllPublishersRequest::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllPublishersRequest.Pattern)
			}

			inline void GetAllPublishersRequest::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetAllPublishersRequest.Pattern)
			}

			inline void GetAllPublishersRequest::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetAllPublishersRequest.Pattern)
			}

			inline ::std::string* GetAllPublishersRequest::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetAllPublishersRequest.Pattern)
				return pattern_;
			}

			inline ::std::string* GetAllPublishersRequest::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetAllPublishersRequest::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetAllPublishersRequest.Pattern)
			}

			// optional string Topic = 3;
			inline bool GetAllPublishersRequest::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void GetAllPublishersRequest::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void GetAllPublishersRequest::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void GetAllPublishersRequest::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& GetAllPublishersRequest::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllPublishersRequest.Topic)
				return *topic_;
			}

			inline void GetAllPublishersRequest::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllPublishersRequest.Topic)
			}

			inline void GetAllPublishersRequest::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetAllPublishersRequest.Topic)
			}

			inline void GetAllPublishersRequest::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetAllPublishersRequest.Topic)
			}

			inline ::std::string* GetAllPublishersRequest::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetAllPublishersRequest.Topic)
				return topic_;
			}

			inline ::std::string* GetAllPublishersRequest::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetAllPublishersRequest::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetAllPublishersRequest.Topic)
			}

			// -------------------------------------------------------------------

			// GetAllPublishersResponse

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetAllPublishersResponse::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetAllPublishersResponse::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetAllPublishersResponse::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetAllPublishersResponse::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetAllPublishersResponse::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllPublishersResponse.RequestId)
				return requestid_;
			}

			inline void GetAllPublishersResponse::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllPublishersResponse.RequestId)
			}

			// repeated string Nodes = 2;
			inline int GetAllPublishersResponse::nodes_size() const {
				return nodes_.size();
			}

			inline void GetAllPublishersResponse::clear_nodes() {
				nodes_.Clear();
			}

			inline const ::std::string& GetAllPublishersResponse::nodes(int index) const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
				return nodes_.Get(index);
			}

			inline ::std::string* GetAllPublishersResponse::mutable_nodes(int index) {
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
				return nodes_.Mutable(index);
			}

			inline void GetAllPublishersResponse::set_nodes(int index, const ::std::string& value) {
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
				nodes_.Mutable(index)->assign(value);
			}

			inline void GetAllPublishersResponse::set_nodes(int index, const char* value) {
				nodes_.Mutable(index)->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
			}

			inline void GetAllPublishersResponse::set_nodes(int index, const char* value, size_t size) {
				nodes_.Mutable(index)->assign(
				                              reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
			}

			inline ::std::string* GetAllPublishersResponse::add_nodes() {
				return nodes_.Add();
			}

			inline void GetAllPublishersResponse::add_nodes(const ::std::string& value) {
				nodes_.Add()->assign(value);
				// @@protoc_insertion_point(field_add:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
			}

			inline void GetAllPublishersResponse::add_nodes(const char* value) {
				nodes_.Add()->assign(value);
				// @@protoc_insertion_point(field_add_char:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
			}

			inline void GetAllPublishersResponse::add_nodes(const char* value, size_t size) {
				nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_add_pointer:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
			}

			inline const ::google::protobuf::RepeatedPtrField<::std::string>& GetAllPublishersResponse::nodes() const {
				// @@protoc_insertion_point(field_list:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
				return nodes_;
			}

			inline ::google::protobuf::RepeatedPtrField<::std::string>* GetAllPublishersResponse::mutable_nodes() {
				// @@protoc_insertion_point(field_mutable_list:MQCloud.Internal.Protocol.GetAllPublishersResponse.Nodes)
				return &nodes_;
			}

			// -------------------------------------------------------------------

			// GetAllSubscribersRequest

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetAllSubscribersRequest::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetAllSubscribersRequest::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetAllSubscribersRequest::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetAllSubscribersRequest::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetAllSubscribersRequest::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllSubscribersRequest.RequestId)
				return requestid_;
			}

			inline void GetAllSubscribersRequest::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllSubscribersRequest.RequestId)
			}

			// optional string Pattern = 2;
			inline bool GetAllSubscribersRequest::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void GetAllSubscribersRequest::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void GetAllSubscribersRequest::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void GetAllSubscribersRequest::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& GetAllSubscribersRequest::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Pattern)
				return *pattern_;
			}

			inline void GetAllSubscribersRequest::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Pattern)
			}

			inline void GetAllSubscribersRequest::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Pattern)
			}

			inline void GetAllSubscribersRequest::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Pattern)
			}

			inline ::std::string* GetAllSubscribersRequest::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Pattern)
				return pattern_;
			}

			inline ::std::string* GetAllSubscribersRequest::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetAllSubscribersRequest::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Pattern)
			}

			// optional string Topic = 3;
			inline bool GetAllSubscribersRequest::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void GetAllSubscribersRequest::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void GetAllSubscribersRequest::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void GetAllSubscribersRequest::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& GetAllSubscribersRequest::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Topic)
				return *topic_;
			}

			inline void GetAllSubscribersRequest::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Topic)
			}

			inline void GetAllSubscribersRequest::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Topic)
			}

			inline void GetAllSubscribersRequest::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Topic)
			}

			inline ::std::string* GetAllSubscribersRequest::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Topic)
				return topic_;
			}

			inline ::std::string* GetAllSubscribersRequest::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetAllSubscribersRequest::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetAllSubscribersRequest.Topic)
			}

			// -------------------------------------------------------------------

			// GetAllSubscribersResponse

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetAllSubscribersResponse::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetAllSubscribersResponse::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetAllSubscribersResponse::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetAllSubscribersResponse::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetAllSubscribersResponse::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllSubscribersResponse.RequestId)
				return requestid_;
			}

			inline void GetAllSubscribersResponse::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllSubscribersResponse.RequestId)
			}

			// repeated string Nodes = 2;
			inline int GetAllSubscribersResponse::nodes_size() const {
				return nodes_.size();
			}

			inline void GetAllSubscribersResponse::clear_nodes() {
				nodes_.Clear();
			}

			inline const ::std::string& GetAllSubscribersResponse::nodes(int index) const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
				return nodes_.Get(index);
			}

			inline ::std::string* GetAllSubscribersResponse::mutable_nodes(int index) {
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
				return nodes_.Mutable(index);
			}

			inline void GetAllSubscribersResponse::set_nodes(int index, const ::std::string& value) {
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
				nodes_.Mutable(index)->assign(value);
			}

			inline void GetAllSubscribersResponse::set_nodes(int index, const char* value) {
				nodes_.Mutable(index)->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
			}

			inline void GetAllSubscribersResponse::set_nodes(int index, const char* value, size_t size) {
				nodes_.Mutable(index)->assign(
				                              reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
			}

			inline ::std::string* GetAllSubscribersResponse::add_nodes() {
				return nodes_.Add();
			}

			inline void GetAllSubscribersResponse::add_nodes(const ::std::string& value) {
				nodes_.Add()->assign(value);
				// @@protoc_insertion_point(field_add:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
			}

			inline void GetAllSubscribersResponse::add_nodes(const char* value) {
				nodes_.Add()->assign(value);
				// @@protoc_insertion_point(field_add_char:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
			}

			inline void GetAllSubscribersResponse::add_nodes(const char* value, size_t size) {
				nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_add_pointer:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
			}

			inline const ::google::protobuf::RepeatedPtrField<::std::string>& GetAllSubscribersResponse::nodes() const {
				// @@protoc_insertion_point(field_list:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
				return nodes_;
			}

			inline ::google::protobuf::RepeatedPtrField<::std::string>* GetAllSubscribersResponse::mutable_nodes() {
				// @@protoc_insertion_point(field_mutable_list:MQCloud.Internal.Protocol.GetAllSubscribersResponse.Nodes)
				return &nodes_;
			}

			// -------------------------------------------------------------------

			// GetPublisherRequest

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetPublisherRequest::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetPublisherRequest::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetPublisherRequest::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetPublisherRequest::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetPublisherRequest::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetPublisherRequest.RequestId)
				return requestid_;
			}

			inline void GetPublisherRequest::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetPublisherRequest.RequestId)
			}

			// optional string Pattern = 2;
			inline bool GetPublisherRequest::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void GetPublisherRequest::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void GetPublisherRequest::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void GetPublisherRequest::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& GetPublisherRequest::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetPublisherRequest.Pattern)
				return *pattern_;
			}

			inline void GetPublisherRequest::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetPublisherRequest.Pattern)
			}

			inline void GetPublisherRequest::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetPublisherRequest.Pattern)
			}

			inline void GetPublisherRequest::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetPublisherRequest.Pattern)
			}

			inline ::std::string* GetPublisherRequest::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetPublisherRequest.Pattern)
				return pattern_;
			}

			inline ::std::string* GetPublisherRequest::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetPublisherRequest::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetPublisherRequest.Pattern)
			}

			// optional string Topic = 3;
			inline bool GetPublisherRequest::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void GetPublisherRequest::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void GetPublisherRequest::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void GetPublisherRequest::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& GetPublisherRequest::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetPublisherRequest.Topic)
				return *topic_;
			}

			inline void GetPublisherRequest::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetPublisherRequest.Topic)
			}

			inline void GetPublisherRequest::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetPublisherRequest.Topic)
			}

			inline void GetPublisherRequest::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetPublisherRequest.Topic)
			}

			inline ::std::string* GetPublisherRequest::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetPublisherRequest.Topic)
				return topic_;
			}

			inline ::std::string* GetPublisherRequest::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetPublisherRequest::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetPublisherRequest.Topic)
			}

			// -------------------------------------------------------------------

			// GetPublisherResponse

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetPublisherResponse::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetPublisherResponse::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetPublisherResponse::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetPublisherResponse::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetPublisherResponse::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetPublisherResponse.RequestId)
				return requestid_;
			}

			inline void GetPublisherResponse::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetPublisherResponse.RequestId)
			}

			// optional string Node = 2;
			inline bool GetPublisherResponse::has_node() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void GetPublisherResponse::set_has_node() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void GetPublisherResponse::clear_has_node() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void GetPublisherResponse::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& GetPublisherResponse::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetPublisherResponse.Node)
				return *node_;
			}

			inline void GetPublisherResponse::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetPublisherResponse.Node)
			}

			inline void GetPublisherResponse::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetPublisherResponse.Node)
			}

			inline void GetPublisherResponse::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetPublisherResponse.Node)
			}

			inline ::std::string* GetPublisherResponse::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetPublisherResponse.Node)
				return node_;
			}

			inline ::std::string* GetPublisherResponse::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetPublisherResponse::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetPublisherResponse.Node)
			}

			// -------------------------------------------------------------------

			// GetSubscriberRequest

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetSubscriberRequest::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetSubscriberRequest::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetSubscriberRequest::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetSubscriberRequest::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetSubscriberRequest::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetSubscriberRequest.RequestId)
				return requestid_;
			}

			inline void GetSubscriberRequest::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetSubscriberRequest.RequestId)
			}

			// optional string Pattern = 2;
			inline bool GetSubscriberRequest::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void GetSubscriberRequest::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void GetSubscriberRequest::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void GetSubscriberRequest::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& GetSubscriberRequest::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetSubscriberRequest.Pattern)
				return *pattern_;
			}

			inline void GetSubscriberRequest::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetSubscriberRequest.Pattern)
			}

			inline void GetSubscriberRequest::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetSubscriberRequest.Pattern)
			}

			inline void GetSubscriberRequest::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetSubscriberRequest.Pattern)
			}

			inline ::std::string* GetSubscriberRequest::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetSubscriberRequest.Pattern)
				return pattern_;
			}

			inline ::std::string* GetSubscriberRequest::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetSubscriberRequest::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetSubscriberRequest.Pattern)
			}

			// optional string Topic = 3;
			inline bool GetSubscriberRequest::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void GetSubscriberRequest::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void GetSubscriberRequest::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void GetSubscriberRequest::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& GetSubscriberRequest::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetSubscriberRequest.Topic)
				return *topic_;
			}

			inline void GetSubscriberRequest::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetSubscriberRequest.Topic)
			}

			inline void GetSubscriberRequest::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetSubscriberRequest.Topic)
			}

			inline void GetSubscriberRequest::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetSubscriberRequest.Topic)
			}

			inline ::std::string* GetSubscriberRequest::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetSubscriberRequest.Topic)
				return topic_;
			}

			inline ::std::string* GetSubscriberRequest::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetSubscriberRequest::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetSubscriberRequest.Topic)
			}

			// -------------------------------------------------------------------

			// GetSubscriberResponse

			// optional int32 RequestId = 1 [default = 0];
			inline bool GetSubscriberResponse::has_requestid() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void GetSubscriberResponse::set_has_requestid() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void GetSubscriberResponse::clear_has_requestid() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void GetSubscriberResponse::clear_requestid() {
				requestid_ = 0;
				clear_has_requestid();
			}

			inline ::google::protobuf::int32 GetSubscriberResponse::requestid() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetSubscriberResponse.RequestId)
				return requestid_;
			}

			inline void GetSubscriberResponse::set_requestid(::google::protobuf::int32 value) {
				set_has_requestid();
				requestid_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetSubscriberResponse.RequestId)
			}

			// optional string Node = 2;
			inline bool GetSubscriberResponse::has_node() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void GetSubscriberResponse::set_has_node() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void GetSubscriberResponse::clear_has_node() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void GetSubscriberResponse::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& GetSubscriberResponse::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.GetSubscriberResponse.Node)
				return *node_;
			}

			inline void GetSubscriberResponse::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.GetSubscriberResponse.Node)
			}

			inline void GetSubscriberResponse::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.GetSubscriberResponse.Node)
			}

			inline void GetSubscriberResponse::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.GetSubscriberResponse.Node)
			}

			inline ::std::string* GetSubscriberResponse::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.GetSubscriberResponse.Node)
				return node_;
			}

			inline ::std::string* GetSubscriberResponse::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void GetSubscriberResponse::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.GetSubscriberResponse.Node)
			}

			// -------------------------------------------------------------------

			// HeartBeat

			// -------------------------------------------------------------------

			// IncomingEvent

			// optional .MQCloud.Internal.Protocol.IncomingEventType TypeCode = 1 [default = IncomingEventTypeOnConnectionClosed];
			inline bool IncomingEvent::has_typecode() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void IncomingEvent::set_has_typecode() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void IncomingEvent::clear_has_typecode() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void IncomingEvent::clear_typecode() {
				typecode_ = 0;
				clear_has_typecode();
			}

			inline ::MQCloud::Internal::Protocol::IncomingEventType IncomingEvent::typecode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.TypeCode)
				return static_cast<::MQCloud::Internal::Protocol::IncomingEventType>(typecode_);
			}

			inline void IncomingEvent::set_typecode(::MQCloud::Internal::Protocol::IncomingEventType value) {
				assert(::MQCloud::Internal::Protocol::IncomingEventType_IsValid(value));
				set_has_typecode();
				typecode_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.IncomingEvent.TypeCode)
			}

			// optional .MQCloud.Internal.Protocol.OnConnectionClosed OnConnectionClosed = 2;
			inline bool IncomingEvent::has_onconnectionclosed() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void IncomingEvent::set_has_onconnectionclosed() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void IncomingEvent::clear_has_onconnectionclosed() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void IncomingEvent::clear_onconnectionclosed() {
				if(onconnectionclosed_ != NULL)
					onconnectionclosed_->::MQCloud::Internal::Protocol::OnConnectionClosed::Clear();
				clear_has_onconnectionclosed();
			}

			inline const ::MQCloud::Internal::Protocol::OnConnectionClosed& IncomingEvent::onconnectionclosed() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnConnectionClosed)
				return onconnectionclosed_ != NULL ? *onconnectionclosed_ : *default_instance_->onconnectionclosed_;
			}

			inline ::MQCloud::Internal::Protocol::OnConnectionClosed* IncomingEvent::mutable_onconnectionclosed() {
				set_has_onconnectionclosed();
				if(onconnectionclosed_ == NULL)
					onconnectionclosed_ = new ::MQCloud::Internal::Protocol::OnConnectionClosed;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnConnectionClosed)
				return onconnectionclosed_;
			}

			inline ::MQCloud::Internal::Protocol::OnConnectionClosed* IncomingEvent::release_onconnectionclosed() {
				clear_has_onconnectionclosed();
				::MQCloud::Internal::Protocol::OnConnectionClosed* temp = onconnectionclosed_;
				onconnectionclosed_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onconnectionclosed(::MQCloud::Internal::Protocol::OnConnectionClosed* onconnectionclosed) {
				delete onconnectionclosed_;
				onconnectionclosed_ = onconnectionclosed;
				if(onconnectionclosed) {
					set_has_onconnectionclosed();
				} else {
					clear_has_onconnectionclosed();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnConnectionClosed)
			}

			// optional .MQCloud.Internal.Protocol.OnConnectionEstablished OnConnectionEstablished = 3;
			inline bool IncomingEvent::has_onconnectionestablished() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void IncomingEvent::set_has_onconnectionestablished() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void IncomingEvent::clear_has_onconnectionestablished() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void IncomingEvent::clear_onconnectionestablished() {
				if(onconnectionestablished_ != NULL)
					onconnectionestablished_->::MQCloud::Internal::Protocol::OnConnectionEstablished::Clear();
				clear_has_onconnectionestablished();
			}

			inline const ::MQCloud::Internal::Protocol::OnConnectionEstablished& IncomingEvent::onconnectionestablished() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnConnectionEstablished)
				return onconnectionestablished_ != NULL ? *onconnectionestablished_ : *default_instance_->onconnectionestablished_;
			}

			inline ::MQCloud::Internal::Protocol::OnConnectionEstablished* IncomingEvent::mutable_onconnectionestablished() {
				set_has_onconnectionestablished();
				if(onconnectionestablished_ == NULL)
					onconnectionestablished_ = new ::MQCloud::Internal::Protocol::OnConnectionEstablished;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnConnectionEstablished)
				return onconnectionestablished_;
			}

			inline ::MQCloud::Internal::Protocol::OnConnectionEstablished* IncomingEvent::release_onconnectionestablished() {
				clear_has_onconnectionestablished();
				::MQCloud::Internal::Protocol::OnConnectionEstablished* temp = onconnectionestablished_;
				onconnectionestablished_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onconnectionestablished(::MQCloud::Internal::Protocol::OnConnectionEstablished* onconnectionestablished) {
				delete onconnectionestablished_;
				onconnectionestablished_ = onconnectionestablished;
				if(onconnectionestablished) {
					set_has_onconnectionestablished();
				} else {
					clear_has_onconnectionestablished();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnConnectionEstablished)
			}

			// optional .MQCloud.Internal.Protocol.OnNodeAdvertisedTopic OnNodeAdvertisedTopic = 4;
			inline bool IncomingEvent::has_onnodeadvertisedtopic() const {
				return (_has_bits_[0] & 0x00000008u) != 0;
			}

			inline void IncomingEvent::set_has_onnodeadvertisedtopic() {
				_has_bits_[0] |= 0x00000008u;
			}

			inline void IncomingEvent::clear_has_onnodeadvertisedtopic() {
				_has_bits_[0] &= ~0x00000008u;
			}

			inline void IncomingEvent::clear_onnodeadvertisedtopic() {
				if(onnodeadvertisedtopic_ != NULL)
					onnodeadvertisedtopic_->::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic::Clear();
				clear_has_onnodeadvertisedtopic();
			}

			inline const ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic& IncomingEvent::onnodeadvertisedtopic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnNodeAdvertisedTopic)
				return onnodeadvertisedtopic_ != NULL ? *onnodeadvertisedtopic_ : *default_instance_->onnodeadvertisedtopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* IncomingEvent::mutable_onnodeadvertisedtopic() {
				set_has_onnodeadvertisedtopic();
				if(onnodeadvertisedtopic_ == NULL)
					onnodeadvertisedtopic_ = new ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnNodeAdvertisedTopic)
				return onnodeadvertisedtopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* IncomingEvent::release_onnodeadvertisedtopic() {
				clear_has_onnodeadvertisedtopic();
				::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* temp = onnodeadvertisedtopic_;
				onnodeadvertisedtopic_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onnodeadvertisedtopic(::MQCloud::Internal::Protocol::OnNodeAdvertisedTopic* onnodeadvertisedtopic) {
				delete onnodeadvertisedtopic_;
				onnodeadvertisedtopic_ = onnodeadvertisedtopic;
				if(onnodeadvertisedtopic) {
					set_has_onnodeadvertisedtopic();
				} else {
					clear_has_onnodeadvertisedtopic();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnNodeAdvertisedTopic)
			}

			// optional .MQCloud.Internal.Protocol.OnNodeRejectedTopic OnNodeRejectedTopic = 5;
			inline bool IncomingEvent::has_onnoderejectedtopic() const {
				return (_has_bits_[0] & 0x00000010u) != 0;
			}

			inline void IncomingEvent::set_has_onnoderejectedtopic() {
				_has_bits_[0] |= 0x00000010u;
			}

			inline void IncomingEvent::clear_has_onnoderejectedtopic() {
				_has_bits_[0] &= ~0x00000010u;
			}

			inline void IncomingEvent::clear_onnoderejectedtopic() {
				if(onnoderejectedtopic_ != NULL)
					onnoderejectedtopic_->::MQCloud::Internal::Protocol::OnNodeRejectedTopic::Clear();
				clear_has_onnoderejectedtopic();
			}

			inline const ::MQCloud::Internal::Protocol::OnNodeRejectedTopic& IncomingEvent::onnoderejectedtopic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnNodeRejectedTopic)
				return onnoderejectedtopic_ != NULL ? *onnoderejectedtopic_ : *default_instance_->onnoderejectedtopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeRejectedTopic* IncomingEvent::mutable_onnoderejectedtopic() {
				set_has_onnoderejectedtopic();
				if(onnoderejectedtopic_ == NULL)
					onnoderejectedtopic_ = new ::MQCloud::Internal::Protocol::OnNodeRejectedTopic;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnNodeRejectedTopic)
				return onnoderejectedtopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeRejectedTopic* IncomingEvent::release_onnoderejectedtopic() {
				clear_has_onnoderejectedtopic();
				::MQCloud::Internal::Protocol::OnNodeRejectedTopic* temp = onnoderejectedtopic_;
				onnoderejectedtopic_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onnoderejectedtopic(::MQCloud::Internal::Protocol::OnNodeRejectedTopic* onnoderejectedtopic) {
				delete onnoderejectedtopic_;
				onnoderejectedtopic_ = onnoderejectedtopic;
				if(onnoderejectedtopic) {
					set_has_onnoderejectedtopic();
				} else {
					clear_has_onnoderejectedtopic();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnNodeRejectedTopic)
			}

			// optional .MQCloud.Internal.Protocol.OnNodeSubscribedToTopic OnNodeSubscribedToTopic = 6;
			inline bool IncomingEvent::has_onnodesubscribedtotopic() const {
				return (_has_bits_[0] & 0x00000020u) != 0;
			}

			inline void IncomingEvent::set_has_onnodesubscribedtotopic() {
				_has_bits_[0] |= 0x00000020u;
			}

			inline void IncomingEvent::clear_has_onnodesubscribedtotopic() {
				_has_bits_[0] &= ~0x00000020u;
			}

			inline void IncomingEvent::clear_onnodesubscribedtotopic() {
				if(onnodesubscribedtotopic_ != NULL)
					onnodesubscribedtotopic_->::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic::Clear();
				clear_has_onnodesubscribedtotopic();
			}

			inline const ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic& IncomingEvent::onnodesubscribedtotopic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnNodeSubscribedToTopic)
				return onnodesubscribedtotopic_ != NULL ? *onnodesubscribedtotopic_ : *default_instance_->onnodesubscribedtotopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* IncomingEvent::mutable_onnodesubscribedtotopic() {
				set_has_onnodesubscribedtotopic();
				if(onnodesubscribedtotopic_ == NULL)
					onnodesubscribedtotopic_ = new ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnNodeSubscribedToTopic)
				return onnodesubscribedtotopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* IncomingEvent::release_onnodesubscribedtotopic() {
				clear_has_onnodesubscribedtotopic();
				::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* temp = onnodesubscribedtotopic_;
				onnodesubscribedtotopic_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onnodesubscribedtotopic(::MQCloud::Internal::Protocol::OnNodeSubscribedToTopic* onnodesubscribedtotopic) {
				delete onnodesubscribedtotopic_;
				onnodesubscribedtotopic_ = onnodesubscribedtotopic;
				if(onnodesubscribedtotopic) {
					set_has_onnodesubscribedtotopic();
				} else {
					clear_has_onnodesubscribedtotopic();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnNodeSubscribedToTopic)
			}

			// optional .MQCloud.Internal.Protocol.OnNodeUnavaliable OnNodeUnavaliable = 7;
			inline bool IncomingEvent::has_onnodeunavaliable() const {
				return (_has_bits_[0] & 0x00000040u) != 0;
			}

			inline void IncomingEvent::set_has_onnodeunavaliable() {
				_has_bits_[0] |= 0x00000040u;
			}

			inline void IncomingEvent::clear_has_onnodeunavaliable() {
				_has_bits_[0] &= ~0x00000040u;
			}

			inline void IncomingEvent::clear_onnodeunavaliable() {
				if(onnodeunavaliable_ != NULL)
					onnodeunavaliable_->::MQCloud::Internal::Protocol::OnNodeUnavaliable::Clear();
				clear_has_onnodeunavaliable();
			}

			inline const ::MQCloud::Internal::Protocol::OnNodeUnavaliable& IncomingEvent::onnodeunavaliable() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnNodeUnavaliable)
				return onnodeunavaliable_ != NULL ? *onnodeunavaliable_ : *default_instance_->onnodeunavaliable_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeUnavaliable* IncomingEvent::mutable_onnodeunavaliable() {
				set_has_onnodeunavaliable();
				if(onnodeunavaliable_ == NULL)
					onnodeunavaliable_ = new ::MQCloud::Internal::Protocol::OnNodeUnavaliable;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnNodeUnavaliable)
				return onnodeunavaliable_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeUnavaliable* IncomingEvent::release_onnodeunavaliable() {
				clear_has_onnodeunavaliable();
				::MQCloud::Internal::Protocol::OnNodeUnavaliable* temp = onnodeunavaliable_;
				onnodeunavaliable_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onnodeunavaliable(::MQCloud::Internal::Protocol::OnNodeUnavaliable* onnodeunavaliable) {
				delete onnodeunavaliable_;
				onnodeunavaliable_ = onnodeunavaliable;
				if(onnodeunavaliable) {
					set_has_onnodeunavaliable();
				} else {
					clear_has_onnodeunavaliable();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnNodeUnavaliable)
			}

			// optional .MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic OnNodeUnsubscribedFromTopic = 8;
			inline bool IncomingEvent::has_onnodeunsubscribedfromtopic() const {
				return (_has_bits_[0] & 0x00000080u) != 0;
			}

			inline void IncomingEvent::set_has_onnodeunsubscribedfromtopic() {
				_has_bits_[0] |= 0x00000080u;
			}

			inline void IncomingEvent::clear_has_onnodeunsubscribedfromtopic() {
				_has_bits_[0] &= ~0x00000080u;
			}

			inline void IncomingEvent::clear_onnodeunsubscribedfromtopic() {
				if(onnodeunsubscribedfromtopic_ != NULL)
					onnodeunsubscribedfromtopic_->::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic::Clear();
				clear_has_onnodeunsubscribedfromtopic();
			}

			inline const ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic& IncomingEvent::onnodeunsubscribedfromtopic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingEvent.OnNodeUnsubscribedFromTopic)
				return onnodeunsubscribedfromtopic_ != NULL ? *onnodeunsubscribedfromtopic_ : *default_instance_->onnodeunsubscribedfromtopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* IncomingEvent::mutable_onnodeunsubscribedfromtopic() {
				set_has_onnodeunsubscribedfromtopic();
				if(onnodeunsubscribedfromtopic_ == NULL)
					onnodeunsubscribedfromtopic_ = new ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingEvent.OnNodeUnsubscribedFromTopic)
				return onnodeunsubscribedfromtopic_;
			}

			inline ::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* IncomingEvent::release_onnodeunsubscribedfromtopic() {
				clear_has_onnodeunsubscribedfromtopic();
				::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* temp = onnodeunsubscribedfromtopic_;
				onnodeunsubscribedfromtopic_ = NULL;
				return temp;
			}

			inline void IncomingEvent::set_allocated_onnodeunsubscribedfromtopic(::MQCloud::Internal::Protocol::OnNodeUnsubscribedFromTopic* onnodeunsubscribedfromtopic) {
				delete onnodeunsubscribedfromtopic_;
				onnodeunsubscribedfromtopic_ = onnodeunsubscribedfromtopic;
				if(onnodeunsubscribedfromtopic) {
					set_has_onnodeunsubscribedfromtopic();
				} else {
					clear_has_onnodeunsubscribedfromtopic();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingEvent.OnNodeUnsubscribedFromTopic)
			}

			// -------------------------------------------------------------------

			// IncomingOperation

			// optional .MQCloud.Internal.Protocol.IncomingOperationType TypeCode = 1 [default = IncomingOperationTypeConnectRequest];
			inline bool IncomingOperation::has_typecode() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void IncomingOperation::set_has_typecode() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void IncomingOperation::clear_has_typecode() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void IncomingOperation::clear_typecode() {
				typecode_ = 0;
				clear_has_typecode();
			}

			inline ::MQCloud::Internal::Protocol::IncomingOperationType IncomingOperation::typecode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingOperation.TypeCode)
				return static_cast<::MQCloud::Internal::Protocol::IncomingOperationType>(typecode_);
			}

			inline void IncomingOperation::set_typecode(::MQCloud::Internal::Protocol::IncomingOperationType value) {
				assert(::MQCloud::Internal::Protocol::IncomingOperationType_IsValid(value));
				set_has_typecode();
				typecode_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.IncomingOperation.TypeCode)
			}

			// optional .MQCloud.Internal.Protocol.ConnectResponse ConnectResponse = 2;
			inline bool IncomingOperation::has_connectresponse() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void IncomingOperation::set_has_connectresponse() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void IncomingOperation::clear_has_connectresponse() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void IncomingOperation::clear_connectresponse() {
				if(connectresponse_ != NULL)
					connectresponse_->::MQCloud::Internal::Protocol::ConnectResponse::Clear();
				clear_has_connectresponse();
			}

			inline const ::MQCloud::Internal::Protocol::ConnectResponse& IncomingOperation::connectresponse() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingOperation.ConnectResponse)
				return connectresponse_ != NULL ? *connectresponse_ : *default_instance_->connectresponse_;
			}

			inline ::MQCloud::Internal::Protocol::ConnectResponse* IncomingOperation::mutable_connectresponse() {
				set_has_connectresponse();
				if(connectresponse_ == NULL)
					connectresponse_ = new ::MQCloud::Internal::Protocol::ConnectResponse;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingOperation.ConnectResponse)
				return connectresponse_;
			}

			inline ::MQCloud::Internal::Protocol::ConnectResponse* IncomingOperation::release_connectresponse() {
				clear_has_connectresponse();
				::MQCloud::Internal::Protocol::ConnectResponse* temp = connectresponse_;
				connectresponse_ = NULL;
				return temp;
			}

			inline void IncomingOperation::set_allocated_connectresponse(::MQCloud::Internal::Protocol::ConnectResponse* connectresponse) {
				delete connectresponse_;
				connectresponse_ = connectresponse;
				if(connectresponse) {
					set_has_connectresponse();
				} else {
					clear_has_connectresponse();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingOperation.ConnectResponse)
			}

			// optional .MQCloud.Internal.Protocol.GetPublisherResponse GetPublisherResponse = 3;
			inline bool IncomingOperation::has_getpublisherresponse() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void IncomingOperation::set_has_getpublisherresponse() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void IncomingOperation::clear_has_getpublisherresponse() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void IncomingOperation::clear_getpublisherresponse() {
				if(getpublisherresponse_ != NULL)
					getpublisherresponse_->::MQCloud::Internal::Protocol::GetPublisherResponse::Clear();
				clear_has_getpublisherresponse();
			}

			inline const ::MQCloud::Internal::Protocol::GetPublisherResponse& IncomingOperation::getpublisherresponse() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingOperation.GetPublisherResponse)
				return getpublisherresponse_ != NULL ? *getpublisherresponse_ : *default_instance_->getpublisherresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetPublisherResponse* IncomingOperation::mutable_getpublisherresponse() {
				set_has_getpublisherresponse();
				if(getpublisherresponse_ == NULL)
					getpublisherresponse_ = new ::MQCloud::Internal::Protocol::GetPublisherResponse;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingOperation.GetPublisherResponse)
				return getpublisherresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetPublisherResponse* IncomingOperation::release_getpublisherresponse() {
				clear_has_getpublisherresponse();
				::MQCloud::Internal::Protocol::GetPublisherResponse* temp = getpublisherresponse_;
				getpublisherresponse_ = NULL;
				return temp;
			}

			inline void IncomingOperation::set_allocated_getpublisherresponse(::MQCloud::Internal::Protocol::GetPublisherResponse* getpublisherresponse) {
				delete getpublisherresponse_;
				getpublisherresponse_ = getpublisherresponse;
				if(getpublisherresponse) {
					set_has_getpublisherresponse();
				} else {
					clear_has_getpublisherresponse();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingOperation.GetPublisherResponse)
			}

			// optional .MQCloud.Internal.Protocol.GetAllPublishersResponse GetAllPublishersResponse = 4;
			inline bool IncomingOperation::has_getallpublishersresponse() const {
				return (_has_bits_[0] & 0x00000008u) != 0;
			}

			inline void IncomingOperation::set_has_getallpublishersresponse() {
				_has_bits_[0] |= 0x00000008u;
			}

			inline void IncomingOperation::clear_has_getallpublishersresponse() {
				_has_bits_[0] &= ~0x00000008u;
			}

			inline void IncomingOperation::clear_getallpublishersresponse() {
				if(getallpublishersresponse_ != NULL)
					getallpublishersresponse_->::MQCloud::Internal::Protocol::GetAllPublishersResponse::Clear();
				clear_has_getallpublishersresponse();
			}

			inline const ::MQCloud::Internal::Protocol::GetAllPublishersResponse& IncomingOperation::getallpublishersresponse() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingOperation.GetAllPublishersResponse)
				return getallpublishersresponse_ != NULL ? *getallpublishersresponse_ : *default_instance_->getallpublishersresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllPublishersResponse* IncomingOperation::mutable_getallpublishersresponse() {
				set_has_getallpublishersresponse();
				if(getallpublishersresponse_ == NULL)
					getallpublishersresponse_ = new ::MQCloud::Internal::Protocol::GetAllPublishersResponse;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingOperation.GetAllPublishersResponse)
				return getallpublishersresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllPublishersResponse* IncomingOperation::release_getallpublishersresponse() {
				clear_has_getallpublishersresponse();
				::MQCloud::Internal::Protocol::GetAllPublishersResponse* temp = getallpublishersresponse_;
				getallpublishersresponse_ = NULL;
				return temp;
			}

			inline void IncomingOperation::set_allocated_getallpublishersresponse(::MQCloud::Internal::Protocol::GetAllPublishersResponse* getallpublishersresponse) {
				delete getallpublishersresponse_;
				getallpublishersresponse_ = getallpublishersresponse;
				if(getallpublishersresponse) {
					set_has_getallpublishersresponse();
				} else {
					clear_has_getallpublishersresponse();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingOperation.GetAllPublishersResponse)
			}

			// optional .MQCloud.Internal.Protocol.GetSubscriberResponse GetSubscriberResponse = 5;
			inline bool IncomingOperation::has_getsubscriberresponse() const {
				return (_has_bits_[0] & 0x00000010u) != 0;
			}

			inline void IncomingOperation::set_has_getsubscriberresponse() {
				_has_bits_[0] |= 0x00000010u;
			}

			inline void IncomingOperation::clear_has_getsubscriberresponse() {
				_has_bits_[0] &= ~0x00000010u;
			}

			inline void IncomingOperation::clear_getsubscriberresponse() {
				if(getsubscriberresponse_ != NULL)
					getsubscriberresponse_->::MQCloud::Internal::Protocol::GetSubscriberResponse::Clear();
				clear_has_getsubscriberresponse();
			}

			inline const ::MQCloud::Internal::Protocol::GetSubscriberResponse& IncomingOperation::getsubscriberresponse() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingOperation.GetSubscriberResponse)
				return getsubscriberresponse_ != NULL ? *getsubscriberresponse_ : *default_instance_->getsubscriberresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetSubscriberResponse* IncomingOperation::mutable_getsubscriberresponse() {
				set_has_getsubscriberresponse();
				if(getsubscriberresponse_ == NULL)
					getsubscriberresponse_ = new ::MQCloud::Internal::Protocol::GetSubscriberResponse;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingOperation.GetSubscriberResponse)
				return getsubscriberresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetSubscriberResponse* IncomingOperation::release_getsubscriberresponse() {
				clear_has_getsubscriberresponse();
				::MQCloud::Internal::Protocol::GetSubscriberResponse* temp = getsubscriberresponse_;
				getsubscriberresponse_ = NULL;
				return temp;
			}

			inline void IncomingOperation::set_allocated_getsubscriberresponse(::MQCloud::Internal::Protocol::GetSubscriberResponse* getsubscriberresponse) {
				delete getsubscriberresponse_;
				getsubscriberresponse_ = getsubscriberresponse;
				if(getsubscriberresponse) {
					set_has_getsubscriberresponse();
				} else {
					clear_has_getsubscriberresponse();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingOperation.GetSubscriberResponse)
			}

			// optional .MQCloud.Internal.Protocol.GetAllSubscribersResponse GetAllSubscribersResponse = 6;
			inline bool IncomingOperation::has_getallsubscribersresponse() const {
				return (_has_bits_[0] & 0x00000020u) != 0;
			}

			inline void IncomingOperation::set_has_getallsubscribersresponse() {
				_has_bits_[0] |= 0x00000020u;
			}

			inline void IncomingOperation::clear_has_getallsubscribersresponse() {
				_has_bits_[0] &= ~0x00000020u;
			}

			inline void IncomingOperation::clear_getallsubscribersresponse() {
				if(getallsubscribersresponse_ != NULL)
					getallsubscribersresponse_->::MQCloud::Internal::Protocol::GetAllSubscribersResponse::Clear();
				clear_has_getallsubscribersresponse();
			}

			inline const ::MQCloud::Internal::Protocol::GetAllSubscribersResponse& IncomingOperation::getallsubscribersresponse() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.IncomingOperation.GetAllSubscribersResponse)
				return getallsubscribersresponse_ != NULL ? *getallsubscribersresponse_ : *default_instance_->getallsubscribersresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllSubscribersResponse* IncomingOperation::mutable_getallsubscribersresponse() {
				set_has_getallsubscribersresponse();
				if(getallsubscribersresponse_ == NULL)
					getallsubscribersresponse_ = new ::MQCloud::Internal::Protocol::GetAllSubscribersResponse;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.IncomingOperation.GetAllSubscribersResponse)
				return getallsubscribersresponse_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllSubscribersResponse* IncomingOperation::release_getallsubscribersresponse() {
				clear_has_getallsubscribersresponse();
				::MQCloud::Internal::Protocol::GetAllSubscribersResponse* temp = getallsubscribersresponse_;
				getallsubscribersresponse_ = NULL;
				return temp;
			}

			inline void IncomingOperation::set_allocated_getallsubscribersresponse(::MQCloud::Internal::Protocol::GetAllSubscribersResponse* getallsubscribersresponse) {
				delete getallsubscribersresponse_;
				getallsubscribersresponse_ = getallsubscribersresponse;
				if(getallsubscribersresponse) {
					set_has_getallsubscribersresponse();
				} else {
					clear_has_getallsubscribersresponse();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.IncomingOperation.GetAllSubscribersResponse)
			}

			// -------------------------------------------------------------------

			// OnConnectionClosed

			// optional string FromNode = 1;
			inline bool OnConnectionClosed::has_fromnode() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnConnectionClosed::set_has_fromnode() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnConnectionClosed::clear_has_fromnode() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnConnectionClosed::clear_fromnode() {
				if(fromnode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_->clear();
				}
				clear_has_fromnode();
			}

			inline const ::std::string& OnConnectionClosed::fromnode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnConnectionClosed.FromNode)
				return *fromnode_;
			}

			inline void OnConnectionClosed::set_fromnode(const ::std::string& value) {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				fromnode_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnConnectionClosed.FromNode)
			}

			inline void OnConnectionClosed::set_fromnode(const char* value) {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				fromnode_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnConnectionClosed.FromNode)
			}

			inline void OnConnectionClosed::set_fromnode(const char* value, size_t size) {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				fromnode_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnConnectionClosed.FromNode)
			}

			inline ::std::string* OnConnectionClosed::mutable_fromnode() {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnConnectionClosed.FromNode)
				return fromnode_;
			}

			inline ::std::string* OnConnectionClosed::release_fromnode() {
				clear_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = fromnode_;
					fromnode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnConnectionClosed::set_allocated_fromnode(::std::string* fromnode) {
				if(fromnode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete fromnode_;
				}
				if(fromnode) {
					set_has_fromnode();
					fromnode_ = fromnode;
				} else {
					clear_has_fromnode();
					fromnode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnConnectionClosed.FromNode)
			}

			// optional string ToNode = 2;
			inline bool OnConnectionClosed::has_tonode() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnConnectionClosed::set_has_tonode() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnConnectionClosed::clear_has_tonode() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnConnectionClosed::clear_tonode() {
				if(tonode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_->clear();
				}
				clear_has_tonode();
			}

			inline const ::std::string& OnConnectionClosed::tonode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnConnectionClosed.ToNode)
				return *tonode_;
			}

			inline void OnConnectionClosed::set_tonode(const ::std::string& value) {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				tonode_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnConnectionClosed.ToNode)
			}

			inline void OnConnectionClosed::set_tonode(const char* value) {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				tonode_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnConnectionClosed.ToNode)
			}

			inline void OnConnectionClosed::set_tonode(const char* value, size_t size) {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				tonode_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnConnectionClosed.ToNode)
			}

			inline ::std::string* OnConnectionClosed::mutable_tonode() {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnConnectionClosed.ToNode)
				return tonode_;
			}

			inline ::std::string* OnConnectionClosed::release_tonode() {
				clear_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = tonode_;
					tonode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnConnectionClosed::set_allocated_tonode(::std::string* tonode) {
				if(tonode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete tonode_;
				}
				if(tonode) {
					set_has_tonode();
					tonode_ = tonode;
				} else {
					clear_has_tonode();
					tonode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnConnectionClosed.ToNode)
			}

			// -------------------------------------------------------------------

			// OnConnectionEstablished

			// optional string FromNode = 1;
			inline bool OnConnectionEstablished::has_fromnode() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnConnectionEstablished::set_has_fromnode() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnConnectionEstablished::clear_has_fromnode() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnConnectionEstablished::clear_fromnode() {
				if(fromnode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_->clear();
				}
				clear_has_fromnode();
			}

			inline const ::std::string& OnConnectionEstablished::fromnode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnConnectionEstablished.FromNode)
				return *fromnode_;
			}

			inline void OnConnectionEstablished::set_fromnode(const ::std::string& value) {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				fromnode_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnConnectionEstablished.FromNode)
			}

			inline void OnConnectionEstablished::set_fromnode(const char* value) {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				fromnode_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnConnectionEstablished.FromNode)
			}

			inline void OnConnectionEstablished::set_fromnode(const char* value, size_t size) {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				fromnode_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnConnectionEstablished.FromNode)
			}

			inline ::std::string* OnConnectionEstablished::mutable_fromnode() {
				set_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					fromnode_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnConnectionEstablished.FromNode)
				return fromnode_;
			}

			inline ::std::string* OnConnectionEstablished::release_fromnode() {
				clear_has_fromnode();
				if(fromnode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = fromnode_;
					fromnode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnConnectionEstablished::set_allocated_fromnode(::std::string* fromnode) {
				if(fromnode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete fromnode_;
				}
				if(fromnode) {
					set_has_fromnode();
					fromnode_ = fromnode;
				} else {
					clear_has_fromnode();
					fromnode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnConnectionEstablished.FromNode)
			}

			// optional string ToNode = 2;
			inline bool OnConnectionEstablished::has_tonode() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnConnectionEstablished::set_has_tonode() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnConnectionEstablished::clear_has_tonode() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnConnectionEstablished::clear_tonode() {
				if(tonode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_->clear();
				}
				clear_has_tonode();
			}

			inline const ::std::string& OnConnectionEstablished::tonode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnConnectionEstablished.ToNode)
				return *tonode_;
			}

			inline void OnConnectionEstablished::set_tonode(const ::std::string& value) {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				tonode_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnConnectionEstablished.ToNode)
			}

			inline void OnConnectionEstablished::set_tonode(const char* value) {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				tonode_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnConnectionEstablished.ToNode)
			}

			inline void OnConnectionEstablished::set_tonode(const char* value, size_t size) {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				tonode_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnConnectionEstablished.ToNode)
			}

			inline ::std::string* OnConnectionEstablished::mutable_tonode() {
				set_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					tonode_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnConnectionEstablished.ToNode)
				return tonode_;
			}

			inline ::std::string* OnConnectionEstablished::release_tonode() {
				clear_has_tonode();
				if(tonode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = tonode_;
					tonode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnConnectionEstablished::set_allocated_tonode(::std::string* tonode) {
				if(tonode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete tonode_;
				}
				if(tonode) {
					set_has_tonode();
					tonode_ = tonode;
				} else {
					clear_has_tonode();
					tonode_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnConnectionEstablished.ToNode)
			}

			// -------------------------------------------------------------------

			// OnNodeAdvertisedTopic

			// optional string Node = 1;
			inline bool OnNodeAdvertisedTopic::has_node() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnNodeAdvertisedTopic::set_has_node() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnNodeAdvertisedTopic::clear_has_node() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnNodeAdvertisedTopic::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& OnNodeAdvertisedTopic::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Node)
				return *node_;
			}

			inline void OnNodeAdvertisedTopic::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Node)
			}

			inline void OnNodeAdvertisedTopic::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Node)
			}

			inline void OnNodeAdvertisedTopic::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Node)
			}

			inline ::std::string* OnNodeAdvertisedTopic::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Node)
				return node_;
			}

			inline ::std::string* OnNodeAdvertisedTopic::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeAdvertisedTopic::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Node)
			}

			// optional string Pattern = 2;
			inline bool OnNodeAdvertisedTopic::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnNodeAdvertisedTopic::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnNodeAdvertisedTopic::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnNodeAdvertisedTopic::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& OnNodeAdvertisedTopic::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Pattern)
				return *pattern_;
			}

			inline void OnNodeAdvertisedTopic::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Pattern)
			}

			inline void OnNodeAdvertisedTopic::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Pattern)
			}

			inline void OnNodeAdvertisedTopic::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Pattern)
			}

			inline ::std::string* OnNodeAdvertisedTopic::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Pattern)
				return pattern_;
			}

			inline ::std::string* OnNodeAdvertisedTopic::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeAdvertisedTopic::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Pattern)
			}

			// optional string Topic = 3;
			inline bool OnNodeAdvertisedTopic::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OnNodeAdvertisedTopic::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OnNodeAdvertisedTopic::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OnNodeAdvertisedTopic::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& OnNodeAdvertisedTopic::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Topic)
				return *topic_;
			}

			inline void OnNodeAdvertisedTopic::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Topic)
			}

			inline void OnNodeAdvertisedTopic::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Topic)
			}

			inline void OnNodeAdvertisedTopic::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Topic)
			}

			inline ::std::string* OnNodeAdvertisedTopic::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Topic)
				return topic_;
			}

			inline ::std::string* OnNodeAdvertisedTopic::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeAdvertisedTopic::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeAdvertisedTopic.Topic)
			}

			// -------------------------------------------------------------------

			// OnNodeRejectedTopic

			// optional string Node = 1;
			inline bool OnNodeRejectedTopic::has_node() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnNodeRejectedTopic::set_has_node() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnNodeRejectedTopic::clear_has_node() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnNodeRejectedTopic::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& OnNodeRejectedTopic::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Node)
				return *node_;
			}

			inline void OnNodeRejectedTopic::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Node)
			}

			inline void OnNodeRejectedTopic::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Node)
			}

			inline void OnNodeRejectedTopic::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Node)
			}

			inline ::std::string* OnNodeRejectedTopic::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Node)
				return node_;
			}

			inline ::std::string* OnNodeRejectedTopic::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeRejectedTopic::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Node)
			}

			// optional string Pattern = 2;
			inline bool OnNodeRejectedTopic::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnNodeRejectedTopic::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnNodeRejectedTopic::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnNodeRejectedTopic::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& OnNodeRejectedTopic::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Pattern)
				return *pattern_;
			}

			inline void OnNodeRejectedTopic::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Pattern)
			}

			inline void OnNodeRejectedTopic::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Pattern)
			}

			inline void OnNodeRejectedTopic::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Pattern)
			}

			inline ::std::string* OnNodeRejectedTopic::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Pattern)
				return pattern_;
			}

			inline ::std::string* OnNodeRejectedTopic::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeRejectedTopic::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Pattern)
			}

			// optional string Topic = 3;
			inline bool OnNodeRejectedTopic::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OnNodeRejectedTopic::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OnNodeRejectedTopic::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OnNodeRejectedTopic::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& OnNodeRejectedTopic::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Topic)
				return *topic_;
			}

			inline void OnNodeRejectedTopic::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Topic)
			}

			inline void OnNodeRejectedTopic::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Topic)
			}

			inline void OnNodeRejectedTopic::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Topic)
			}

			inline ::std::string* OnNodeRejectedTopic::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Topic)
				return topic_;
			}

			inline ::std::string* OnNodeRejectedTopic::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeRejectedTopic::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeRejectedTopic.Topic)
			}

			// -------------------------------------------------------------------

			// OnNodeSubscribedToTopic

			// optional string Node = 1;
			inline bool OnNodeSubscribedToTopic::has_node() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnNodeSubscribedToTopic::set_has_node() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnNodeSubscribedToTopic::clear_has_node() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnNodeSubscribedToTopic::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& OnNodeSubscribedToTopic::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Node)
				return *node_;
			}

			inline void OnNodeSubscribedToTopic::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Node)
			}

			inline void OnNodeSubscribedToTopic::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Node)
			}

			inline void OnNodeSubscribedToTopic::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Node)
			}

			inline ::std::string* OnNodeSubscribedToTopic::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Node)
				return node_;
			}

			inline ::std::string* OnNodeSubscribedToTopic::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeSubscribedToTopic::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Node)
			}

			// optional string Pattern = 2;
			inline bool OnNodeSubscribedToTopic::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnNodeSubscribedToTopic::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnNodeSubscribedToTopic::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnNodeSubscribedToTopic::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& OnNodeSubscribedToTopic::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Pattern)
				return *pattern_;
			}

			inline void OnNodeSubscribedToTopic::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Pattern)
			}

			inline void OnNodeSubscribedToTopic::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Pattern)
			}

			inline void OnNodeSubscribedToTopic::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Pattern)
			}

			inline ::std::string* OnNodeSubscribedToTopic::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Pattern)
				return pattern_;
			}

			inline ::std::string* OnNodeSubscribedToTopic::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeSubscribedToTopic::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Pattern)
			}

			// optional string Topic = 3;
			inline bool OnNodeSubscribedToTopic::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OnNodeSubscribedToTopic::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OnNodeSubscribedToTopic::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OnNodeSubscribedToTopic::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& OnNodeSubscribedToTopic::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Topic)
				return *topic_;
			}

			inline void OnNodeSubscribedToTopic::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Topic)
			}

			inline void OnNodeSubscribedToTopic::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Topic)
			}

			inline void OnNodeSubscribedToTopic::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Topic)
			}

			inline ::std::string* OnNodeSubscribedToTopic::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Topic)
				return topic_;
			}

			inline ::std::string* OnNodeSubscribedToTopic::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeSubscribedToTopic::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeSubscribedToTopic.Topic)
			}

			// -------------------------------------------------------------------

			// OnNodeUnavaliable

			// optional string Node = 1;
			inline bool OnNodeUnavaliable::has_node() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnNodeUnavaliable::set_has_node() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnNodeUnavaliable::clear_has_node() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnNodeUnavaliable::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& OnNodeUnavaliable::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeUnavaliable.Node)
				return *node_;
			}

			inline void OnNodeUnavaliable::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeUnavaliable.Node)
			}

			inline void OnNodeUnavaliable::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeUnavaliable.Node)
			}

			inline void OnNodeUnavaliable::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeUnavaliable.Node)
			}

			inline ::std::string* OnNodeUnavaliable::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeUnavaliable.Node)
				return node_;
			}

			inline ::std::string* OnNodeUnavaliable::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeUnavaliable::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeUnavaliable.Node)
			}

			// optional string Pattern = 2;
			inline bool OnNodeUnavaliable::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnNodeUnavaliable::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnNodeUnavaliable::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnNodeUnavaliable::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& OnNodeUnavaliable::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeUnavaliable.Pattern)
				return *pattern_;
			}

			inline void OnNodeUnavaliable::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeUnavaliable.Pattern)
			}

			inline void OnNodeUnavaliable::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeUnavaliable.Pattern)
			}

			inline void OnNodeUnavaliable::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeUnavaliable.Pattern)
			}

			inline ::std::string* OnNodeUnavaliable::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeUnavaliable.Pattern)
				return pattern_;
			}

			inline ::std::string* OnNodeUnavaliable::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeUnavaliable::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeUnavaliable.Pattern)
			}

			// optional string Topic = 3;
			inline bool OnNodeUnavaliable::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OnNodeUnavaliable::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OnNodeUnavaliable::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OnNodeUnavaliable::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& OnNodeUnavaliable::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeUnavaliable.Topic)
				return *topic_;
			}

			inline void OnNodeUnavaliable::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeUnavaliable.Topic)
			}

			inline void OnNodeUnavaliable::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeUnavaliable.Topic)
			}

			inline void OnNodeUnavaliable::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeUnavaliable.Topic)
			}

			inline ::std::string* OnNodeUnavaliable::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeUnavaliable.Topic)
				return topic_;
			}

			inline ::std::string* OnNodeUnavaliable::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeUnavaliable::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeUnavaliable.Topic)
			}

			// -------------------------------------------------------------------

			// OnNodeUnsubscribedFromTopic

			// optional string Node = 1;
			inline bool OnNodeUnsubscribedFromTopic::has_node() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OnNodeUnsubscribedFromTopic::set_has_node() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OnNodeUnsubscribedFromTopic::clear_has_node() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OnNodeUnsubscribedFromTopic::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& OnNodeUnsubscribedFromTopic::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Node)
				return *node_;
			}

			inline void OnNodeUnsubscribedFromTopic::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Node)
			}

			inline void OnNodeUnsubscribedFromTopic::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Node)
			}

			inline void OnNodeUnsubscribedFromTopic::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Node)
			}

			inline ::std::string* OnNodeUnsubscribedFromTopic::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Node)
				return node_;
			}

			inline ::std::string* OnNodeUnsubscribedFromTopic::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeUnsubscribedFromTopic::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Node)
			}

			// optional string Pattern = 2;
			inline bool OnNodeUnsubscribedFromTopic::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OnNodeUnsubscribedFromTopic::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OnNodeUnsubscribedFromTopic::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OnNodeUnsubscribedFromTopic::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& OnNodeUnsubscribedFromTopic::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Pattern)
				return *pattern_;
			}

			inline void OnNodeUnsubscribedFromTopic::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Pattern)
			}

			inline void OnNodeUnsubscribedFromTopic::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Pattern)
			}

			inline void OnNodeUnsubscribedFromTopic::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Pattern)
			}

			inline ::std::string* OnNodeUnsubscribedFromTopic::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Pattern)
				return pattern_;
			}

			inline ::std::string* OnNodeUnsubscribedFromTopic::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeUnsubscribedFromTopic::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Pattern)
			}

			// optional string Topic = 3;
			inline bool OnNodeUnsubscribedFromTopic::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OnNodeUnsubscribedFromTopic::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OnNodeUnsubscribedFromTopic::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OnNodeUnsubscribedFromTopic::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& OnNodeUnsubscribedFromTopic::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Topic)
				return *topic_;
			}

			inline void OnNodeUnsubscribedFromTopic::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Topic)
			}

			inline void OnNodeUnsubscribedFromTopic::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Topic)
			}

			inline void OnNodeUnsubscribedFromTopic::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Topic)
			}

			inline ::std::string* OnNodeUnsubscribedFromTopic::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Topic)
				return topic_;
			}

			inline ::std::string* OnNodeUnsubscribedFromTopic::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void OnNodeUnsubscribedFromTopic::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OnNodeUnsubscribedFromTopic.Topic)
			}

			// -------------------------------------------------------------------

			// OutgoingEvent

			// optional .MQCloud.Internal.Protocol.OutgoingEventType TypeCode = 1 [default = OutgoingEventTypeAdvertizeTopic];
			inline bool OutgoingEvent::has_typecode() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OutgoingEvent::set_has_typecode() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OutgoingEvent::clear_has_typecode() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OutgoingEvent::clear_typecode() {
				typecode_ = 0;
				clear_has_typecode();
			}

			inline ::MQCloud::Internal::Protocol::OutgoingEventType OutgoingEvent::typecode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.TypeCode)
				return static_cast<::MQCloud::Internal::Protocol::OutgoingEventType>(typecode_);
			}

			inline void OutgoingEvent::set_typecode(::MQCloud::Internal::Protocol::OutgoingEventType value) {
				assert(::MQCloud::Internal::Protocol::OutgoingEventType_IsValid(value));
				set_has_typecode();
				typecode_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OutgoingEvent.TypeCode)
			}

			// optional .MQCloud.Internal.Protocol.AdvertizeTopic AdvertizeTopic = 2;
			inline bool OutgoingEvent::has_advertizetopic() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OutgoingEvent::set_has_advertizetopic() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OutgoingEvent::clear_has_advertizetopic() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OutgoingEvent::clear_advertizetopic() {
				if(advertizetopic_ != NULL)
					advertizetopic_->::MQCloud::Internal::Protocol::AdvertizeTopic::Clear();
				clear_has_advertizetopic();
			}

			inline const ::MQCloud::Internal::Protocol::AdvertizeTopic& OutgoingEvent::advertizetopic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.AdvertizeTopic)
				return advertizetopic_ != NULL ? *advertizetopic_ : *default_instance_->advertizetopic_;
			}

			inline ::MQCloud::Internal::Protocol::AdvertizeTopic* OutgoingEvent::mutable_advertizetopic() {
				set_has_advertizetopic();
				if(advertizetopic_ == NULL)
					advertizetopic_ = new ::MQCloud::Internal::Protocol::AdvertizeTopic;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingEvent.AdvertizeTopic)
				return advertizetopic_;
			}

			inline ::MQCloud::Internal::Protocol::AdvertizeTopic* OutgoingEvent::release_advertizetopic() {
				clear_has_advertizetopic();
				::MQCloud::Internal::Protocol::AdvertizeTopic* temp = advertizetopic_;
				advertizetopic_ = NULL;
				return temp;
			}

			inline void OutgoingEvent::set_allocated_advertizetopic(::MQCloud::Internal::Protocol::AdvertizeTopic* advertizetopic) {
				delete advertizetopic_;
				advertizetopic_ = advertizetopic;
				if(advertizetopic) {
					set_has_advertizetopic();
				} else {
					clear_has_advertizetopic();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingEvent.AdvertizeTopic)
			}

			// optional .MQCloud.Internal.Protocol.Disconnect Disconnect = 3;
			inline bool OutgoingEvent::has_disconnect() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OutgoingEvent::set_has_disconnect() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OutgoingEvent::clear_has_disconnect() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OutgoingEvent::clear_disconnect() {
				if(disconnect_ != NULL)
					disconnect_->::MQCloud::Internal::Protocol::Disconnect::Clear();
				clear_has_disconnect();
			}

			inline const ::MQCloud::Internal::Protocol::Disconnect& OutgoingEvent::disconnect() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.Disconnect)
				return disconnect_ != NULL ? *disconnect_ : *default_instance_->disconnect_;
			}

			inline ::MQCloud::Internal::Protocol::Disconnect* OutgoingEvent::mutable_disconnect() {
				set_has_disconnect();
				if(disconnect_ == NULL)
					disconnect_ = new ::MQCloud::Internal::Protocol::Disconnect;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingEvent.Disconnect)
				return disconnect_;
			}

			inline ::MQCloud::Internal::Protocol::Disconnect* OutgoingEvent::release_disconnect() {
				clear_has_disconnect();
				::MQCloud::Internal::Protocol::Disconnect* temp = disconnect_;
				disconnect_ = NULL;
				return temp;
			}

			inline void OutgoingEvent::set_allocated_disconnect(::MQCloud::Internal::Protocol::Disconnect* disconnect) {
				delete disconnect_;
				disconnect_ = disconnect;
				if(disconnect) {
					set_has_disconnect();
				} else {
					clear_has_disconnect();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingEvent.Disconnect)
			}

			// optional .MQCloud.Internal.Protocol.RejectTopic RejectTopic = 4;
			inline bool OutgoingEvent::has_rejecttopic() const {
				return (_has_bits_[0] & 0x00000008u) != 0;
			}

			inline void OutgoingEvent::set_has_rejecttopic() {
				_has_bits_[0] |= 0x00000008u;
			}

			inline void OutgoingEvent::clear_has_rejecttopic() {
				_has_bits_[0] &= ~0x00000008u;
			}

			inline void OutgoingEvent::clear_rejecttopic() {
				if(rejecttopic_ != NULL)
					rejecttopic_->::MQCloud::Internal::Protocol::RejectTopic::Clear();
				clear_has_rejecttopic();
			}

			inline const ::MQCloud::Internal::Protocol::RejectTopic& OutgoingEvent::rejecttopic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.RejectTopic)
				return rejecttopic_ != NULL ? *rejecttopic_ : *default_instance_->rejecttopic_;
			}

			inline ::MQCloud::Internal::Protocol::RejectTopic* OutgoingEvent::mutable_rejecttopic() {
				set_has_rejecttopic();
				if(rejecttopic_ == NULL)
					rejecttopic_ = new ::MQCloud::Internal::Protocol::RejectTopic;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingEvent.RejectTopic)
				return rejecttopic_;
			}

			inline ::MQCloud::Internal::Protocol::RejectTopic* OutgoingEvent::release_rejecttopic() {
				clear_has_rejecttopic();
				::MQCloud::Internal::Protocol::RejectTopic* temp = rejecttopic_;
				rejecttopic_ = NULL;
				return temp;
			}

			inline void OutgoingEvent::set_allocated_rejecttopic(::MQCloud::Internal::Protocol::RejectTopic* rejecttopic) {
				delete rejecttopic_;
				rejecttopic_ = rejecttopic;
				if(rejecttopic) {
					set_has_rejecttopic();
				} else {
					clear_has_rejecttopic();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingEvent.RejectTopic)
			}

			// optional .MQCloud.Internal.Protocol.ReportNodeUnavaliable ReportNodeUnavaliable = 5;
			inline bool OutgoingEvent::has_reportnodeunavaliable() const {
				return (_has_bits_[0] & 0x00000010u) != 0;
			}

			inline void OutgoingEvent::set_has_reportnodeunavaliable() {
				_has_bits_[0] |= 0x00000010u;
			}

			inline void OutgoingEvent::clear_has_reportnodeunavaliable() {
				_has_bits_[0] &= ~0x00000010u;
			}

			inline void OutgoingEvent::clear_reportnodeunavaliable() {
				if(reportnodeunavaliable_ != NULL)
					reportnodeunavaliable_->::MQCloud::Internal::Protocol::ReportNodeUnavaliable::Clear();
				clear_has_reportnodeunavaliable();
			}

			inline const ::MQCloud::Internal::Protocol::ReportNodeUnavaliable& OutgoingEvent::reportnodeunavaliable() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.ReportNodeUnavaliable)
				return reportnodeunavaliable_ != NULL ? *reportnodeunavaliable_ : *default_instance_->reportnodeunavaliable_;
			}

			inline ::MQCloud::Internal::Protocol::ReportNodeUnavaliable* OutgoingEvent::mutable_reportnodeunavaliable() {
				set_has_reportnodeunavaliable();
				if(reportnodeunavaliable_ == NULL)
					reportnodeunavaliable_ = new ::MQCloud::Internal::Protocol::ReportNodeUnavaliable;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingEvent.ReportNodeUnavaliable)
				return reportnodeunavaliable_;
			}

			inline ::MQCloud::Internal::Protocol::ReportNodeUnavaliable* OutgoingEvent::release_reportnodeunavaliable() {
				clear_has_reportnodeunavaliable();
				::MQCloud::Internal::Protocol::ReportNodeUnavaliable* temp = reportnodeunavaliable_;
				reportnodeunavaliable_ = NULL;
				return temp;
			}

			inline void OutgoingEvent::set_allocated_reportnodeunavaliable(::MQCloud::Internal::Protocol::ReportNodeUnavaliable* reportnodeunavaliable) {
				delete reportnodeunavaliable_;
				reportnodeunavaliable_ = reportnodeunavaliable;
				if(reportnodeunavaliable) {
					set_has_reportnodeunavaliable();
				} else {
					clear_has_reportnodeunavaliable();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingEvent.ReportNodeUnavaliable)
			}

			// optional .MQCloud.Internal.Protocol.Subscribe Subscribe = 6;
			inline bool OutgoingEvent::has_subscribe() const {
				return (_has_bits_[0] & 0x00000020u) != 0;
			}

			inline void OutgoingEvent::set_has_subscribe() {
				_has_bits_[0] |= 0x00000020u;
			}

			inline void OutgoingEvent::clear_has_subscribe() {
				_has_bits_[0] &= ~0x00000020u;
			}

			inline void OutgoingEvent::clear_subscribe() {
				if(subscribe_ != NULL)
					subscribe_->::MQCloud::Internal::Protocol::Subscribe::Clear();
				clear_has_subscribe();
			}

			inline const ::MQCloud::Internal::Protocol::Subscribe& OutgoingEvent::subscribe() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.Subscribe)
				return subscribe_ != NULL ? *subscribe_ : *default_instance_->subscribe_;
			}

			inline ::MQCloud::Internal::Protocol::Subscribe* OutgoingEvent::mutable_subscribe() {
				set_has_subscribe();
				if(subscribe_ == NULL)
					subscribe_ = new ::MQCloud::Internal::Protocol::Subscribe;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingEvent.Subscribe)
				return subscribe_;
			}

			inline ::MQCloud::Internal::Protocol::Subscribe* OutgoingEvent::release_subscribe() {
				clear_has_subscribe();
				::MQCloud::Internal::Protocol::Subscribe* temp = subscribe_;
				subscribe_ = NULL;
				return temp;
			}

			inline void OutgoingEvent::set_allocated_subscribe(::MQCloud::Internal::Protocol::Subscribe* subscribe) {
				delete subscribe_;
				subscribe_ = subscribe;
				if(subscribe) {
					set_has_subscribe();
				} else {
					clear_has_subscribe();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingEvent.Subscribe)
			}

			// optional .MQCloud.Internal.Protocol.UnSubscribe UnSubscribe = 7;
			inline bool OutgoingEvent::has_unsubscribe() const {
				return (_has_bits_[0] & 0x00000040u) != 0;
			}

			inline void OutgoingEvent::set_has_unsubscribe() {
				_has_bits_[0] |= 0x00000040u;
			}

			inline void OutgoingEvent::clear_has_unsubscribe() {
				_has_bits_[0] &= ~0x00000040u;
			}

			inline void OutgoingEvent::clear_unsubscribe() {
				if(unsubscribe_ != NULL)
					unsubscribe_->::MQCloud::Internal::Protocol::UnSubscribe::Clear();
				clear_has_unsubscribe();
			}

			inline const ::MQCloud::Internal::Protocol::UnSubscribe& OutgoingEvent::unsubscribe() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingEvent.UnSubscribe)
				return unsubscribe_ != NULL ? *unsubscribe_ : *default_instance_->unsubscribe_;
			}

			inline ::MQCloud::Internal::Protocol::UnSubscribe* OutgoingEvent::mutable_unsubscribe() {
				set_has_unsubscribe();
				if(unsubscribe_ == NULL)
					unsubscribe_ = new ::MQCloud::Internal::Protocol::UnSubscribe;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingEvent.UnSubscribe)
				return unsubscribe_;
			}

			inline ::MQCloud::Internal::Protocol::UnSubscribe* OutgoingEvent::release_unsubscribe() {
				clear_has_unsubscribe();
				::MQCloud::Internal::Protocol::UnSubscribe* temp = unsubscribe_;
				unsubscribe_ = NULL;
				return temp;
			}

			inline void OutgoingEvent::set_allocated_unsubscribe(::MQCloud::Internal::Protocol::UnSubscribe* unsubscribe) {
				delete unsubscribe_;
				unsubscribe_ = unsubscribe;
				if(unsubscribe) {
					set_has_unsubscribe();
				} else {
					clear_has_unsubscribe();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingEvent.UnSubscribe)
			}

			// -------------------------------------------------------------------

			// OutgoingOperation

			// optional .MQCloud.Internal.Protocol.OutgoingOperationType TypeCode = 1 [default = OutgoingOperationTypeConnectRequest];
			inline bool OutgoingOperation::has_typecode() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void OutgoingOperation::set_has_typecode() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void OutgoingOperation::clear_has_typecode() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void OutgoingOperation::clear_typecode() {
				typecode_ = 0;
				clear_has_typecode();
			}

			inline ::MQCloud::Internal::Protocol::OutgoingOperationType OutgoingOperation::typecode() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingOperation.TypeCode)
				return static_cast<::MQCloud::Internal::Protocol::OutgoingOperationType>(typecode_);
			}

			inline void OutgoingOperation::set_typecode(::MQCloud::Internal::Protocol::OutgoingOperationType value) {
				assert(::MQCloud::Internal::Protocol::OutgoingOperationType_IsValid(value));
				set_has_typecode();
				typecode_ = value;
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.OutgoingOperation.TypeCode)
			}

			// optional .MQCloud.Internal.Protocol.ConnectRequest ConnectRequest = 2;
			inline bool OutgoingOperation::has_connectrequest() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void OutgoingOperation::set_has_connectrequest() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void OutgoingOperation::clear_has_connectrequest() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void OutgoingOperation::clear_connectrequest() {
				if(connectrequest_ != NULL)
					connectrequest_->::MQCloud::Internal::Protocol::ConnectRequest::Clear();
				clear_has_connectrequest();
			}

			inline const ::MQCloud::Internal::Protocol::ConnectRequest& OutgoingOperation::connectrequest() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingOperation.ConnectRequest)
				return connectrequest_ != NULL ? *connectrequest_ : *default_instance_->connectrequest_;
			}

			inline ::MQCloud::Internal::Protocol::ConnectRequest* OutgoingOperation::mutable_connectrequest() {
				set_has_connectrequest();
				if(connectrequest_ == NULL)
					connectrequest_ = new ::MQCloud::Internal::Protocol::ConnectRequest;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingOperation.ConnectRequest)
				return connectrequest_;
			}

			inline ::MQCloud::Internal::Protocol::ConnectRequest* OutgoingOperation::release_connectrequest() {
				clear_has_connectrequest();
				::MQCloud::Internal::Protocol::ConnectRequest* temp = connectrequest_;
				connectrequest_ = NULL;
				return temp;
			}

			inline void OutgoingOperation::set_allocated_connectrequest(::MQCloud::Internal::Protocol::ConnectRequest* connectrequest) {
				delete connectrequest_;
				connectrequest_ = connectrequest;
				if(connectrequest) {
					set_has_connectrequest();
				} else {
					clear_has_connectrequest();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingOperation.ConnectRequest)
			}

			// optional .MQCloud.Internal.Protocol.GetPublisherRequest GetPublisherRequest = 3;
			inline bool OutgoingOperation::has_getpublisherrequest() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void OutgoingOperation::set_has_getpublisherrequest() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void OutgoingOperation::clear_has_getpublisherrequest() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void OutgoingOperation::clear_getpublisherrequest() {
				if(getpublisherrequest_ != NULL)
					getpublisherrequest_->::MQCloud::Internal::Protocol::GetPublisherRequest::Clear();
				clear_has_getpublisherrequest();
			}

			inline const ::MQCloud::Internal::Protocol::GetPublisherRequest& OutgoingOperation::getpublisherrequest() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingOperation.GetPublisherRequest)
				return getpublisherrequest_ != NULL ? *getpublisherrequest_ : *default_instance_->getpublisherrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetPublisherRequest* OutgoingOperation::mutable_getpublisherrequest() {
				set_has_getpublisherrequest();
				if(getpublisherrequest_ == NULL)
					getpublisherrequest_ = new ::MQCloud::Internal::Protocol::GetPublisherRequest;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingOperation.GetPublisherRequest)
				return getpublisherrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetPublisherRequest* OutgoingOperation::release_getpublisherrequest() {
				clear_has_getpublisherrequest();
				::MQCloud::Internal::Protocol::GetPublisherRequest* temp = getpublisherrequest_;
				getpublisherrequest_ = NULL;
				return temp;
			}

			inline void OutgoingOperation::set_allocated_getpublisherrequest(::MQCloud::Internal::Protocol::GetPublisherRequest* getpublisherrequest) {
				delete getpublisherrequest_;
				getpublisherrequest_ = getpublisherrequest;
				if(getpublisherrequest) {
					set_has_getpublisherrequest();
				} else {
					clear_has_getpublisherrequest();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingOperation.GetPublisherRequest)
			}

			// optional .MQCloud.Internal.Protocol.GetAllPublishersRequest GetAllPublishersRequest = 4;
			inline bool OutgoingOperation::has_getallpublishersrequest() const {
				return (_has_bits_[0] & 0x00000008u) != 0;
			}

			inline void OutgoingOperation::set_has_getallpublishersrequest() {
				_has_bits_[0] |= 0x00000008u;
			}

			inline void OutgoingOperation::clear_has_getallpublishersrequest() {
				_has_bits_[0] &= ~0x00000008u;
			}

			inline void OutgoingOperation::clear_getallpublishersrequest() {
				if(getallpublishersrequest_ != NULL)
					getallpublishersrequest_->::MQCloud::Internal::Protocol::GetAllPublishersRequest::Clear();
				clear_has_getallpublishersrequest();
			}

			inline const ::MQCloud::Internal::Protocol::GetAllPublishersRequest& OutgoingOperation::getallpublishersrequest() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingOperation.GetAllPublishersRequest)
				return getallpublishersrequest_ != NULL ? *getallpublishersrequest_ : *default_instance_->getallpublishersrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllPublishersRequest* OutgoingOperation::mutable_getallpublishersrequest() {
				set_has_getallpublishersrequest();
				if(getallpublishersrequest_ == NULL)
					getallpublishersrequest_ = new ::MQCloud::Internal::Protocol::GetAllPublishersRequest;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingOperation.GetAllPublishersRequest)
				return getallpublishersrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllPublishersRequest* OutgoingOperation::release_getallpublishersrequest() {
				clear_has_getallpublishersrequest();
				::MQCloud::Internal::Protocol::GetAllPublishersRequest* temp = getallpublishersrequest_;
				getallpublishersrequest_ = NULL;
				return temp;
			}

			inline void OutgoingOperation::set_allocated_getallpublishersrequest(::MQCloud::Internal::Protocol::GetAllPublishersRequest* getallpublishersrequest) {
				delete getallpublishersrequest_;
				getallpublishersrequest_ = getallpublishersrequest;
				if(getallpublishersrequest) {
					set_has_getallpublishersrequest();
				} else {
					clear_has_getallpublishersrequest();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingOperation.GetAllPublishersRequest)
			}

			// optional .MQCloud.Internal.Protocol.GetSubscriberRequest GetSubscriberRequest = 5;
			inline bool OutgoingOperation::has_getsubscriberrequest() const {
				return (_has_bits_[0] & 0x00000010u) != 0;
			}

			inline void OutgoingOperation::set_has_getsubscriberrequest() {
				_has_bits_[0] |= 0x00000010u;
			}

			inline void OutgoingOperation::clear_has_getsubscriberrequest() {
				_has_bits_[0] &= ~0x00000010u;
			}

			inline void OutgoingOperation::clear_getsubscriberrequest() {
				if(getsubscriberrequest_ != NULL)
					getsubscriberrequest_->::MQCloud::Internal::Protocol::GetSubscriberRequest::Clear();
				clear_has_getsubscriberrequest();
			}

			inline const ::MQCloud::Internal::Protocol::GetSubscriberRequest& OutgoingOperation::getsubscriberrequest() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingOperation.GetSubscriberRequest)
				return getsubscriberrequest_ != NULL ? *getsubscriberrequest_ : *default_instance_->getsubscriberrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetSubscriberRequest* OutgoingOperation::mutable_getsubscriberrequest() {
				set_has_getsubscriberrequest();
				if(getsubscriberrequest_ == NULL)
					getsubscriberrequest_ = new ::MQCloud::Internal::Protocol::GetSubscriberRequest;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingOperation.GetSubscriberRequest)
				return getsubscriberrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetSubscriberRequest* OutgoingOperation::release_getsubscriberrequest() {
				clear_has_getsubscriberrequest();
				::MQCloud::Internal::Protocol::GetSubscriberRequest* temp = getsubscriberrequest_;
				getsubscriberrequest_ = NULL;
				return temp;
			}

			inline void OutgoingOperation::set_allocated_getsubscriberrequest(::MQCloud::Internal::Protocol::GetSubscriberRequest* getsubscriberrequest) {
				delete getsubscriberrequest_;
				getsubscriberrequest_ = getsubscriberrequest;
				if(getsubscriberrequest) {
					set_has_getsubscriberrequest();
				} else {
					clear_has_getsubscriberrequest();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingOperation.GetSubscriberRequest)
			}

			// optional .MQCloud.Internal.Protocol.GetAllSubscribersRequest GetAllSubscribersRequest = 6;
			inline bool OutgoingOperation::has_getallsubscribersrequest() const {
				return (_has_bits_[0] & 0x00000020u) != 0;
			}

			inline void OutgoingOperation::set_has_getallsubscribersrequest() {
				_has_bits_[0] |= 0x00000020u;
			}

			inline void OutgoingOperation::clear_has_getallsubscribersrequest() {
				_has_bits_[0] &= ~0x00000020u;
			}

			inline void OutgoingOperation::clear_getallsubscribersrequest() {
				if(getallsubscribersrequest_ != NULL)
					getallsubscribersrequest_->::MQCloud::Internal::Protocol::GetAllSubscribersRequest::Clear();
				clear_has_getallsubscribersrequest();
			}

			inline const ::MQCloud::Internal::Protocol::GetAllSubscribersRequest& OutgoingOperation::getallsubscribersrequest() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.OutgoingOperation.GetAllSubscribersRequest)
				return getallsubscribersrequest_ != NULL ? *getallsubscribersrequest_ : *default_instance_->getallsubscribersrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllSubscribersRequest* OutgoingOperation::mutable_getallsubscribersrequest() {
				set_has_getallsubscribersrequest();
				if(getallsubscribersrequest_ == NULL)
					getallsubscribersrequest_ = new ::MQCloud::Internal::Protocol::GetAllSubscribersRequest;
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.OutgoingOperation.GetAllSubscribersRequest)
				return getallsubscribersrequest_;
			}

			inline ::MQCloud::Internal::Protocol::GetAllSubscribersRequest* OutgoingOperation::release_getallsubscribersrequest() {
				clear_has_getallsubscribersrequest();
				::MQCloud::Internal::Protocol::GetAllSubscribersRequest* temp = getallsubscribersrequest_;
				getallsubscribersrequest_ = NULL;
				return temp;
			}

			inline void OutgoingOperation::set_allocated_getallsubscribersrequest(::MQCloud::Internal::Protocol::GetAllSubscribersRequest* getallsubscribersrequest) {
				delete getallsubscribersrequest_;
				getallsubscribersrequest_ = getallsubscribersrequest;
				if(getallsubscribersrequest) {
					set_has_getallsubscribersrequest();
				} else {
					clear_has_getallsubscribersrequest();
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.OutgoingOperation.GetAllSubscribersRequest)
			}

			// -------------------------------------------------------------------

			// RejectTopic

			// optional string Pattern = 1;
			inline bool RejectTopic::has_pattern() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void RejectTopic::set_has_pattern() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void RejectTopic::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void RejectTopic::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& RejectTopic::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.RejectTopic.Pattern)
				return *pattern_;
			}

			inline void RejectTopic::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.RejectTopic.Pattern)
			}

			inline void RejectTopic::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.RejectTopic.Pattern)
			}

			inline void RejectTopic::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.RejectTopic.Pattern)
			}

			inline ::std::string* RejectTopic::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.RejectTopic.Pattern)
				return pattern_;
			}

			inline ::std::string* RejectTopic::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void RejectTopic::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.RejectTopic.Pattern)
			}

			// optional string Topic = 2;
			inline bool RejectTopic::has_topic() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void RejectTopic::set_has_topic() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void RejectTopic::clear_has_topic() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void RejectTopic::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& RejectTopic::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.RejectTopic.Topic)
				return *topic_;
			}

			inline void RejectTopic::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.RejectTopic.Topic)
			}

			inline void RejectTopic::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.RejectTopic.Topic)
			}

			inline void RejectTopic::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.RejectTopic.Topic)
			}

			inline ::std::string* RejectTopic::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.RejectTopic.Topic)
				return topic_;
			}

			inline ::std::string* RejectTopic::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void RejectTopic::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.RejectTopic.Topic)
			}

			// -------------------------------------------------------------------

			// ReportNodeUnavaliable

			// optional string Node = 1;
			inline bool ReportNodeUnavaliable::has_node() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void ReportNodeUnavaliable::set_has_node() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void ReportNodeUnavaliable::clear_has_node() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void ReportNodeUnavaliable::clear_node() {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_->clear();
				}
				clear_has_node();
			}

			inline const ::std::string& ReportNodeUnavaliable::node() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Node)
				return *node_;
			}

			inline void ReportNodeUnavaliable::set_node(const ::std::string& value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Node)
			}

			inline void ReportNodeUnavaliable::set_node(const char* value) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Node)
			}

			inline void ReportNodeUnavaliable::set_node(const char* value, size_t size) {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				node_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Node)
			}

			inline ::std::string* ReportNodeUnavaliable::mutable_node() {
				set_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					node_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Node)
				return node_;
			}

			inline ::std::string* ReportNodeUnavaliable::release_node() {
				clear_has_node();
				if(node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = node_;
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void ReportNodeUnavaliable::set_allocated_node(::std::string* node) {
				if(node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete node_;
				}
				if(node) {
					set_has_node();
					node_ = node;
				} else {
					clear_has_node();
					node_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Node)
			}

			// optional string Pattern = 2;
			inline bool ReportNodeUnavaliable::has_pattern() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void ReportNodeUnavaliable::set_has_pattern() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void ReportNodeUnavaliable::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void ReportNodeUnavaliable::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& ReportNodeUnavaliable::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Pattern)
				return *pattern_;
			}

			inline void ReportNodeUnavaliable::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Pattern)
			}

			inline void ReportNodeUnavaliable::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Pattern)
			}

			inline void ReportNodeUnavaliable::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Pattern)
			}

			inline ::std::string* ReportNodeUnavaliable::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Pattern)
				return pattern_;
			}

			inline ::std::string* ReportNodeUnavaliable::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void ReportNodeUnavaliable::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Pattern)
			}

			// optional string Topic = 3;
			inline bool ReportNodeUnavaliable::has_topic() const {
				return (_has_bits_[0] & 0x00000004u) != 0;
			}

			inline void ReportNodeUnavaliable::set_has_topic() {
				_has_bits_[0] |= 0x00000004u;
			}

			inline void ReportNodeUnavaliable::clear_has_topic() {
				_has_bits_[0] &= ~0x00000004u;
			}

			inline void ReportNodeUnavaliable::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& ReportNodeUnavaliable::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Topic)
				return *topic_;
			}

			inline void ReportNodeUnavaliable::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Topic)
			}

			inline void ReportNodeUnavaliable::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Topic)
			}

			inline void ReportNodeUnavaliable::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Topic)
			}

			inline ::std::string* ReportNodeUnavaliable::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Topic)
				return topic_;
			}

			inline ::std::string* ReportNodeUnavaliable::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void ReportNodeUnavaliable::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.ReportNodeUnavaliable.Topic)
			}

			// -------------------------------------------------------------------

			// Subscribe

			// optional string Pattern = 1;
			inline bool Subscribe::has_pattern() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void Subscribe::set_has_pattern() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void Subscribe::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void Subscribe::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& Subscribe::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.Subscribe.Pattern)
				return *pattern_;
			}

			inline void Subscribe::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.Subscribe.Pattern)
			}

			inline void Subscribe::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.Subscribe.Pattern)
			}

			inline void Subscribe::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.Subscribe.Pattern)
			}

			inline ::std::string* Subscribe::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.Subscribe.Pattern)
				return pattern_;
			}

			inline ::std::string* Subscribe::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void Subscribe::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.Subscribe.Pattern)
			}

			// optional string Topic = 2;
			inline bool Subscribe::has_topic() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void Subscribe::set_has_topic() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void Subscribe::clear_has_topic() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void Subscribe::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& Subscribe::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.Subscribe.Topic)
				return *topic_;
			}

			inline void Subscribe::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.Subscribe.Topic)
			}

			inline void Subscribe::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.Subscribe.Topic)
			}

			inline void Subscribe::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.Subscribe.Topic)
			}

			inline ::std::string* Subscribe::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.Subscribe.Topic)
				return topic_;
			}

			inline ::std::string* Subscribe::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void Subscribe::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.Subscribe.Topic)
			}

			// -------------------------------------------------------------------

			// UnSubscribe

			// optional string Pattern = 1;
			inline bool UnSubscribe::has_pattern() const {
				return (_has_bits_[0] & 0x00000001u) != 0;
			}

			inline void UnSubscribe::set_has_pattern() {
				_has_bits_[0] |= 0x00000001u;
			}

			inline void UnSubscribe::clear_has_pattern() {
				_has_bits_[0] &= ~0x00000001u;
			}

			inline void UnSubscribe::clear_pattern() {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_->clear();
				}
				clear_has_pattern();
			}

			inline const ::std::string& UnSubscribe::pattern() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.UnSubscribe.Pattern)
				return *pattern_;
			}

			inline void UnSubscribe::set_pattern(const ::std::string& value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.UnSubscribe.Pattern)
			}

			inline void UnSubscribe::set_pattern(const char* value) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.UnSubscribe.Pattern)
			}

			inline void UnSubscribe::set_pattern(const char* value, size_t size) {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				pattern_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.UnSubscribe.Pattern)
			}

			inline ::std::string* UnSubscribe::mutable_pattern() {
				set_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					pattern_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.UnSubscribe.Pattern)
				return pattern_;
			}

			inline ::std::string* UnSubscribe::release_pattern() {
				clear_has_pattern();
				if(pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = pattern_;
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void UnSubscribe::set_allocated_pattern(::std::string* pattern) {
				if(pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete pattern_;
				}
				if(pattern) {
					set_has_pattern();
					pattern_ = pattern;
				} else {
					clear_has_pattern();
					pattern_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.UnSubscribe.Pattern)
			}

			// optional string Topic = 2;
			inline bool UnSubscribe::has_topic() const {
				return (_has_bits_[0] & 0x00000002u) != 0;
			}

			inline void UnSubscribe::set_has_topic() {
				_has_bits_[0] |= 0x00000002u;
			}

			inline void UnSubscribe::clear_has_topic() {
				_has_bits_[0] &= ~0x00000002u;
			}

			inline void UnSubscribe::clear_topic() {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_->clear();
				}
				clear_has_topic();
			}

			inline const ::std::string& UnSubscribe::topic() const {
				// @@protoc_insertion_point(field_get:MQCloud.Internal.Protocol.UnSubscribe.Topic)
				return *topic_;
			}

			inline void UnSubscribe::set_topic(const ::std::string& value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set:MQCloud.Internal.Protocol.UnSubscribe.Topic)
			}

			inline void UnSubscribe::set_topic(const char* value) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(value);
				// @@protoc_insertion_point(field_set_char:MQCloud.Internal.Protocol.UnSubscribe.Topic)
			}

			inline void UnSubscribe::set_topic(const char* value, size_t size) {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				topic_->assign(reinterpret_cast<const char*>(value), size);
				// @@protoc_insertion_point(field_set_pointer:MQCloud.Internal.Protocol.UnSubscribe.Topic)
			}

			inline ::std::string* UnSubscribe::mutable_topic() {
				set_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					topic_ = new ::std::string;
				}
				// @@protoc_insertion_point(field_mutable:MQCloud.Internal.Protocol.UnSubscribe.Topic)
				return topic_;
			}

			inline ::std::string* UnSubscribe::release_topic() {
				clear_has_topic();
				if(topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					return NULL;
				} else {
					::std::string* temp = topic_;
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
					return temp;
				}
			}

			inline void UnSubscribe::set_allocated_topic(::std::string* topic) {
				if(topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
					delete topic_;
				}
				if(topic) {
					set_has_topic();
					topic_ = topic;
				} else {
					clear_has_topic();
					topic_ = const_cast<::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
				}
				// @@protoc_insertion_point(field_set_allocated:MQCloud.Internal.Protocol.UnSubscribe.Topic)
			}


			// @@protoc_insertion_point(namespace_scope)
		} // namespace Protocol
	} // namespace Internal
} // namespace MQCloud

#ifndef SWIG
namespace google {
	namespace protobuf {
		template<>
		struct is_proto_enum<::MQCloud::Internal::Protocol::IncomingEventType> : ::google::protobuf::internal::true_type {};

		template<>
		inline const EnumDescriptor* GetEnumDescriptor<::MQCloud::Internal::Protocol::IncomingEventType>() {
			return ::MQCloud::Internal::Protocol::IncomingEventType_descriptor();
		}

		template<>
		struct is_proto_enum<::MQCloud::Internal::Protocol::IncomingOperationType> : ::google::protobuf::internal::true_type {};

		template<>
		inline const EnumDescriptor* GetEnumDescriptor<::MQCloud::Internal::Protocol::IncomingOperationType>() {
			return ::MQCloud::Internal::Protocol::IncomingOperationType_descriptor();
		}

		template<>
		struct is_proto_enum<::MQCloud::Internal::Protocol::OutgoingEventType> : ::google::protobuf::internal::true_type {};

		template<>
		inline const EnumDescriptor* GetEnumDescriptor<::MQCloud::Internal::Protocol::OutgoingEventType>() {
			return ::MQCloud::Internal::Protocol::OutgoingEventType_descriptor();
		}

		template<>
		struct is_proto_enum<::MQCloud::Internal::Protocol::OutgoingOperationType> : ::google::protobuf::internal::true_type {};

		template<>
		inline const EnumDescriptor* GetEnumDescriptor<::MQCloud::Internal::Protocol::OutgoingOperationType>() {
			return ::MQCloud::Internal::Protocol::OutgoingOperationType_descriptor();
		}
	} // namespace google
} // namespace protobuf
#endif // SWIG



// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_MQCloud_2eInternal_2eProtocol_2eproto__INCLUDED

