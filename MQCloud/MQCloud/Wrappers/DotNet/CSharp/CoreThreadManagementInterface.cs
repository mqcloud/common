/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MQCloud {

using System;
using System.Runtime.InteropServices;

public class CoreThreadManagementInterface : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CoreThreadManagementInterface(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CoreThreadManagementInterface obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CoreThreadManagementInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MQCloudPINVOKE.delete_CoreThreadManagementInterface(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_f___int CoreGetAllowedThreadPoolMaxSize {
    set {
      MQCloudPINVOKE.CoreThreadManagementInterface_CoreGetAllowedThreadPoolMaxSize_set(swigCPtr, SWIGTYPE_p_f___int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = MQCloudPINVOKE.CoreThreadManagementInterface_CoreGetAllowedThreadPoolMaxSize_get(swigCPtr);
      SWIGTYPE_p_f___int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f___int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_f___int CoreCreateThread {
    set {
      MQCloudPINVOKE.CoreThreadManagementInterface_CoreCreateThread_set(swigCPtr, SWIGTYPE_p_f___int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = MQCloudPINVOKE.CoreThreadManagementInterface_CoreCreateThread_get(swigCPtr);
      SWIGTYPE_p_f___int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f___int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_f_int__void CoreDeleteThread {
    set {
      MQCloudPINVOKE.CoreThreadManagementInterface_CoreDeleteThread_set(swigCPtr, SWIGTYPE_p_f_int__void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = MQCloudPINVOKE.CoreThreadManagementInterface_CoreDeleteThread_get(swigCPtr);
      SWIGTYPE_p_f_int__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_int__void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_f_int_p_f___void_p_f___void__void AddTask {
    set {
      MQCloudPINVOKE.CoreThreadManagementInterface_AddTask_set(swigCPtr, SWIGTYPE_p_f_int_p_f___void_p_f___void__void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = MQCloudPINVOKE.CoreThreadManagementInterface_AddTask_get(swigCPtr);
      SWIGTYPE_p_f_int_p_f___void_p_f___void__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_int_p_f___void_p_f___void__void(cPtr, false);
      return ret;
    } 
  }

  public CoreThreadManagementInterface() : this(MQCloudPINVOKE.new_CoreThreadManagementInterface(), true) {
  }

}

}
