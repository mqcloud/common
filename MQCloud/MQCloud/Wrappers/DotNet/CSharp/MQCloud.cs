/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MQCloud {

using System;
using System.Runtime.InteropServices;

public class MQCloud {
  public static CString NewCString(string data, int dataLength) {
    IntPtr cPtr = MQCloudPINVOKE.NewCString(data, dataLength);
    CString ret = (cPtr == IntPtr.Zero) ? null : new CString(cPtr, false);
    return ret;
  }

  public static void FreeCString(CString arg0) {
    MQCloudPINVOKE.FreeCString(CString.getCPtr(arg0));
  }

  public static Message NewMessage(CString topic, CString data) {
    IntPtr cPtr = MQCloudPINVOKE.NewMessage(CString.getCPtr(topic), CString.getCPtr(data));
    Message ret = (cPtr == IntPtr.Zero) ? null : new Message(cPtr, false);
    return ret;
  }

  public static void FreeMessage(Message msg) {
    MQCloudPINVOKE.FreeMessage(Message.getCPtr(msg));
  }

  public static SWIGTYPE_p_ServiceId GetSenderId(Message msg) {
    IntPtr cPtr = MQCloudPINVOKE.GetSenderId(Message.getCPtr(msg));
    SWIGTYPE_p_ServiceId ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_ServiceId(cPtr, false);
    return ret;
  }

  public static CoreConfiguration CreateContext() {
    IntPtr cPtr = MQCloudPINVOKE.CreateContext();
    CoreConfiguration ret = (cPtr == IntPtr.Zero) ? null : new CoreConfiguration(cPtr, false);
    return ret;
  }

  public static void SetEventsHandler(CoreConfiguration ctx, EventsHandler handler) {
    MQCloudPINVOKE.SetEventsHandler(CoreConfiguration.getCPtr(ctx), EventsHandler.getCPtr(handler));
  }

  public static void SetServiceName(CoreConfiguration ctx, CString name) {
    MQCloudPINVOKE.SetServiceName(CoreConfiguration.getCPtr(ctx), CString.getCPtr(name));
  }

  public static void SetExchengeAdress(CoreConfiguration ctx, CString addr) {
    MQCloudPINVOKE.SetExchengeAdress(CoreConfiguration.getCPtr(ctx), CString.getCPtr(addr));
  }

  public static void Request(CoreConfiguration ctx, Message arg1, SWIGTYPE_p_f_p_q_const__Message__void OnReply) {
    MQCloudPINVOKE.Request(CoreConfiguration.getCPtr(ctx), Message.getCPtr(arg1), SWIGTYPE_p_f_p_q_const__Message__void.getCPtr(OnReply));
  }

  public static void RequestTarget(CoreConfiguration ctx, Message arg1, SWIGTYPE_p_ServiceId target, SWIGTYPE_p_f_p_q_const__Message__void OnReply) {
    MQCloudPINVOKE.RequestTarget(CoreConfiguration.getCPtr(ctx), Message.getCPtr(arg1), SWIGTYPE_p_ServiceId.getCPtr(target), SWIGTYPE_p_f_p_q_const__Message__void.getCPtr(OnReply));
  }

  public static void AdvertizeReplysOnTopic(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__Message__void OnRequest) {
    MQCloudPINVOKE.AdvertizeReplysOnTopic(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__Message__void.getCPtr(OnRequest));
  }

  public static void AdvertizePublishingOnTopic(CoreConfiguration ctx, CString topic) {
    MQCloudPINVOKE.AdvertizePublishingOnTopic(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic));
  }

  public static void PublishMessage(CoreConfiguration ctx, Message arg1) {
    MQCloudPINVOKE.PublishMessage(CoreConfiguration.getCPtr(ctx), Message.getCPtr(arg1));
  }

  public static void Subscribe(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__Message__void OnMessage) {
    MQCloudPINVOKE.Subscribe(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__Message__void.getCPtr(OnMessage));
  }

  public static void RequestMany(CoreConfiguration ctx, int MaxRespondents, int timeout, Message arg3, SWIGTYPE_p_f_p_q_const__Message_int__void OnReplyFromMany) {
    MQCloudPINVOKE.RequestMany(CoreConfiguration.getCPtr(ctx), MaxRespondents, timeout, Message.getCPtr(arg3), SWIGTYPE_p_f_p_q_const__Message_int__void.getCPtr(OnReplyFromMany));
  }

  public static int AddExtensiabiletyEventsHandler(CoreConfiguration ctx, ExtensiabiletyEventsHandler handler) {
    int ret = MQCloudPINVOKE.AddExtensiabiletyEventsHandler(CoreConfiguration.getCPtr(ctx), ExtensiabiletyEventsHandler.getCPtr(handler));
    return ret;
  }

  public static void RemoveExtensiabiletyEventsHandler(CoreConfiguration ctx, int handlerId) {
    MQCloudPINVOKE.RemoveExtensiabiletyEventsHandler(CoreConfiguration.getCPtr(ctx), handlerId);
  }

  public static void AdvertiseTopic(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__CoreMessage__void OnMessage) {
    MQCloudPINVOKE.AdvertiseTopic(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__CoreMessage__void.getCPtr(OnMessage));
  }

  public static void SubscribeToTopic(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__ServiceId_int__void OnSubscribed, SWIGTYPE_p_f_p_Message__void OnMessage) {
    MQCloudPINVOKE.SubscribeToTopic(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__ServiceId_int__void.getCPtr(OnSubscribed), SWIGTYPE_p_f_p_Message__void.getCPtr(OnMessage));
  }

  public static void PublishMessageToAnyNode(CoreConfiguration ctx, CString topic, CoreMessage arg2) {
    MQCloudPINVOKE.PublishMessageToAnyNode(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), CoreMessage.getCPtr(arg2));
    if (MQCloudPINVOKE.SWIGPendingException.Pending) throw MQCloudPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PublishMessageToNode(CoreConfiguration ctx, SWIGTYPE_p_ServiceId node, CoreMessage arg2) {
    MQCloudPINVOKE.PublishMessageToNode(CoreConfiguration.getCPtr(ctx), SWIGTYPE_p_ServiceId.getCPtr(node), CoreMessage.getCPtr(arg2));
    if (MQCloudPINVOKE.SWIGPendingException.Pending) throw MQCloudPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PublishMessageToNodes(CoreConfiguration ctx, SWIGTYPE_p_ServiceId nodes, int nodesCount, CoreMessage arg3) {
    MQCloudPINVOKE.PublishMessageToNodes(CoreConfiguration.getCPtr(ctx), SWIGTYPE_p_ServiceId.getCPtr(nodes), nodesCount, CoreMessage.getCPtr(arg3));
    if (MQCloudPINVOKE.SWIGPendingException.Pending) throw MQCloudPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetAllSubscribedNodes(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__ServiceId_int__void OnResult) {
    MQCloudPINVOKE.GetAllSubscribedNodes(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__ServiceId_int__void.getCPtr(OnResult));
  }

  public static void GetAllPublishingNodes(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__ServiceId_int__void OnResult) {
    MQCloudPINVOKE.GetAllPublishingNodes(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__ServiceId_int__void.getCPtr(OnResult));
  }

  public static int SetGeneralNodeIdSelectionAlgorithm(CoreConfiguration ctx, SWIGTYPE_p_f_p_q_const__CoreMessage__p_ServiceId algorithm) {
    int ret = MQCloudPINVOKE.SetGeneralNodeIdSelectionAlgorithm(CoreConfiguration.getCPtr(ctx), SWIGTYPE_p_f_p_q_const__CoreMessage__p_ServiceId.getCPtr(algorithm));
    return ret;
  }

  public static int SetTopicNodeIdSelectionAlgorithm(CoreConfiguration ctx, CString topic, SWIGTYPE_p_f_p_q_const__CoreMessage__p_ServiceId algorithm) {
    int ret = MQCloudPINVOKE.SetTopicNodeIdSelectionAlgorithm(CoreConfiguration.getCPtr(ctx), CString.getCPtr(topic), SWIGTYPE_p_f_p_q_const__CoreMessage__p_ServiceId.getCPtr(algorithm));
    return ret;
  }

}

}
