/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_MQCloud(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_MQCloud(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_MQCloud(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "MQCloudWrapper.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_CString_data_set(void * jarg1, char * jarg2) {
  CString *arg1 = (CString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (CString *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->data = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->data, (const char *)arg2);
    } else {
      arg1->data = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CString_data_get(void * jarg1) {
  char * jresult ;
  CString *arg1 = (CString *) 0 ;
  char *result = 0 ;
  
  arg1 = (CString *)jarg1; 
  result = (char *) ((arg1)->data);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CString_length_set(void * jarg1, int jarg2) {
  CString *arg1 = (CString *) 0 ;
  int arg2 ;
  
  arg1 = (CString *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CString_length_get(void * jarg1) {
  int jresult ;
  CString *arg1 = (CString *) 0 ;
  int result;
  
  arg1 = (CString *)jarg1; 
  result = (int) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CString() {
  void * jresult ;
  CString *result = 0 ;
  
  result = (CString *)new CString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CString(void * jarg1) {
  CString *arg1 = (CString *) 0 ;
  
  arg1 = (CString *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewCString(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  CString *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (CString *)NewCString(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeCString(void * jarg1) {
  CString *arg1 = (CString *) 0 ;
  
  arg1 = (CString *)jarg1; 
  FreeCString(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_messaageId_set(void * jarg1, int jarg2) {
  Message *arg1 = (Message *) 0 ;
  int arg2 ;
  
  arg1 = (Message *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->messaageId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Message_messaageId_get(void * jarg1) {
  int jresult ;
  Message *arg1 = (Message *) 0 ;
  int result;
  
  arg1 = (Message *)jarg1; 
  result = (int) ((arg1)->messaageId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_topic_set(void * jarg1, void * jarg2) {
  Message *arg1 = (Message *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  
  arg1 = (Message *)jarg1; 
  arg2 = (Topic *)jarg2; 
  if (arg1) (arg1)->topic = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_topic_get(void * jarg1) {
  void * jresult ;
  Message *arg1 = (Message *) 0 ;
  Topic *result = 0 ;
  
  arg1 = (Message *)jarg1; 
  result = (Topic *)& ((arg1)->topic);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_data_set(void * jarg1, void * jarg2) {
  Message *arg1 = (Message *) 0 ;
  CString *arg2 = (CString *) 0 ;
  
  arg1 = (Message *)jarg1; 
  arg2 = (CString *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_data_get(void * jarg1) {
  void * jresult ;
  Message *arg1 = (Message *) 0 ;
  CString *result = 0 ;
  
  arg1 = (Message *)jarg1; 
  result = (CString *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_serviceId_set(void * jarg1, void * jarg2) {
  Message *arg1 = (Message *) 0 ;
  CString *arg2 = (CString *) 0 ;
  
  arg1 = (Message *)jarg1; 
  arg2 = (CString *)jarg2; 
  if (arg1) (arg1)->serviceId = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_serviceId_get(void * jarg1) {
  void * jresult ;
  Message *arg1 = (Message *) 0 ;
  CString *result = 0 ;
  
  arg1 = (Message *)jarg1; 
  result = (CString *)& ((arg1)->serviceId);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message() {
  void * jresult ;
  Message *result = 0 ;
  
  result = (Message *)new Message();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Message(void * jarg1) {
  Message *arg1 = (Message *) 0 ;
  
  arg1 = (Message *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMessage_Message_set(void * jarg1, void * jarg2) {
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  Message *arg2 = (Message *) 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  arg2 = (Message *)jarg2; 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreMessage_Message_get(void * jarg1) {
  void * jresult ;
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  Message *result = 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  result = (Message *)& ((arg1)->Message);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMessage_PatternName_set(void * jarg1, void * jarg2) {
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  CString *arg2 = (CString *) 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  arg2 = (CString *)jarg2; 
  if (arg1) (arg1)->PatternName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreMessage_PatternName_get(void * jarg1) {
  void * jresult ;
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  CString *result = 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  result = (CString *)& ((arg1)->PatternName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreMessage_PatternData_set(void * jarg1, void * jarg2) {
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  CString *arg2 = (CString *) 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  arg2 = (CString *)jarg2; 
  if (arg1) (arg1)->PatternData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreMessage_PatternData_get(void * jarg1) {
  void * jresult ;
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  CString *result = 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  result = (CString *)& ((arg1)->PatternData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreMessage() {
  void * jresult ;
  CoreMessage *result = 0 ;
  
  result = (CoreMessage *)new CoreMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreMessage(void * jarg1) {
  CoreMessage *arg1 = (CoreMessage *) 0 ;
  
  arg1 = (CoreMessage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePublishingSocketInterface_CoreCreatePublishingSocket_set(void * jarg1, void * jarg2) {
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void *(*arg2)() = (void *(*)()) 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  arg2 = (void *(*)())jarg2; 
  if (arg1) (arg1)->CoreCreatePublishingSocket = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CorePublishingSocketInterface_CoreCreatePublishingSocket_get(void * jarg1) {
  void * jresult ;
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void *(*result)() = 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  result = (void *(*)()) ((arg1)->CoreCreatePublishingSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePublishingSocketInterface_CoreBindPublishingSocket_set(void * jarg1, void * jarg2) {
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void (*arg2)(int,CoreNodeAddress const *) = (void (*)(int,CoreNodeAddress const *)) 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  arg2 = (void (*)(int,CoreNodeAddress const *))jarg2; 
  if (arg1) (arg1)->CoreBindPublishingSocket = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CorePublishingSocketInterface_CoreBindPublishingSocket_get(void * jarg1) {
  void * jresult ;
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void (*result)(int,CoreNodeAddress const *) = 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  result = (void (*)(int,CoreNodeAddress const *)) ((arg1)->CoreBindPublishingSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePublishingSocketInterface_CorePublishMessage_set(void * jarg1, void * jarg2) {
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void (*arg2)(int,CoreMessage const *) = (void (*)(int,CoreMessage const *)) 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  arg2 = (void (*)(int,CoreMessage const *))jarg2; 
  if (arg1) (arg1)->CorePublishMessage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CorePublishingSocketInterface_CorePublishMessage_get(void * jarg1) {
  void * jresult ;
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void (*result)(int,CoreMessage const *) = 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  result = (void (*)(int,CoreMessage const *)) ((arg1)->CorePublishMessage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CorePublishingSocketInterface_CoreDeletePublishingSocket_set(void * jarg1, void * jarg2) {
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  arg2 = (void (*)(void *))jarg2; 
  if (arg1) (arg1)->CoreDeletePublishingSocket = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CorePublishingSocketInterface_CoreDeletePublishingSocket_get(void * jarg1) {
  void * jresult ;
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  void (*result)(void *) = 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  result = (void (*)(void *)) ((arg1)->CoreDeletePublishingSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CorePublishingSocketInterface() {
  void * jresult ;
  CorePublishingSocketInterface *result = 0 ;
  
  result = (CorePublishingSocketInterface *)new CorePublishingSocketInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CorePublishingSocketInterface(void * jarg1) {
  CorePublishingSocketInterface *arg1 = (CorePublishingSocketInterface *) 0 ;
  
  arg1 = (CorePublishingSocketInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreSubscriberSocketInterface_CoreCreateSubscribingSocket_set(void * jarg1, void * jarg2) {
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  int (*arg2)(void (*)(CoreMessage const *)) = (int (*)(void (*)(CoreMessage const *))) 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  arg2 = (int (*)(void (*)(CoreMessage const *)))jarg2; 
  if (arg1) (arg1)->CoreCreateSubscribingSocket = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreSubscriberSocketInterface_CoreCreateSubscribingSocket_get(void * jarg1) {
  void * jresult ;
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  int (*result)(void (*)(CoreMessage const *)) = 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  result = (int (*)(void (*)(CoreMessage const *))) ((arg1)->CoreCreateSubscribingSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreSubscriberSocketInterface_CoreConnectSubscribingSocket_set(void * jarg1, void * jarg2) {
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  void (*arg2)(int,CoreNodeAddress const *) = (void (*)(int,CoreNodeAddress const *)) 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  arg2 = (void (*)(int,CoreNodeAddress const *))jarg2; 
  if (arg1) (arg1)->CoreConnectSubscribingSocket = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreSubscriberSocketInterface_CoreConnectSubscribingSocket_get(void * jarg1) {
  void * jresult ;
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  void (*result)(int,CoreNodeAddress const *) = 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  result = (void (*)(int,CoreNodeAddress const *)) ((arg1)->CoreConnectSubscribingSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreSubscriberSocketInterface_CoreDeleteSubscribingSocket_set(void * jarg1, void * jarg2) {
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  void (*arg2)(int) = (void (*)(int)) 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  arg2 = (void (*)(int))jarg2; 
  if (arg1) (arg1)->CoreDeleteSubscribingSocket = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreSubscriberSocketInterface_CoreDeleteSubscribingSocket_get(void * jarg1) {
  void * jresult ;
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  void (*result)(int) = 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  result = (void (*)(int)) ((arg1)->CoreDeleteSubscribingSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreSubscriberSocketInterface() {
  void * jresult ;
  CoreSubscriberSocketInterface *result = 0 ;
  
  result = (CoreSubscriberSocketInterface *)new CoreSubscriberSocketInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreSubscriberSocketInterface(void * jarg1) {
  CoreSubscriberSocketInterface *arg1 = (CoreSubscriberSocketInterface *) 0 ;
  
  arg1 = (CoreSubscriberSocketInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreThreadManagementInterface_CoreGetAllowedThreadPoolMaxSize_set(void * jarg1, void * jarg2) {
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  int (*arg2)() = (int (*)()) 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  arg2 = (int (*)())jarg2; 
  if (arg1) (arg1)->CoreGetAllowedThreadPoolMaxSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreThreadManagementInterface_CoreGetAllowedThreadPoolMaxSize_get(void * jarg1) {
  void * jresult ;
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  int (*result)() = 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  result = (int (*)()) ((arg1)->CoreGetAllowedThreadPoolMaxSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreThreadManagementInterface_CoreCreateThread_set(void * jarg1, void * jarg2) {
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  int (*arg2)() = (int (*)()) 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  arg2 = (int (*)())jarg2; 
  if (arg1) (arg1)->CoreCreateThread = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreThreadManagementInterface_CoreCreateThread_get(void * jarg1) {
  void * jresult ;
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  int (*result)() = 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  result = (int (*)()) ((arg1)->CoreCreateThread);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreThreadManagementInterface_CoreDeleteThread_set(void * jarg1, void * jarg2) {
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  void (*arg2)(int) = (void (*)(int)) 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  arg2 = (void (*)(int))jarg2; 
  if (arg1) (arg1)->CoreDeleteThread = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreThreadManagementInterface_CoreDeleteThread_get(void * jarg1) {
  void * jresult ;
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  void (*result)(int) = 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  result = (void (*)(int)) ((arg1)->CoreDeleteThread);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreThreadManagementInterface_AddTask_set(void * jarg1, void * jarg2) {
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  void (*arg2)(int,void (*)(),void (*)()) = (void (*)(int,void (*)(),void (*)())) 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  arg2 = (void (*)(int,void (*)(),void (*)()))jarg2; 
  if (arg1) (arg1)->AddTask = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreThreadManagementInterface_AddTask_get(void * jarg1) {
  void * jresult ;
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  void (*result)(int,void (*)(),void (*)()) = 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  result = (void (*)(int,void (*)(),void (*)())) ((arg1)->AddTask);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreThreadManagementInterface() {
  void * jresult ;
  CoreThreadManagementInterface *result = 0 ;
  
  result = (CoreThreadManagementInterface *)new CoreThreadManagementInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreThreadManagementInterface(void * jarg1) {
  CoreThreadManagementInterface *arg1 = (CoreThreadManagementInterface *) 0 ;
  
  arg1 = (CoreThreadManagementInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreConfiguration_ThreadingInterface_set(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CoreThreadManagementInterface *arg2 = (CoreThreadManagementInterface *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (CoreThreadManagementInterface *)jarg2; 
  if (arg1) (arg1)->ThreadingInterface = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreConfiguration_ThreadingInterface_get(void * jarg1) {
  void * jresult ;
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CoreThreadManagementInterface *result = 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  result = (CoreThreadManagementInterface *) ((arg1)->ThreadingInterface);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreConfiguration_SubscriberSocketInterface_set(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CoreSubscriberSocketInterface *arg2 = (CoreSubscriberSocketInterface *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (CoreSubscriberSocketInterface *)jarg2; 
  if (arg1) (arg1)->SubscriberSocketInterface = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreConfiguration_SubscriberSocketInterface_get(void * jarg1) {
  void * jresult ;
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CoreSubscriberSocketInterface *result = 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  result = (CoreSubscriberSocketInterface *) ((arg1)->SubscriberSocketInterface);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CoreConfiguration_PublishingSocketInterface_set(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CorePublishingSocketInterface *arg2 = (CorePublishingSocketInterface *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (CorePublishingSocketInterface *)jarg2; 
  if (arg1) (arg1)->PublishingSocketInterface = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CoreConfiguration_PublishingSocketInterface_get(void * jarg1) {
  void * jresult ;
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CorePublishingSocketInterface *result = 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  result = (CorePublishingSocketInterface *) ((arg1)->PublishingSocketInterface);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CoreConfiguration() {
  void * jresult ;
  CoreConfiguration *result = 0 ;
  
  result = (CoreConfiguration *)new CoreConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CoreConfiguration(void * jarg1) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewMessage(void * jarg1, void * jarg2) {
  void * jresult ;
  Topic *arg1 = (Topic *) 0 ;
  CString *arg2 = (CString *) 0 ;
  Message *result = 0 ;
  
  arg1 = (Topic *)jarg1; 
  arg2 = (CString *)jarg2; 
  result = (Message *)NewMessage((CString const *)arg1,(CString const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeMessage(void * jarg1) {
  Message *arg1 = (Message *) 0 ;
  
  arg1 = (Message *)jarg1; 
  FreeMessage(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSenderId(void * jarg1) {
  void * jresult ;
  Message *arg1 = (Message *) 0 ;
  ServiceId *result = 0 ;
  
  arg1 = (Message *)jarg1; 
  result = (ServiceId *)GetSenderId((Message const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventsHandler_OnSendError_set(void * jarg1, void * jarg2) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*arg2)(int,int) = (void (*)(int,int)) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  arg2 = (void (*)(int,int))jarg2; 
  if (arg1) (arg1)->OnSendError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventsHandler_OnSendError_get(void * jarg1) {
  void * jresult ;
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*result)(int,int) = 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  result = (void (*)(int,int)) ((arg1)->OnSendError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventsHandler_OnReadError_set(void * jarg1, void * jarg2) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*arg2)(int) = (void (*)(int)) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  arg2 = (void (*)(int))jarg2; 
  if (arg1) (arg1)->OnReadError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventsHandler_OnReadError_get(void * jarg1) {
  void * jresult ;
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*result)(int) = 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  result = (void (*)(int)) ((arg1)->OnReadError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventsHandler_OnExchangeError_set(void * jarg1, void * jarg2) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*arg2)(int) = (void (*)(int)) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  arg2 = (void (*)(int))jarg2; 
  if (arg1) (arg1)->OnExchangeError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventsHandler_OnExchangeError_get(void * jarg1) {
  void * jresult ;
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*result)(int) = 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  result = (void (*)(int)) ((arg1)->OnExchangeError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventsHandler_OnConnectedToExchange_set(void * jarg1, void * jarg2) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  arg2 = (void (*)())jarg2; 
  if (arg1) (arg1)->OnConnectedToExchange = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventsHandler_OnConnectedToExchange_get(void * jarg1) {
  void * jresult ;
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*result)() = 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  result = (void (*)()) ((arg1)->OnConnectedToExchange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventsHandler_OnServiceRegistred_set(void * jarg1, void * jarg2) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*arg2)(ServiceId *) = (void (*)(ServiceId *)) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  arg2 = (void (*)(ServiceId *))jarg2; 
  if (arg1) (arg1)->OnServiceRegistred = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventsHandler_OnServiceRegistred_get(void * jarg1) {
  void * jresult ;
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*result)(ServiceId *) = 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  result = (void (*)(ServiceId *)) ((arg1)->OnServiceRegistred);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventsHandler_OnNewSubscriber_set(void * jarg1, void * jarg2) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*arg2)(Topic *,ServiceId *) = (void (*)(Topic *,ServiceId *)) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  arg2 = (void (*)(Topic *,ServiceId *))jarg2; 
  if (arg1) (arg1)->OnNewSubscriber = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventsHandler_OnNewSubscriber_get(void * jarg1) {
  void * jresult ;
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  void (*result)(Topic *,ServiceId *) = 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  result = (void (*)(Topic *,ServiceId *)) ((arg1)->OnNewSubscriber);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventsHandler() {
  void * jresult ;
  EventsHandler *result = 0 ;
  
  result = (EventsHandler *)new EventsHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EventsHandler(void * jarg1) {
  EventsHandler *arg1 = (EventsHandler *) 0 ;
  
  arg1 = (EventsHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateContext() {
  void * jresult ;
  CoreConfiguration *result = 0 ;
  
  result = (CoreConfiguration *)CreateContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetEventsHandler(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  EventsHandler *arg2 = (EventsHandler *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (EventsHandler *)jarg2; 
  SetEventsHandler((CoreConfiguration const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetServiceName(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CString *arg2 = (CString *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (CString *)jarg2; 
  SetServiceName((CoreConfiguration const *)arg1,(CString const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetExchengeAdress(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  CoreNodeAddress *arg2 = (CoreNodeAddress *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (CoreNodeAddress *)jarg2; 
  SetExchengeAdress((CoreConfiguration const *)arg1,(CString const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Request(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Message *arg2 = (Message *) 0 ;
  void (*arg3)(Message const *) = (void (*)(Message const *)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Message *)jarg2; 
  arg3 = (void (*)(Message const *))jarg3; 
  Request((CoreConfiguration const *)arg1,(Message const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RequestTarget(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Message *arg2 = (Message *) 0 ;
  ServiceId *arg3 = (ServiceId *) 0 ;
  void (*arg4)(Message const *) = (void (*)(Message const *)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Message *)jarg2; 
  arg3 = (ServiceId *)jarg3; 
  arg4 = (void (*)(Message const *))jarg4; 
  RequestTarget((CoreConfiguration const *)arg1,(Message const *)arg2,(ServiceId const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AdvertizeReplysOnTopic(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  void (*arg3)(Message const *) = (void (*)(Message const *)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (void (*)(Message const *))jarg3; 
  AdvertizeReplysOnTopic((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AdvertizePublishingOnTopic(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  AdvertizePublishingOnTopic((CoreConfiguration const *)arg1,(CString const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PublishMessage(void * jarg1, void * jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Message *arg2 = (Message *) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Message *)jarg2; 
  PublishMessage((CoreConfiguration const *)arg1,(Message const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Subscribe(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  void (*arg3)(Message const *) = (void (*)(Message const *)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (void (*)(Message const *))jarg3; 
  Subscribe((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RequestMany(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  Message *arg4 = (Message *) 0 ;
  void (*arg5)(Message const *,int) = (void (*)(Message const *,int)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Message *)jarg4; 
  arg5 = (void (*)(Message const *,int))jarg5; 
  RequestMany((CoreConfiguration const *)arg1,arg2,arg3,(Message const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtensiabiletyEventsHandler_OnNodeConnectedToOther_set(void * jarg1, void * jarg2) {
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  void (*arg2)(ServiceId const *) = (void (*)(ServiceId const *)) 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  arg2 = (void (*)(ServiceId const *))jarg2; 
  if (arg1) (arg1)->OnNodeConnectedToOther = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtensiabiletyEventsHandler_OnNodeConnectedToOther_get(void * jarg1) {
  void * jresult ;
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  void (*result)(ServiceId const *) = 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  result = (void (*)(ServiceId const *)) ((arg1)->OnNodeConnectedToOther);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtensiabiletyEventsHandler_OnNodeConnectedToThis_set(void * jarg1, void * jarg2) {
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  void (*arg2)(ServiceId const *) = (void (*)(ServiceId const *)) 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  arg2 = (void (*)(ServiceId const *))jarg2; 
  if (arg1) (arg1)->OnNodeConnectedToThis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtensiabiletyEventsHandler_OnNodeConnectedToThis_get(void * jarg1) {
  void * jresult ;
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  void (*result)(ServiceId const *) = 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  result = (void (*)(ServiceId const *)) ((arg1)->OnNodeConnectedToThis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtensiabiletyEventsHandler_OnMessage_set(void * jarg1, void * jarg2) {
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  void (*arg2)(CoreMessage const *) = (void (*)(CoreMessage const *)) 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  arg2 = (void (*)(CoreMessage const *))jarg2; 
  if (arg1) (arg1)->OnMessage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtensiabiletyEventsHandler_OnMessage_get(void * jarg1) {
  void * jresult ;
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  void (*result)(CoreMessage const *) = 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  result = (void (*)(CoreMessage const *)) ((arg1)->OnMessage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtensiabiletyEventsHandler() {
  void * jresult ;
  ExtensiabiletyEventsHandler *result = 0 ;
  
  result = (ExtensiabiletyEventsHandler *)new ExtensiabiletyEventsHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExtensiabiletyEventsHandler(void * jarg1) {
  ExtensiabiletyEventsHandler *arg1 = (ExtensiabiletyEventsHandler *) 0 ;
  
  arg1 = (ExtensiabiletyEventsHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddExtensiabiletyEventsHandler(void * jarg1, void * jarg2) {
  int jresult ;
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  ExtensiabiletyEventsHandler *arg2 = (ExtensiabiletyEventsHandler *) 0 ;
  int result;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (ExtensiabiletyEventsHandler *)jarg2; 
  result = (int)AddExtensiabiletyEventsHandler((CoreConfiguration const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveExtensiabiletyEventsHandler(void * jarg1, int jarg2) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  RemoveExtensiabiletyEventsHandler((CoreConfiguration const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AdvertiseTopic(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  void (*arg3)(CoreMessage const *) = (void (*)(CoreMessage const *)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (void (*)(CoreMessage const *))jarg3; 
  AdvertiseTopic((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubscribeToTopic(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  void (*arg3)(ServiceId const *,int) = (void (*)(ServiceId const *,int)) 0 ;
  void (*arg4)(Message *) = (void (*)(Message *)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (void (*)(ServiceId const *,int))jarg3; 
  arg4 = (void (*)(Message *))jarg4; 
  SubscribeToTopic((CoreConfiguration const *)arg1,(CString const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PublishMessageToAnyNode(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  CoreMessage arg3 ;
  CoreMessage const *argp3 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  argp3 = (CoreMessage *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CoreMessage const", 0);
    return ;
  }
  arg3 = *argp3; 
  PublishMessageToAnyNode((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PublishMessageToNode(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  ServiceId *arg2 = (ServiceId *) 0 ;
  CoreMessage arg3 ;
  CoreMessage const *argp3 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (ServiceId *)jarg2; 
  argp3 = (CoreMessage *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CoreMessage const", 0);
    return ;
  }
  arg3 = *argp3; 
  PublishMessageToNode((CoreConfiguration const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PublishMessageToNodes(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  ServiceId *arg2 = (ServiceId *) 0 ;
  int arg3 ;
  CoreMessage arg4 ;
  CoreMessage const *argp4 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (ServiceId *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (CoreMessage *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CoreMessage const", 0);
    return ;
  }
  arg4 = *argp4; 
  PublishMessageToNodes((CoreConfiguration const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetAllSubscribedNodes(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  void (*arg3)(ServiceId const *,int) = (void (*)(ServiceId const *,int)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (void (*)(ServiceId const *,int))jarg3; 
  GetAllSubscribedNodes((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetAllPublishingNodes(void * jarg1, void * jarg2, void * jarg3) {
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  void (*arg3)(ServiceId const *,int) = (void (*)(ServiceId const *,int)) 0 ;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (void (*)(ServiceId const *,int))jarg3; 
  GetAllPublishingNodes((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGeneralNodeIdSelectionAlgorithm(void * jarg1, void * jarg2) {
  int jresult ;
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  ServiceId *(*arg2)(CoreMessage const *) = (ServiceId *(*)(CoreMessage const *)) 0 ;
  int result;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (ServiceId *(*)(CoreMessage const *))jarg2; 
  result = (int)SetGeneralNodeIdSelectionAlgorithm((CoreConfiguration const *)arg1,(ServiceId const *(*)(CoreMessage const *))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetTopicNodeIdSelectionAlgorithm(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CoreConfiguration *arg1 = (CoreConfiguration *) 0 ;
  Topic *arg2 = (Topic *) 0 ;
  ServiceId *(*arg3)(CoreMessage const *) = (ServiceId *(*)(CoreMessage const *)) 0 ;
  int result;
  
  arg1 = (CoreConfiguration *)jarg1; 
  arg2 = (Topic *)jarg2; 
  arg3 = (ServiceId *(*)(CoreMessage const *))jarg3; 
  result = (int)SetTopicNodeIdSelectionAlgorithm((CoreConfiguration const *)arg1,(CString const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

