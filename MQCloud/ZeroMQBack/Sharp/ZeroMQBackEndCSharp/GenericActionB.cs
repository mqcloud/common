//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace ZeroMQBackEnd {
    public class GenericActionB : IDisposable {
        public delegate void SwigDelegateGenericActionB_0(IntPtr r1);

        private static readonly Type[] swigMethodTypes0 = {typeof (B)};
        protected bool swigCMemOwn;
        private HandleRef swigCPtr;
        private SwigDelegateGenericActionB_0 swigDelegate0;

        internal GenericActionB(IntPtr cPtr, bool cMemoryOwn) {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new HandleRef(this, cPtr);
        }

        public GenericActionB() : this(ZeroMQBackEndPINVOKE.new_GenericActionB(), true) {
            SwigDirectorConnect();
        }

        public virtual void Dispose() {
            lock (this) {
                if (swigCPtr.Handle != IntPtr.Zero) {
                    if (swigCMemOwn) {
                        swigCMemOwn = false;
                        ZeroMQBackEndPINVOKE.delete_GenericActionB(swigCPtr);
                    }
                    swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        internal static HandleRef getCPtr(GenericActionB obj) {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
        }

        ~GenericActionB() {
            Dispose();
        }

        public virtual void OnAction(B r1) {
            if (SwigDerivedClassHasMethod("OnAction", swigMethodTypes0)) {
                ZeroMQBackEndPINVOKE.GenericActionB_OnActionSwigExplicitGenericActionB(swigCPtr, B.getCPtr(r1));
            }
            else {
                ZeroMQBackEndPINVOKE.GenericActionB_OnAction(swigCPtr, B.getCPtr(r1));
            }
            if (ZeroMQBackEndPINVOKE.SWIGPendingException.Pending) {
                throw ZeroMQBackEndPINVOKE.SWIGPendingException.Retrieve();
            }
        }

        private void SwigDirectorConnect() {
            if (SwigDerivedClassHasMethod("OnAction", swigMethodTypes0)) {
                swigDelegate0 = SwigDirectorOnAction;
            }
            ZeroMQBackEndPINVOKE.GenericActionB_director_connect(swigCPtr, swigDelegate0);
        }

        private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
            var methodInfo = GetType()
                .GetMethod(methodName, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null,
                    methodTypes, null);
            var hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof (GenericActionB));
            return hasDerivedMethod;
        }

        private void SwigDirectorOnAction(IntPtr r1) {
            OnAction(new B(r1, false));
        }
    }
}