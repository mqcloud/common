// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MQCloud {
namespace BackEnd {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, patterndata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, errordata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  MessageState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\030MQCloud.BackEnd.Protoco"
    "l\"\265\001\n\007Message\022\n\n\002id\030\001 \002(\005\022\017\n\007pattern\030\002 \002"
    "(\t\022\r\n\005topic\030\003 \002(\t\022\021\n\tserviceId\030\004 \002(\t\0225\n\005"
    "state\030\005 \002(\0162&.MQCloud.BackEnd.Protocol.M"
    "essageState\022\023\n\013patternData\030\006 \002(\014\022\021\n\terro"
    "rData\030\007 \002(\014\022\014\n\004data\030\010 \002(\014*9\n\014MessageStat"
    "e\022\022\n\016MessageStateOk\020\000\022\025\n\021MessageStateErr"
    "or\020\001", 284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageState_descriptor_;
}
bool MessageState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kPatternFieldNumber;
const int Message::kTopicFieldNumber;
const int Message::kServiceIdFieldNumber;
const int Message::kStateFieldNumber;
const int Message::kPatternDataFieldNumber;
const int Message::kErrorDataFieldNumber;
const int Message::kDataFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MQCloud.BackEnd.Protocol.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MQCloud.BackEnd.Protocol.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  patterndata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errordata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:MQCloud.BackEnd.Protocol.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (patterndata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patterndata_;
  }
  if (errordata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errordata_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, state_);
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pattern_->clear();
      }
    }
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serviceid_->clear();
      }
    }
    if (has_patterndata()) {
      if (patterndata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patterndata_->clear();
      }
    }
    if (has_errordata()) {
      if (errordata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errordata_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MQCloud.BackEnd.Protocol.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pattern;
        break;
      }

      // required string pattern = 2;
      case 2: {
        if (tag == 18) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // required string topic = 3;
      case 3: {
        if (tag == 26) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_serviceId;
        break;
      }

      // required string serviceId = 4;
      case 4: {
        if (tag == 34) {
         parse_serviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required .MQCloud.BackEnd.Protocol.MessageState state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MQCloud::BackEnd::Protocol::MessageState_IsValid(value)) {
            set_state(static_cast< ::MQCloud::BackEnd::Protocol::MessageState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_patternData;
        break;
      }

      // required bytes patternData = 6;
      case 6: {
        if (tag == 50) {
         parse_patternData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_patterndata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_errorData;
        break;
      }

      // required bytes errorData = 7;
      case 7: {
        if (tag == 58) {
         parse_errorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errordata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // required bytes data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MQCloud.BackEnd.Protocol.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MQCloud.BackEnd.Protocol.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MQCloud.BackEnd.Protocol.Message)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pattern(), output);
  }

  // required string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->topic(), output);
  }

  // required string serviceId = 4;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serviceid(), output);
  }

  // required .MQCloud.BackEnd.Protocol.MessageState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // required bytes patternData = 6;
  if (has_patterndata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->patterndata(), output);
  }

  // required bytes errorData = 7;
  if (has_errordata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->errordata(), output);
  }

  // required bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MQCloud.BackEnd.Protocol.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MQCloud.BackEnd.Protocol.Message)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // required string topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }

  // required string serviceId = 4;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serviceid(), target);
  }

  // required .MQCloud.BackEnd.Protocol.MessageState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // required bytes patternData = 6;
  if (has_patterndata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->patterndata(), target);
  }

  // required bytes errorData = 7;
  if (has_errordata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->errordata(), target);
  }

  // required bytes data = 8;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MQCloud.BackEnd.Protocol.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // required string topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

    // required string serviceId = 4;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // required .MQCloud.BackEnd.Protocol.MessageState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required bytes patternData = 6;
    if (has_patterndata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->patterndata());
    }

    // required bytes errorData = 7;
    if (has_errordata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errordata());
    }

    // required bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_patterndata()) {
      set_patterndata(from.patterndata());
    }
    if (from.has_errordata()) {
      set_errordata(from.errordata());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pattern_, other->pattern_);
    std::swap(topic_, other->topic_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(state_, other->state_);
    std::swap(patterndata_, other->patterndata_);
    std::swap(errordata_, other->errordata_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace BackEnd
}  // namespace MQCloud

// @@protoc_insertion_point(global_scope)
