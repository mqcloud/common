// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MQCloud {
namespace BackEnd {
namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class Message;

enum MessageState {
  MessageStateOk = 0,
  MessageStateError = 1
};
bool MessageState_IsValid(int value);
const MessageState MessageState_MIN = MessageStateOk;
const MessageState MessageState_MAX = MessageStateError;
const int MessageState_ARRAYSIZE = MessageState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageState_descriptor();
inline const ::std::string& MessageState_Name(MessageState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageState_descriptor(), value);
}
inline bool MessageState_Parse(
    const ::std::string& name, MessageState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageState>(
    MessageState_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string pattern = 2;
  inline bool has_pattern() const;
  inline void clear_pattern();
  static const int kPatternFieldNumber = 2;
  inline const ::std::string& pattern() const;
  inline void set_pattern(const ::std::string& value);
  inline void set_pattern(const char* value);
  inline void set_pattern(const char* value, size_t size);
  inline ::std::string* mutable_pattern();
  inline ::std::string* release_pattern();
  inline void set_allocated_pattern(::std::string* pattern);

  // required string topic = 3;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // required string serviceId = 4;
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceIdFieldNumber = 4;
  inline const ::std::string& serviceid() const;
  inline void set_serviceid(const ::std::string& value);
  inline void set_serviceid(const char* value);
  inline void set_serviceid(const char* value, size_t size);
  inline ::std::string* mutable_serviceid();
  inline ::std::string* release_serviceid();
  inline void set_allocated_serviceid(::std::string* serviceid);

  // required .MQCloud.BackEnd.Protocol.MessageState state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::MQCloud::BackEnd::Protocol::MessageState state() const;
  inline void set_state(::MQCloud::BackEnd::Protocol::MessageState value);

  // required bytes patternData = 6;
  inline bool has_patterndata() const;
  inline void clear_patterndata();
  static const int kPatternDataFieldNumber = 6;
  inline const ::std::string& patterndata() const;
  inline void set_patterndata(const ::std::string& value);
  inline void set_patterndata(const char* value);
  inline void set_patterndata(const void* value, size_t size);
  inline ::std::string* mutable_patterndata();
  inline ::std::string* release_patterndata();
  inline void set_allocated_patterndata(::std::string* patterndata);

  // required bytes errorData = 7;
  inline bool has_errordata() const;
  inline void clear_errordata();
  static const int kErrorDataFieldNumber = 7;
  inline const ::std::string& errordata() const;
  inline void set_errordata(const ::std::string& value);
  inline void set_errordata(const char* value);
  inline void set_errordata(const void* value, size_t size);
  inline ::std::string* mutable_errordata();
  inline ::std::string* release_errordata();
  inline void set_allocated_errordata(::std::string* errordata);

  // required bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:MQCloud.BackEnd.Protocol.Message)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pattern();
  inline void clear_has_pattern();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_patterndata();
  inline void clear_has_patterndata();
  inline void set_has_errordata();
  inline void clear_has_errordata();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pattern_;
  ::std::string* topic_;
  ::google::protobuf::int32 id_;
  int state_;
  ::std::string* serviceid_;
  ::std::string* patterndata_;
  ::std::string* errordata_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required int32 id = 1;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Message::id() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.id)
  return id_;
}
inline void Message::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.id)
}

// required string pattern = 2;
inline bool Message::has_pattern() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_pattern() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_pattern() {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pattern_->clear();
  }
  clear_has_pattern();
}
inline const ::std::string& Message::pattern() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.pattern)
  return *pattern_;
}
inline void Message::set_pattern(const ::std::string& value) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(value);
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.pattern)
}
inline void Message::set_pattern(const char* value) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(value);
  // @@protoc_insertion_point(field_set_char:MQCloud.BackEnd.Protocol.Message.pattern)
}
inline void Message::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MQCloud.BackEnd.Protocol.Message.pattern)
}
inline ::std::string* Message::mutable_pattern() {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pattern_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MQCloud.BackEnd.Protocol.Message.pattern)
  return pattern_;
}
inline ::std::string* Message::release_pattern() {
  clear_has_pattern();
  if (pattern_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pattern_;
    pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_pattern(::std::string* pattern) {
  if (pattern_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pattern_;
  }
  if (pattern) {
    set_has_pattern();
    pattern_ = pattern;
  } else {
    clear_has_pattern();
    pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MQCloud.BackEnd.Protocol.Message.pattern)
}

// required string topic = 3;
inline bool Message::has_topic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_topic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_topic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_topic() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& Message::topic() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.topic)
  return *topic_;
}
inline void Message::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.topic)
}
inline void Message::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
  // @@protoc_insertion_point(field_set_char:MQCloud.BackEnd.Protocol.Message.topic)
}
inline void Message::set_topic(const char* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MQCloud.BackEnd.Protocol.Message.topic)
}
inline ::std::string* Message::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    topic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MQCloud.BackEnd.Protocol.Message.topic)
  return topic_;
}
inline ::std::string* Message::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MQCloud.BackEnd.Protocol.Message.topic)
}

// required string serviceId = 4;
inline bool Message::has_serviceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_serviceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_serviceid() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_->clear();
  }
  clear_has_serviceid();
}
inline const ::std::string& Message::serviceid() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.serviceId)
  return *serviceid_;
}
inline void Message::set_serviceid(const ::std::string& value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.serviceId)
}
inline void Message::set_serviceid(const char* value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:MQCloud.BackEnd.Protocol.Message.serviceId)
}
inline void Message::set_serviceid(const char* value, size_t size) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MQCloud.BackEnd.Protocol.Message.serviceId)
}
inline ::std::string* Message::mutable_serviceid() {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MQCloud.BackEnd.Protocol.Message.serviceId)
  return serviceid_;
}
inline ::std::string* Message::release_serviceid() {
  clear_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceid_;
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (serviceid) {
    set_has_serviceid();
    serviceid_ = serviceid;
  } else {
    clear_has_serviceid();
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MQCloud.BackEnd.Protocol.Message.serviceId)
}

// required .MQCloud.BackEnd.Protocol.MessageState state = 5;
inline bool Message::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::MQCloud::BackEnd::Protocol::MessageState Message::state() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.state)
  return static_cast< ::MQCloud::BackEnd::Protocol::MessageState >(state_);
}
inline void Message::set_state(::MQCloud::BackEnd::Protocol::MessageState value) {
  assert(::MQCloud::BackEnd::Protocol::MessageState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.state)
}

// required bytes patternData = 6;
inline bool Message::has_patterndata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_patterndata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_patterndata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_patterndata() {
  if (patterndata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patterndata_->clear();
  }
  clear_has_patterndata();
}
inline const ::std::string& Message::patterndata() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.patternData)
  return *patterndata_;
}
inline void Message::set_patterndata(const ::std::string& value) {
  set_has_patterndata();
  if (patterndata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patterndata_ = new ::std::string;
  }
  patterndata_->assign(value);
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.patternData)
}
inline void Message::set_patterndata(const char* value) {
  set_has_patterndata();
  if (patterndata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patterndata_ = new ::std::string;
  }
  patterndata_->assign(value);
  // @@protoc_insertion_point(field_set_char:MQCloud.BackEnd.Protocol.Message.patternData)
}
inline void Message::set_patterndata(const void* value, size_t size) {
  set_has_patterndata();
  if (patterndata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patterndata_ = new ::std::string;
  }
  patterndata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MQCloud.BackEnd.Protocol.Message.patternData)
}
inline ::std::string* Message::mutable_patterndata() {
  set_has_patterndata();
  if (patterndata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patterndata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MQCloud.BackEnd.Protocol.Message.patternData)
  return patterndata_;
}
inline ::std::string* Message::release_patterndata() {
  clear_has_patterndata();
  if (patterndata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = patterndata_;
    patterndata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_patterndata(::std::string* patterndata) {
  if (patterndata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patterndata_;
  }
  if (patterndata) {
    set_has_patterndata();
    patterndata_ = patterndata;
  } else {
    clear_has_patterndata();
    patterndata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MQCloud.BackEnd.Protocol.Message.patternData)
}

// required bytes errorData = 7;
inline bool Message::has_errordata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_errordata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_errordata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_errordata() {
  if (errordata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errordata_->clear();
  }
  clear_has_errordata();
}
inline const ::std::string& Message::errordata() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.errorData)
  return *errordata_;
}
inline void Message::set_errordata(const ::std::string& value) {
  set_has_errordata();
  if (errordata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errordata_ = new ::std::string;
  }
  errordata_->assign(value);
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.errorData)
}
inline void Message::set_errordata(const char* value) {
  set_has_errordata();
  if (errordata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errordata_ = new ::std::string;
  }
  errordata_->assign(value);
  // @@protoc_insertion_point(field_set_char:MQCloud.BackEnd.Protocol.Message.errorData)
}
inline void Message::set_errordata(const void* value, size_t size) {
  set_has_errordata();
  if (errordata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errordata_ = new ::std::string;
  }
  errordata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MQCloud.BackEnd.Protocol.Message.errorData)
}
inline ::std::string* Message::mutable_errordata() {
  set_has_errordata();
  if (errordata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errordata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MQCloud.BackEnd.Protocol.Message.errorData)
  return errordata_;
}
inline ::std::string* Message::release_errordata() {
  clear_has_errordata();
  if (errordata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errordata_;
    errordata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_errordata(::std::string* errordata) {
  if (errordata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errordata_;
  }
  if (errordata) {
    set_has_errordata();
    errordata_ = errordata;
  } else {
    clear_has_errordata();
    errordata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MQCloud.BackEnd.Protocol.Message.errorData)
}

// required bytes data = 8;
inline bool Message::has_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:MQCloud.BackEnd.Protocol.Message.data)
  return *data_;
}
inline void Message::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:MQCloud.BackEnd.Protocol.Message.data)
}
inline void Message::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:MQCloud.BackEnd.Protocol.Message.data)
}
inline void Message::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MQCloud.BackEnd.Protocol.Message.data)
}
inline ::std::string* Message::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MQCloud.BackEnd.Protocol.Message.data)
  return data_;
}
inline ::std::string* Message::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MQCloud.BackEnd.Protocol.Message.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace BackEnd
}  // namespace MQCloud

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MQCloud::BackEnd::Protocol::MessageState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MQCloud::BackEnd::Protocol::MessageState>() {
  return ::MQCloud::BackEnd::Protocol::MessageState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
